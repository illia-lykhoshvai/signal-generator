
sig-generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000224c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002424  08002424  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002424  08002424  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002424  08002424  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002424  08002424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002428  08002428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800242c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000068  08002494  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08002494  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d5b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009f0  00000000  00000000  00021deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  000227e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00022960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b8ca  00000000  00000000  00022a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002737  00000000  00000000  0002e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003b837  00000000  00000000  00030a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006c2c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000974  00000000  00000000  0006c318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022f4 	.word	0x080022f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080022f4 	.word	0x080022f4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0008      	movs	r0, r1
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 f9b7 	bl	80005b0 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f943 	bl	80004d8 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9a9 	bl	80005b0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f99f 	bl	80005b0 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f94f 	bl	8000524 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f945 	bl	8000524 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_fdiv>:
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	464f      	mov	r7, r9
 80002ac:	4646      	mov	r6, r8
 80002ae:	46d6      	mov	lr, sl
 80002b0:	0245      	lsls	r5, r0, #9
 80002b2:	b5c0      	push	{r6, r7, lr}
 80002b4:	0047      	lsls	r7, r0, #1
 80002b6:	1c0c      	adds	r4, r1, #0
 80002b8:	0a6d      	lsrs	r5, r5, #9
 80002ba:	0e3f      	lsrs	r7, r7, #24
 80002bc:	0fc6      	lsrs	r6, r0, #31
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d100      	bne.n	80002c4 <__aeabi_fdiv+0x1c>
 80002c2:	e070      	b.n	80003a6 <__aeabi_fdiv+0xfe>
 80002c4:	2fff      	cmp	r7, #255	; 0xff
 80002c6:	d100      	bne.n	80002ca <__aeabi_fdiv+0x22>
 80002c8:	e075      	b.n	80003b6 <__aeabi_fdiv+0x10e>
 80002ca:	00eb      	lsls	r3, r5, #3
 80002cc:	2580      	movs	r5, #128	; 0x80
 80002ce:	04ed      	lsls	r5, r5, #19
 80002d0:	431d      	orrs	r5, r3
 80002d2:	2300      	movs	r3, #0
 80002d4:	4699      	mov	r9, r3
 80002d6:	469a      	mov	sl, r3
 80002d8:	3f7f      	subs	r7, #127	; 0x7f
 80002da:	0260      	lsls	r0, r4, #9
 80002dc:	0a43      	lsrs	r3, r0, #9
 80002de:	4698      	mov	r8, r3
 80002e0:	0063      	lsls	r3, r4, #1
 80002e2:	0e1b      	lsrs	r3, r3, #24
 80002e4:	0fe4      	lsrs	r4, r4, #31
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d04e      	beq.n	8000388 <__aeabi_fdiv+0xe0>
 80002ea:	2bff      	cmp	r3, #255	; 0xff
 80002ec:	d046      	beq.n	800037c <__aeabi_fdiv+0xd4>
 80002ee:	4642      	mov	r2, r8
 80002f0:	00d0      	lsls	r0, r2, #3
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	04d2      	lsls	r2, r2, #19
 80002f6:	4302      	orrs	r2, r0
 80002f8:	4690      	mov	r8, r2
 80002fa:	2200      	movs	r2, #0
 80002fc:	3b7f      	subs	r3, #127	; 0x7f
 80002fe:	0031      	movs	r1, r6
 8000300:	1aff      	subs	r7, r7, r3
 8000302:	464b      	mov	r3, r9
 8000304:	4061      	eors	r1, r4
 8000306:	b2c9      	uxtb	r1, r1
 8000308:	4313      	orrs	r3, r2
 800030a:	2b0f      	cmp	r3, #15
 800030c:	d900      	bls.n	8000310 <__aeabi_fdiv+0x68>
 800030e:	e0b5      	b.n	800047c <__aeabi_fdiv+0x1d4>
 8000310:	486e      	ldr	r0, [pc, #440]	; (80004cc <__aeabi_fdiv+0x224>)
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	58c3      	ldr	r3, [r0, r3]
 8000316:	469f      	mov	pc, r3
 8000318:	2300      	movs	r3, #0
 800031a:	4698      	mov	r8, r3
 800031c:	0026      	movs	r6, r4
 800031e:	4645      	mov	r5, r8
 8000320:	4692      	mov	sl, r2
 8000322:	4653      	mov	r3, sl
 8000324:	2b02      	cmp	r3, #2
 8000326:	d100      	bne.n	800032a <__aeabi_fdiv+0x82>
 8000328:	e089      	b.n	800043e <__aeabi_fdiv+0x196>
 800032a:	2b03      	cmp	r3, #3
 800032c:	d100      	bne.n	8000330 <__aeabi_fdiv+0x88>
 800032e:	e09e      	b.n	800046e <__aeabi_fdiv+0x1c6>
 8000330:	2b01      	cmp	r3, #1
 8000332:	d018      	beq.n	8000366 <__aeabi_fdiv+0xbe>
 8000334:	003b      	movs	r3, r7
 8000336:	337f      	adds	r3, #127	; 0x7f
 8000338:	2b00      	cmp	r3, #0
 800033a:	dd69      	ble.n	8000410 <__aeabi_fdiv+0x168>
 800033c:	076a      	lsls	r2, r5, #29
 800033e:	d004      	beq.n	800034a <__aeabi_fdiv+0xa2>
 8000340:	220f      	movs	r2, #15
 8000342:	402a      	ands	r2, r5
 8000344:	2a04      	cmp	r2, #4
 8000346:	d000      	beq.n	800034a <__aeabi_fdiv+0xa2>
 8000348:	3504      	adds	r5, #4
 800034a:	012a      	lsls	r2, r5, #4
 800034c:	d503      	bpl.n	8000356 <__aeabi_fdiv+0xae>
 800034e:	4b60      	ldr	r3, [pc, #384]	; (80004d0 <__aeabi_fdiv+0x228>)
 8000350:	401d      	ands	r5, r3
 8000352:	003b      	movs	r3, r7
 8000354:	3380      	adds	r3, #128	; 0x80
 8000356:	2bfe      	cmp	r3, #254	; 0xfe
 8000358:	dd00      	ble.n	800035c <__aeabi_fdiv+0xb4>
 800035a:	e070      	b.n	800043e <__aeabi_fdiv+0x196>
 800035c:	01ad      	lsls	r5, r5, #6
 800035e:	0a6d      	lsrs	r5, r5, #9
 8000360:	b2d8      	uxtb	r0, r3
 8000362:	e002      	b.n	800036a <__aeabi_fdiv+0xc2>
 8000364:	000e      	movs	r6, r1
 8000366:	2000      	movs	r0, #0
 8000368:	2500      	movs	r5, #0
 800036a:	05c0      	lsls	r0, r0, #23
 800036c:	4328      	orrs	r0, r5
 800036e:	07f6      	lsls	r6, r6, #31
 8000370:	4330      	orrs	r0, r6
 8000372:	bce0      	pop	{r5, r6, r7}
 8000374:	46ba      	mov	sl, r7
 8000376:	46b1      	mov	r9, r6
 8000378:	46a8      	mov	r8, r5
 800037a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800037c:	4643      	mov	r3, r8
 800037e:	2b00      	cmp	r3, #0
 8000380:	d13f      	bne.n	8000402 <__aeabi_fdiv+0x15a>
 8000382:	2202      	movs	r2, #2
 8000384:	3fff      	subs	r7, #255	; 0xff
 8000386:	e003      	b.n	8000390 <__aeabi_fdiv+0xe8>
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d12d      	bne.n	80003ea <__aeabi_fdiv+0x142>
 800038e:	2201      	movs	r2, #1
 8000390:	0031      	movs	r1, r6
 8000392:	464b      	mov	r3, r9
 8000394:	4061      	eors	r1, r4
 8000396:	b2c9      	uxtb	r1, r1
 8000398:	4313      	orrs	r3, r2
 800039a:	2b0f      	cmp	r3, #15
 800039c:	d834      	bhi.n	8000408 <__aeabi_fdiv+0x160>
 800039e:	484d      	ldr	r0, [pc, #308]	; (80004d4 <__aeabi_fdiv+0x22c>)
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	58c3      	ldr	r3, [r0, r3]
 80003a4:	469f      	mov	pc, r3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d113      	bne.n	80003d2 <__aeabi_fdiv+0x12a>
 80003aa:	2304      	movs	r3, #4
 80003ac:	4699      	mov	r9, r3
 80003ae:	3b03      	subs	r3, #3
 80003b0:	2700      	movs	r7, #0
 80003b2:	469a      	mov	sl, r3
 80003b4:	e791      	b.n	80002da <__aeabi_fdiv+0x32>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d105      	bne.n	80003c6 <__aeabi_fdiv+0x11e>
 80003ba:	2308      	movs	r3, #8
 80003bc:	4699      	mov	r9, r3
 80003be:	3b06      	subs	r3, #6
 80003c0:	27ff      	movs	r7, #255	; 0xff
 80003c2:	469a      	mov	sl, r3
 80003c4:	e789      	b.n	80002da <__aeabi_fdiv+0x32>
 80003c6:	230c      	movs	r3, #12
 80003c8:	4699      	mov	r9, r3
 80003ca:	3b09      	subs	r3, #9
 80003cc:	27ff      	movs	r7, #255	; 0xff
 80003ce:	469a      	mov	sl, r3
 80003d0:	e783      	b.n	80002da <__aeabi_fdiv+0x32>
 80003d2:	0028      	movs	r0, r5
 80003d4:	f000 fc72 	bl	8000cbc <__clzsi2>
 80003d8:	2776      	movs	r7, #118	; 0x76
 80003da:	1f43      	subs	r3, r0, #5
 80003dc:	409d      	lsls	r5, r3
 80003de:	2300      	movs	r3, #0
 80003e0:	427f      	negs	r7, r7
 80003e2:	4699      	mov	r9, r3
 80003e4:	469a      	mov	sl, r3
 80003e6:	1a3f      	subs	r7, r7, r0
 80003e8:	e777      	b.n	80002da <__aeabi_fdiv+0x32>
 80003ea:	4640      	mov	r0, r8
 80003ec:	f000 fc66 	bl	8000cbc <__clzsi2>
 80003f0:	4642      	mov	r2, r8
 80003f2:	1f43      	subs	r3, r0, #5
 80003f4:	409a      	lsls	r2, r3
 80003f6:	2376      	movs	r3, #118	; 0x76
 80003f8:	425b      	negs	r3, r3
 80003fa:	4690      	mov	r8, r2
 80003fc:	1a1b      	subs	r3, r3, r0
 80003fe:	2200      	movs	r2, #0
 8000400:	e77d      	b.n	80002fe <__aeabi_fdiv+0x56>
 8000402:	23ff      	movs	r3, #255	; 0xff
 8000404:	2203      	movs	r2, #3
 8000406:	e77a      	b.n	80002fe <__aeabi_fdiv+0x56>
 8000408:	000e      	movs	r6, r1
 800040a:	20ff      	movs	r0, #255	; 0xff
 800040c:	2500      	movs	r5, #0
 800040e:	e7ac      	b.n	800036a <__aeabi_fdiv+0xc2>
 8000410:	2001      	movs	r0, #1
 8000412:	1ac0      	subs	r0, r0, r3
 8000414:	281b      	cmp	r0, #27
 8000416:	dca6      	bgt.n	8000366 <__aeabi_fdiv+0xbe>
 8000418:	379e      	adds	r7, #158	; 0x9e
 800041a:	002a      	movs	r2, r5
 800041c:	40bd      	lsls	r5, r7
 800041e:	40c2      	lsrs	r2, r0
 8000420:	1e6b      	subs	r3, r5, #1
 8000422:	419d      	sbcs	r5, r3
 8000424:	4315      	orrs	r5, r2
 8000426:	076b      	lsls	r3, r5, #29
 8000428:	d004      	beq.n	8000434 <__aeabi_fdiv+0x18c>
 800042a:	230f      	movs	r3, #15
 800042c:	402b      	ands	r3, r5
 800042e:	2b04      	cmp	r3, #4
 8000430:	d000      	beq.n	8000434 <__aeabi_fdiv+0x18c>
 8000432:	3504      	adds	r5, #4
 8000434:	016b      	lsls	r3, r5, #5
 8000436:	d544      	bpl.n	80004c2 <__aeabi_fdiv+0x21a>
 8000438:	2001      	movs	r0, #1
 800043a:	2500      	movs	r5, #0
 800043c:	e795      	b.n	800036a <__aeabi_fdiv+0xc2>
 800043e:	20ff      	movs	r0, #255	; 0xff
 8000440:	2500      	movs	r5, #0
 8000442:	e792      	b.n	800036a <__aeabi_fdiv+0xc2>
 8000444:	2580      	movs	r5, #128	; 0x80
 8000446:	2600      	movs	r6, #0
 8000448:	20ff      	movs	r0, #255	; 0xff
 800044a:	03ed      	lsls	r5, r5, #15
 800044c:	e78d      	b.n	800036a <__aeabi_fdiv+0xc2>
 800044e:	2300      	movs	r3, #0
 8000450:	4698      	mov	r8, r3
 8000452:	2080      	movs	r0, #128	; 0x80
 8000454:	03c0      	lsls	r0, r0, #15
 8000456:	4205      	tst	r5, r0
 8000458:	d009      	beq.n	800046e <__aeabi_fdiv+0x1c6>
 800045a:	4643      	mov	r3, r8
 800045c:	4203      	tst	r3, r0
 800045e:	d106      	bne.n	800046e <__aeabi_fdiv+0x1c6>
 8000460:	4645      	mov	r5, r8
 8000462:	4305      	orrs	r5, r0
 8000464:	026d      	lsls	r5, r5, #9
 8000466:	0026      	movs	r6, r4
 8000468:	20ff      	movs	r0, #255	; 0xff
 800046a:	0a6d      	lsrs	r5, r5, #9
 800046c:	e77d      	b.n	800036a <__aeabi_fdiv+0xc2>
 800046e:	2080      	movs	r0, #128	; 0x80
 8000470:	03c0      	lsls	r0, r0, #15
 8000472:	4305      	orrs	r5, r0
 8000474:	026d      	lsls	r5, r5, #9
 8000476:	20ff      	movs	r0, #255	; 0xff
 8000478:	0a6d      	lsrs	r5, r5, #9
 800047a:	e776      	b.n	800036a <__aeabi_fdiv+0xc2>
 800047c:	4642      	mov	r2, r8
 800047e:	016b      	lsls	r3, r5, #5
 8000480:	0150      	lsls	r0, r2, #5
 8000482:	4283      	cmp	r3, r0
 8000484:	d219      	bcs.n	80004ba <__aeabi_fdiv+0x212>
 8000486:	221b      	movs	r2, #27
 8000488:	2500      	movs	r5, #0
 800048a:	3f01      	subs	r7, #1
 800048c:	2601      	movs	r6, #1
 800048e:	001c      	movs	r4, r3
 8000490:	006d      	lsls	r5, r5, #1
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	2c00      	cmp	r4, #0
 8000496:	db01      	blt.n	800049c <__aeabi_fdiv+0x1f4>
 8000498:	4298      	cmp	r0, r3
 800049a:	d801      	bhi.n	80004a0 <__aeabi_fdiv+0x1f8>
 800049c:	1a1b      	subs	r3, r3, r0
 800049e:	4335      	orrs	r5, r6
 80004a0:	3a01      	subs	r2, #1
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	d1f3      	bne.n	800048e <__aeabi_fdiv+0x1e6>
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	4193      	sbcs	r3, r2
 80004aa:	431d      	orrs	r5, r3
 80004ac:	003b      	movs	r3, r7
 80004ae:	337f      	adds	r3, #127	; 0x7f
 80004b0:	000e      	movs	r6, r1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	dd00      	ble.n	80004b8 <__aeabi_fdiv+0x210>
 80004b6:	e741      	b.n	800033c <__aeabi_fdiv+0x94>
 80004b8:	e7aa      	b.n	8000410 <__aeabi_fdiv+0x168>
 80004ba:	221a      	movs	r2, #26
 80004bc:	2501      	movs	r5, #1
 80004be:	1a1b      	subs	r3, r3, r0
 80004c0:	e7e4      	b.n	800048c <__aeabi_fdiv+0x1e4>
 80004c2:	01ad      	lsls	r5, r5, #6
 80004c4:	2000      	movs	r0, #0
 80004c6:	0a6d      	lsrs	r5, r5, #9
 80004c8:	e74f      	b.n	800036a <__aeabi_fdiv+0xc2>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	08002320 	.word	0x08002320
 80004d0:	f7ffffff 	.word	0xf7ffffff
 80004d4:	08002360 	.word	0x08002360

080004d8 <__eqsf2>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	0042      	lsls	r2, r0, #1
 80004dc:	0245      	lsls	r5, r0, #9
 80004de:	024e      	lsls	r6, r1, #9
 80004e0:	004c      	lsls	r4, r1, #1
 80004e2:	0fc3      	lsrs	r3, r0, #31
 80004e4:	0a6d      	lsrs	r5, r5, #9
 80004e6:	2001      	movs	r0, #1
 80004e8:	0e12      	lsrs	r2, r2, #24
 80004ea:	0a76      	lsrs	r6, r6, #9
 80004ec:	0e24      	lsrs	r4, r4, #24
 80004ee:	0fc9      	lsrs	r1, r1, #31
 80004f0:	2aff      	cmp	r2, #255	; 0xff
 80004f2:	d006      	beq.n	8000502 <__eqsf2+0x2a>
 80004f4:	2cff      	cmp	r4, #255	; 0xff
 80004f6:	d003      	beq.n	8000500 <__eqsf2+0x28>
 80004f8:	42a2      	cmp	r2, r4
 80004fa:	d101      	bne.n	8000500 <__eqsf2+0x28>
 80004fc:	42b5      	cmp	r5, r6
 80004fe:	d006      	beq.n	800050e <__eqsf2+0x36>
 8000500:	bd70      	pop	{r4, r5, r6, pc}
 8000502:	2d00      	cmp	r5, #0
 8000504:	d1fc      	bne.n	8000500 <__eqsf2+0x28>
 8000506:	2cff      	cmp	r4, #255	; 0xff
 8000508:	d1fa      	bne.n	8000500 <__eqsf2+0x28>
 800050a:	2e00      	cmp	r6, #0
 800050c:	d1f8      	bne.n	8000500 <__eqsf2+0x28>
 800050e:	428b      	cmp	r3, r1
 8000510:	d006      	beq.n	8000520 <__eqsf2+0x48>
 8000512:	2001      	movs	r0, #1
 8000514:	2a00      	cmp	r2, #0
 8000516:	d1f3      	bne.n	8000500 <__eqsf2+0x28>
 8000518:	0028      	movs	r0, r5
 800051a:	1e43      	subs	r3, r0, #1
 800051c:	4198      	sbcs	r0, r3
 800051e:	e7ef      	b.n	8000500 <__eqsf2+0x28>
 8000520:	2000      	movs	r0, #0
 8000522:	e7ed      	b.n	8000500 <__eqsf2+0x28>

08000524 <__gesf2>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	0042      	lsls	r2, r0, #1
 8000528:	0245      	lsls	r5, r0, #9
 800052a:	024e      	lsls	r6, r1, #9
 800052c:	004c      	lsls	r4, r1, #1
 800052e:	0fc3      	lsrs	r3, r0, #31
 8000530:	0a6d      	lsrs	r5, r5, #9
 8000532:	0e12      	lsrs	r2, r2, #24
 8000534:	0a76      	lsrs	r6, r6, #9
 8000536:	0e24      	lsrs	r4, r4, #24
 8000538:	0fc8      	lsrs	r0, r1, #31
 800053a:	2aff      	cmp	r2, #255	; 0xff
 800053c:	d01b      	beq.n	8000576 <__gesf2+0x52>
 800053e:	2cff      	cmp	r4, #255	; 0xff
 8000540:	d00e      	beq.n	8000560 <__gesf2+0x3c>
 8000542:	2a00      	cmp	r2, #0
 8000544:	d11b      	bne.n	800057e <__gesf2+0x5a>
 8000546:	2c00      	cmp	r4, #0
 8000548:	d101      	bne.n	800054e <__gesf2+0x2a>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d01c      	beq.n	8000588 <__gesf2+0x64>
 800054e:	2d00      	cmp	r5, #0
 8000550:	d00c      	beq.n	800056c <__gesf2+0x48>
 8000552:	4283      	cmp	r3, r0
 8000554:	d01c      	beq.n	8000590 <__gesf2+0x6c>
 8000556:	2102      	movs	r1, #2
 8000558:	1e58      	subs	r0, r3, #1
 800055a:	4008      	ands	r0, r1
 800055c:	3801      	subs	r0, #1
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	2e00      	cmp	r6, #0
 8000562:	d122      	bne.n	80005aa <__gesf2+0x86>
 8000564:	2a00      	cmp	r2, #0
 8000566:	d1f4      	bne.n	8000552 <__gesf2+0x2e>
 8000568:	2d00      	cmp	r5, #0
 800056a:	d1f2      	bne.n	8000552 <__gesf2+0x2e>
 800056c:	2800      	cmp	r0, #0
 800056e:	d1f6      	bne.n	800055e <__gesf2+0x3a>
 8000570:	2001      	movs	r0, #1
 8000572:	4240      	negs	r0, r0
 8000574:	e7f3      	b.n	800055e <__gesf2+0x3a>
 8000576:	2d00      	cmp	r5, #0
 8000578:	d117      	bne.n	80005aa <__gesf2+0x86>
 800057a:	2cff      	cmp	r4, #255	; 0xff
 800057c:	d0f0      	beq.n	8000560 <__gesf2+0x3c>
 800057e:	2c00      	cmp	r4, #0
 8000580:	d1e7      	bne.n	8000552 <__gesf2+0x2e>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d1e5      	bne.n	8000552 <__gesf2+0x2e>
 8000586:	e7e6      	b.n	8000556 <__gesf2+0x32>
 8000588:	2000      	movs	r0, #0
 800058a:	2d00      	cmp	r5, #0
 800058c:	d0e7      	beq.n	800055e <__gesf2+0x3a>
 800058e:	e7e2      	b.n	8000556 <__gesf2+0x32>
 8000590:	42a2      	cmp	r2, r4
 8000592:	dc05      	bgt.n	80005a0 <__gesf2+0x7c>
 8000594:	dbea      	blt.n	800056c <__gesf2+0x48>
 8000596:	42b5      	cmp	r5, r6
 8000598:	d802      	bhi.n	80005a0 <__gesf2+0x7c>
 800059a:	d3e7      	bcc.n	800056c <__gesf2+0x48>
 800059c:	2000      	movs	r0, #0
 800059e:	e7de      	b.n	800055e <__gesf2+0x3a>
 80005a0:	4243      	negs	r3, r0
 80005a2:	4158      	adcs	r0, r3
 80005a4:	0040      	lsls	r0, r0, #1
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7d9      	b.n	800055e <__gesf2+0x3a>
 80005aa:	2002      	movs	r0, #2
 80005ac:	4240      	negs	r0, r0
 80005ae:	e7d6      	b.n	800055e <__gesf2+0x3a>

080005b0 <__lesf2>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	0042      	lsls	r2, r0, #1
 80005b4:	0245      	lsls	r5, r0, #9
 80005b6:	024e      	lsls	r6, r1, #9
 80005b8:	004c      	lsls	r4, r1, #1
 80005ba:	0fc3      	lsrs	r3, r0, #31
 80005bc:	0a6d      	lsrs	r5, r5, #9
 80005be:	0e12      	lsrs	r2, r2, #24
 80005c0:	0a76      	lsrs	r6, r6, #9
 80005c2:	0e24      	lsrs	r4, r4, #24
 80005c4:	0fc8      	lsrs	r0, r1, #31
 80005c6:	2aff      	cmp	r2, #255	; 0xff
 80005c8:	d00b      	beq.n	80005e2 <__lesf2+0x32>
 80005ca:	2cff      	cmp	r4, #255	; 0xff
 80005cc:	d00d      	beq.n	80005ea <__lesf2+0x3a>
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	d11f      	bne.n	8000612 <__lesf2+0x62>
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d116      	bne.n	8000604 <__lesf2+0x54>
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d114      	bne.n	8000604 <__lesf2+0x54>
 80005da:	2000      	movs	r0, #0
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d010      	beq.n	8000602 <__lesf2+0x52>
 80005e0:	e009      	b.n	80005f6 <__lesf2+0x46>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d10c      	bne.n	8000600 <__lesf2+0x50>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d113      	bne.n	8000612 <__lesf2+0x62>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d108      	bne.n	8000600 <__lesf2+0x50>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d008      	beq.n	8000604 <__lesf2+0x54>
 80005f2:	4283      	cmp	r3, r0
 80005f4:	d012      	beq.n	800061c <__lesf2+0x6c>
 80005f6:	2102      	movs	r1, #2
 80005f8:	1e58      	subs	r0, r3, #1
 80005fa:	4008      	ands	r0, r1
 80005fc:	3801      	subs	r0, #1
 80005fe:	e000      	b.n	8000602 <__lesf2+0x52>
 8000600:	2002      	movs	r0, #2
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	2d00      	cmp	r5, #0
 8000606:	d1f4      	bne.n	80005f2 <__lesf2+0x42>
 8000608:	2800      	cmp	r0, #0
 800060a:	d1fa      	bne.n	8000602 <__lesf2+0x52>
 800060c:	2001      	movs	r0, #1
 800060e:	4240      	negs	r0, r0
 8000610:	e7f7      	b.n	8000602 <__lesf2+0x52>
 8000612:	2c00      	cmp	r4, #0
 8000614:	d1ed      	bne.n	80005f2 <__lesf2+0x42>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d1eb      	bne.n	80005f2 <__lesf2+0x42>
 800061a:	e7ec      	b.n	80005f6 <__lesf2+0x46>
 800061c:	42a2      	cmp	r2, r4
 800061e:	dc05      	bgt.n	800062c <__lesf2+0x7c>
 8000620:	dbf2      	blt.n	8000608 <__lesf2+0x58>
 8000622:	42b5      	cmp	r5, r6
 8000624:	d802      	bhi.n	800062c <__lesf2+0x7c>
 8000626:	d3ef      	bcc.n	8000608 <__lesf2+0x58>
 8000628:	2000      	movs	r0, #0
 800062a:	e7ea      	b.n	8000602 <__lesf2+0x52>
 800062c:	4243      	negs	r3, r0
 800062e:	4158      	adcs	r0, r3
 8000630:	0040      	lsls	r0, r0, #1
 8000632:	3801      	subs	r0, #1
 8000634:	e7e5      	b.n	8000602 <__lesf2+0x52>
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__aeabi_fmul>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	464f      	mov	r7, r9
 800063c:	4646      	mov	r6, r8
 800063e:	46d6      	mov	lr, sl
 8000640:	0244      	lsls	r4, r0, #9
 8000642:	0045      	lsls	r5, r0, #1
 8000644:	b5c0      	push	{r6, r7, lr}
 8000646:	0a64      	lsrs	r4, r4, #9
 8000648:	1c0f      	adds	r7, r1, #0
 800064a:	0e2d      	lsrs	r5, r5, #24
 800064c:	0fc6      	lsrs	r6, r0, #31
 800064e:	2d00      	cmp	r5, #0
 8000650:	d100      	bne.n	8000654 <__aeabi_fmul+0x1c>
 8000652:	e08d      	b.n	8000770 <__aeabi_fmul+0x138>
 8000654:	2dff      	cmp	r5, #255	; 0xff
 8000656:	d100      	bne.n	800065a <__aeabi_fmul+0x22>
 8000658:	e092      	b.n	8000780 <__aeabi_fmul+0x148>
 800065a:	2300      	movs	r3, #0
 800065c:	2080      	movs	r0, #128	; 0x80
 800065e:	4699      	mov	r9, r3
 8000660:	469a      	mov	sl, r3
 8000662:	00e4      	lsls	r4, r4, #3
 8000664:	04c0      	lsls	r0, r0, #19
 8000666:	4304      	orrs	r4, r0
 8000668:	3d7f      	subs	r5, #127	; 0x7f
 800066a:	0278      	lsls	r0, r7, #9
 800066c:	0a43      	lsrs	r3, r0, #9
 800066e:	4698      	mov	r8, r3
 8000670:	007b      	lsls	r3, r7, #1
 8000672:	0e1b      	lsrs	r3, r3, #24
 8000674:	0fff      	lsrs	r7, r7, #31
 8000676:	2b00      	cmp	r3, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fmul+0x44>
 800067a:	e070      	b.n	800075e <__aeabi_fmul+0x126>
 800067c:	2bff      	cmp	r3, #255	; 0xff
 800067e:	d100      	bne.n	8000682 <__aeabi_fmul+0x4a>
 8000680:	e086      	b.n	8000790 <__aeabi_fmul+0x158>
 8000682:	4642      	mov	r2, r8
 8000684:	00d0      	lsls	r0, r2, #3
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	3b7f      	subs	r3, #127	; 0x7f
 800068a:	18ed      	adds	r5, r5, r3
 800068c:	2300      	movs	r3, #0
 800068e:	04d2      	lsls	r2, r2, #19
 8000690:	4302      	orrs	r2, r0
 8000692:	4690      	mov	r8, r2
 8000694:	469c      	mov	ip, r3
 8000696:	0031      	movs	r1, r6
 8000698:	464b      	mov	r3, r9
 800069a:	4079      	eors	r1, r7
 800069c:	1c68      	adds	r0, r5, #1
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d81c      	bhi.n	80006dc <__aeabi_fmul+0xa4>
 80006a2:	4a76      	ldr	r2, [pc, #472]	; (800087c <__aeabi_fmul+0x244>)
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	58d3      	ldr	r3, [r2, r3]
 80006a8:	469f      	mov	pc, r3
 80006aa:	0039      	movs	r1, r7
 80006ac:	4644      	mov	r4, r8
 80006ae:	46e2      	mov	sl, ip
 80006b0:	4653      	mov	r3, sl
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d00f      	beq.n	80006d6 <__aeabi_fmul+0x9e>
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d100      	bne.n	80006bc <__aeabi_fmul+0x84>
 80006ba:	e0d7      	b.n	800086c <__aeabi_fmul+0x234>
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d137      	bne.n	8000730 <__aeabi_fmul+0xf8>
 80006c0:	2000      	movs	r0, #0
 80006c2:	2400      	movs	r4, #0
 80006c4:	05c0      	lsls	r0, r0, #23
 80006c6:	4320      	orrs	r0, r4
 80006c8:	07c9      	lsls	r1, r1, #31
 80006ca:	4308      	orrs	r0, r1
 80006cc:	bce0      	pop	{r5, r6, r7}
 80006ce:	46ba      	mov	sl, r7
 80006d0:	46b1      	mov	r9, r6
 80006d2:	46a8      	mov	r8, r5
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	20ff      	movs	r0, #255	; 0xff
 80006d8:	2400      	movs	r4, #0
 80006da:	e7f3      	b.n	80006c4 <__aeabi_fmul+0x8c>
 80006dc:	0c26      	lsrs	r6, r4, #16
 80006de:	0424      	lsls	r4, r4, #16
 80006e0:	0c22      	lsrs	r2, r4, #16
 80006e2:	4644      	mov	r4, r8
 80006e4:	0424      	lsls	r4, r4, #16
 80006e6:	0c24      	lsrs	r4, r4, #16
 80006e8:	4643      	mov	r3, r8
 80006ea:	0027      	movs	r7, r4
 80006ec:	0c1b      	lsrs	r3, r3, #16
 80006ee:	4357      	muls	r7, r2
 80006f0:	4374      	muls	r4, r6
 80006f2:	435a      	muls	r2, r3
 80006f4:	435e      	muls	r6, r3
 80006f6:	1912      	adds	r2, r2, r4
 80006f8:	0c3b      	lsrs	r3, r7, #16
 80006fa:	189b      	adds	r3, r3, r2
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d903      	bls.n	8000708 <__aeabi_fmul+0xd0>
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0252      	lsls	r2, r2, #9
 8000704:	4694      	mov	ip, r2
 8000706:	4466      	add	r6, ip
 8000708:	043f      	lsls	r7, r7, #16
 800070a:	041a      	lsls	r2, r3, #16
 800070c:	0c3f      	lsrs	r7, r7, #16
 800070e:	19d2      	adds	r2, r2, r7
 8000710:	0194      	lsls	r4, r2, #6
 8000712:	1e67      	subs	r7, r4, #1
 8000714:	41bc      	sbcs	r4, r7
 8000716:	0c1b      	lsrs	r3, r3, #16
 8000718:	0e92      	lsrs	r2, r2, #26
 800071a:	199b      	adds	r3, r3, r6
 800071c:	4314      	orrs	r4, r2
 800071e:	019b      	lsls	r3, r3, #6
 8000720:	431c      	orrs	r4, r3
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	d400      	bmi.n	8000728 <__aeabi_fmul+0xf0>
 8000726:	e09b      	b.n	8000860 <__aeabi_fmul+0x228>
 8000728:	2301      	movs	r3, #1
 800072a:	0862      	lsrs	r2, r4, #1
 800072c:	401c      	ands	r4, r3
 800072e:	4314      	orrs	r4, r2
 8000730:	0002      	movs	r2, r0
 8000732:	327f      	adds	r2, #127	; 0x7f
 8000734:	2a00      	cmp	r2, #0
 8000736:	dd64      	ble.n	8000802 <__aeabi_fmul+0x1ca>
 8000738:	0763      	lsls	r3, r4, #29
 800073a:	d004      	beq.n	8000746 <__aeabi_fmul+0x10e>
 800073c:	230f      	movs	r3, #15
 800073e:	4023      	ands	r3, r4
 8000740:	2b04      	cmp	r3, #4
 8000742:	d000      	beq.n	8000746 <__aeabi_fmul+0x10e>
 8000744:	3404      	adds	r4, #4
 8000746:	0123      	lsls	r3, r4, #4
 8000748:	d503      	bpl.n	8000752 <__aeabi_fmul+0x11a>
 800074a:	0002      	movs	r2, r0
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <__aeabi_fmul+0x248>)
 800074e:	3280      	adds	r2, #128	; 0x80
 8000750:	401c      	ands	r4, r3
 8000752:	2afe      	cmp	r2, #254	; 0xfe
 8000754:	dcbf      	bgt.n	80006d6 <__aeabi_fmul+0x9e>
 8000756:	01a4      	lsls	r4, r4, #6
 8000758:	0a64      	lsrs	r4, r4, #9
 800075a:	b2d0      	uxtb	r0, r2
 800075c:	e7b2      	b.n	80006c4 <__aeabi_fmul+0x8c>
 800075e:	4643      	mov	r3, r8
 8000760:	2b00      	cmp	r3, #0
 8000762:	d13d      	bne.n	80007e0 <__aeabi_fmul+0x1a8>
 8000764:	464a      	mov	r2, r9
 8000766:	3301      	adds	r3, #1
 8000768:	431a      	orrs	r2, r3
 800076a:	4691      	mov	r9, r2
 800076c:	469c      	mov	ip, r3
 800076e:	e792      	b.n	8000696 <__aeabi_fmul+0x5e>
 8000770:	2c00      	cmp	r4, #0
 8000772:	d129      	bne.n	80007c8 <__aeabi_fmul+0x190>
 8000774:	2304      	movs	r3, #4
 8000776:	4699      	mov	r9, r3
 8000778:	3b03      	subs	r3, #3
 800077a:	2500      	movs	r5, #0
 800077c:	469a      	mov	sl, r3
 800077e:	e774      	b.n	800066a <__aeabi_fmul+0x32>
 8000780:	2c00      	cmp	r4, #0
 8000782:	d11b      	bne.n	80007bc <__aeabi_fmul+0x184>
 8000784:	2308      	movs	r3, #8
 8000786:	4699      	mov	r9, r3
 8000788:	3b06      	subs	r3, #6
 800078a:	25ff      	movs	r5, #255	; 0xff
 800078c:	469a      	mov	sl, r3
 800078e:	e76c      	b.n	800066a <__aeabi_fmul+0x32>
 8000790:	4643      	mov	r3, r8
 8000792:	35ff      	adds	r5, #255	; 0xff
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10b      	bne.n	80007b0 <__aeabi_fmul+0x178>
 8000798:	2302      	movs	r3, #2
 800079a:	464a      	mov	r2, r9
 800079c:	431a      	orrs	r2, r3
 800079e:	4691      	mov	r9, r2
 80007a0:	469c      	mov	ip, r3
 80007a2:	e778      	b.n	8000696 <__aeabi_fmul+0x5e>
 80007a4:	4653      	mov	r3, sl
 80007a6:	0031      	movs	r1, r6
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fmul+0x176>
 80007ac:	e783      	b.n	80006b6 <__aeabi_fmul+0x7e>
 80007ae:	e792      	b.n	80006d6 <__aeabi_fmul+0x9e>
 80007b0:	2303      	movs	r3, #3
 80007b2:	464a      	mov	r2, r9
 80007b4:	431a      	orrs	r2, r3
 80007b6:	4691      	mov	r9, r2
 80007b8:	469c      	mov	ip, r3
 80007ba:	e76c      	b.n	8000696 <__aeabi_fmul+0x5e>
 80007bc:	230c      	movs	r3, #12
 80007be:	4699      	mov	r9, r3
 80007c0:	3b09      	subs	r3, #9
 80007c2:	25ff      	movs	r5, #255	; 0xff
 80007c4:	469a      	mov	sl, r3
 80007c6:	e750      	b.n	800066a <__aeabi_fmul+0x32>
 80007c8:	0020      	movs	r0, r4
 80007ca:	f000 fa77 	bl	8000cbc <__clzsi2>
 80007ce:	2576      	movs	r5, #118	; 0x76
 80007d0:	1f43      	subs	r3, r0, #5
 80007d2:	409c      	lsls	r4, r3
 80007d4:	2300      	movs	r3, #0
 80007d6:	426d      	negs	r5, r5
 80007d8:	4699      	mov	r9, r3
 80007da:	469a      	mov	sl, r3
 80007dc:	1a2d      	subs	r5, r5, r0
 80007de:	e744      	b.n	800066a <__aeabi_fmul+0x32>
 80007e0:	4640      	mov	r0, r8
 80007e2:	f000 fa6b 	bl	8000cbc <__clzsi2>
 80007e6:	4642      	mov	r2, r8
 80007e8:	1f43      	subs	r3, r0, #5
 80007ea:	409a      	lsls	r2, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	1a2d      	subs	r5, r5, r0
 80007f0:	4690      	mov	r8, r2
 80007f2:	469c      	mov	ip, r3
 80007f4:	3d76      	subs	r5, #118	; 0x76
 80007f6:	e74e      	b.n	8000696 <__aeabi_fmul+0x5e>
 80007f8:	2480      	movs	r4, #128	; 0x80
 80007fa:	2100      	movs	r1, #0
 80007fc:	20ff      	movs	r0, #255	; 0xff
 80007fe:	03e4      	lsls	r4, r4, #15
 8000800:	e760      	b.n	80006c4 <__aeabi_fmul+0x8c>
 8000802:	2301      	movs	r3, #1
 8000804:	1a9b      	subs	r3, r3, r2
 8000806:	2b1b      	cmp	r3, #27
 8000808:	dd00      	ble.n	800080c <__aeabi_fmul+0x1d4>
 800080a:	e759      	b.n	80006c0 <__aeabi_fmul+0x88>
 800080c:	0022      	movs	r2, r4
 800080e:	309e      	adds	r0, #158	; 0x9e
 8000810:	40da      	lsrs	r2, r3
 8000812:	4084      	lsls	r4, r0
 8000814:	0013      	movs	r3, r2
 8000816:	1e62      	subs	r2, r4, #1
 8000818:	4194      	sbcs	r4, r2
 800081a:	431c      	orrs	r4, r3
 800081c:	0763      	lsls	r3, r4, #29
 800081e:	d004      	beq.n	800082a <__aeabi_fmul+0x1f2>
 8000820:	230f      	movs	r3, #15
 8000822:	4023      	ands	r3, r4
 8000824:	2b04      	cmp	r3, #4
 8000826:	d000      	beq.n	800082a <__aeabi_fmul+0x1f2>
 8000828:	3404      	adds	r4, #4
 800082a:	0163      	lsls	r3, r4, #5
 800082c:	d51a      	bpl.n	8000864 <__aeabi_fmul+0x22c>
 800082e:	2001      	movs	r0, #1
 8000830:	2400      	movs	r4, #0
 8000832:	e747      	b.n	80006c4 <__aeabi_fmul+0x8c>
 8000834:	2080      	movs	r0, #128	; 0x80
 8000836:	03c0      	lsls	r0, r0, #15
 8000838:	4204      	tst	r4, r0
 800083a:	d009      	beq.n	8000850 <__aeabi_fmul+0x218>
 800083c:	4643      	mov	r3, r8
 800083e:	4203      	tst	r3, r0
 8000840:	d106      	bne.n	8000850 <__aeabi_fmul+0x218>
 8000842:	4644      	mov	r4, r8
 8000844:	4304      	orrs	r4, r0
 8000846:	0264      	lsls	r4, r4, #9
 8000848:	0039      	movs	r1, r7
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	0a64      	lsrs	r4, r4, #9
 800084e:	e739      	b.n	80006c4 <__aeabi_fmul+0x8c>
 8000850:	2080      	movs	r0, #128	; 0x80
 8000852:	03c0      	lsls	r0, r0, #15
 8000854:	4304      	orrs	r4, r0
 8000856:	0264      	lsls	r4, r4, #9
 8000858:	0031      	movs	r1, r6
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	0a64      	lsrs	r4, r4, #9
 800085e:	e731      	b.n	80006c4 <__aeabi_fmul+0x8c>
 8000860:	0028      	movs	r0, r5
 8000862:	e765      	b.n	8000730 <__aeabi_fmul+0xf8>
 8000864:	01a4      	lsls	r4, r4, #6
 8000866:	2000      	movs	r0, #0
 8000868:	0a64      	lsrs	r4, r4, #9
 800086a:	e72b      	b.n	80006c4 <__aeabi_fmul+0x8c>
 800086c:	2080      	movs	r0, #128	; 0x80
 800086e:	03c0      	lsls	r0, r0, #15
 8000870:	4304      	orrs	r4, r0
 8000872:	0264      	lsls	r4, r4, #9
 8000874:	20ff      	movs	r0, #255	; 0xff
 8000876:	0a64      	lsrs	r4, r4, #9
 8000878:	e724      	b.n	80006c4 <__aeabi_fmul+0x8c>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	080023a0 	.word	0x080023a0
 8000880:	f7ffffff 	.word	0xf7ffffff

08000884 <__aeabi_fsub>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	46ce      	mov	lr, r9
 8000888:	4647      	mov	r7, r8
 800088a:	0243      	lsls	r3, r0, #9
 800088c:	0a5b      	lsrs	r3, r3, #9
 800088e:	024e      	lsls	r6, r1, #9
 8000890:	00da      	lsls	r2, r3, #3
 8000892:	4694      	mov	ip, r2
 8000894:	0a72      	lsrs	r2, r6, #9
 8000896:	4691      	mov	r9, r2
 8000898:	0045      	lsls	r5, r0, #1
 800089a:	004a      	lsls	r2, r1, #1
 800089c:	b580      	push	{r7, lr}
 800089e:	0e2d      	lsrs	r5, r5, #24
 80008a0:	001f      	movs	r7, r3
 80008a2:	0fc4      	lsrs	r4, r0, #31
 80008a4:	0e12      	lsrs	r2, r2, #24
 80008a6:	0fc9      	lsrs	r1, r1, #31
 80008a8:	09b6      	lsrs	r6, r6, #6
 80008aa:	2aff      	cmp	r2, #255	; 0xff
 80008ac:	d05b      	beq.n	8000966 <__aeabi_fsub+0xe2>
 80008ae:	2001      	movs	r0, #1
 80008b0:	4041      	eors	r1, r0
 80008b2:	428c      	cmp	r4, r1
 80008b4:	d039      	beq.n	800092a <__aeabi_fsub+0xa6>
 80008b6:	1aa8      	subs	r0, r5, r2
 80008b8:	2800      	cmp	r0, #0
 80008ba:	dd5a      	ble.n	8000972 <__aeabi_fsub+0xee>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d06a      	beq.n	8000996 <__aeabi_fsub+0x112>
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fsub+0x42>
 80008c4:	e0d9      	b.n	8000a7a <__aeabi_fsub+0x1f6>
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	04d2      	lsls	r2, r2, #19
 80008ca:	4316      	orrs	r6, r2
 80008cc:	281b      	cmp	r0, #27
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x4e>
 80008d0:	e0e9      	b.n	8000aa6 <__aeabi_fsub+0x222>
 80008d2:	2001      	movs	r0, #1
 80008d4:	4663      	mov	r3, ip
 80008d6:	1a18      	subs	r0, r3, r0
 80008d8:	0143      	lsls	r3, r0, #5
 80008da:	d400      	bmi.n	80008de <__aeabi_fsub+0x5a>
 80008dc:	e0b4      	b.n	8000a48 <__aeabi_fsub+0x1c4>
 80008de:	0180      	lsls	r0, r0, #6
 80008e0:	0987      	lsrs	r7, r0, #6
 80008e2:	0038      	movs	r0, r7
 80008e4:	f000 f9ea 	bl	8000cbc <__clzsi2>
 80008e8:	3805      	subs	r0, #5
 80008ea:	4087      	lsls	r7, r0
 80008ec:	4285      	cmp	r5, r0
 80008ee:	dc00      	bgt.n	80008f2 <__aeabi_fsub+0x6e>
 80008f0:	e0cc      	b.n	8000a8c <__aeabi_fsub+0x208>
 80008f2:	1a2d      	subs	r5, r5, r0
 80008f4:	48b5      	ldr	r0, [pc, #724]	; (8000bcc <__aeabi_fsub+0x348>)
 80008f6:	4038      	ands	r0, r7
 80008f8:	0743      	lsls	r3, r0, #29
 80008fa:	d004      	beq.n	8000906 <__aeabi_fsub+0x82>
 80008fc:	230f      	movs	r3, #15
 80008fe:	4003      	ands	r3, r0
 8000900:	2b04      	cmp	r3, #4
 8000902:	d000      	beq.n	8000906 <__aeabi_fsub+0x82>
 8000904:	3004      	adds	r0, #4
 8000906:	0143      	lsls	r3, r0, #5
 8000908:	d400      	bmi.n	800090c <__aeabi_fsub+0x88>
 800090a:	e0a0      	b.n	8000a4e <__aeabi_fsub+0x1ca>
 800090c:	1c6a      	adds	r2, r5, #1
 800090e:	2dfe      	cmp	r5, #254	; 0xfe
 8000910:	d100      	bne.n	8000914 <__aeabi_fsub+0x90>
 8000912:	e08d      	b.n	8000a30 <__aeabi_fsub+0x1ac>
 8000914:	0180      	lsls	r0, r0, #6
 8000916:	0a47      	lsrs	r7, r0, #9
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	05d0      	lsls	r0, r2, #23
 800091c:	4338      	orrs	r0, r7
 800091e:	07e4      	lsls	r4, r4, #31
 8000920:	4320      	orrs	r0, r4
 8000922:	bcc0      	pop	{r6, r7}
 8000924:	46b9      	mov	r9, r7
 8000926:	46b0      	mov	r8, r6
 8000928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800092a:	1aa8      	subs	r0, r5, r2
 800092c:	4680      	mov	r8, r0
 800092e:	2800      	cmp	r0, #0
 8000930:	dd45      	ble.n	80009be <__aeabi_fsub+0x13a>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d070      	beq.n	8000a18 <__aeabi_fsub+0x194>
 8000936:	2dff      	cmp	r5, #255	; 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fsub+0xb8>
 800093a:	e09e      	b.n	8000a7a <__aeabi_fsub+0x1f6>
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	04db      	lsls	r3, r3, #19
 8000940:	431e      	orrs	r6, r3
 8000942:	4643      	mov	r3, r8
 8000944:	2b1b      	cmp	r3, #27
 8000946:	dc00      	bgt.n	800094a <__aeabi_fsub+0xc6>
 8000948:	e0d2      	b.n	8000af0 <__aeabi_fsub+0x26c>
 800094a:	2001      	movs	r0, #1
 800094c:	4460      	add	r0, ip
 800094e:	0143      	lsls	r3, r0, #5
 8000950:	d57a      	bpl.n	8000a48 <__aeabi_fsub+0x1c4>
 8000952:	3501      	adds	r5, #1
 8000954:	2dff      	cmp	r5, #255	; 0xff
 8000956:	d06b      	beq.n	8000a30 <__aeabi_fsub+0x1ac>
 8000958:	2301      	movs	r3, #1
 800095a:	4a9d      	ldr	r2, [pc, #628]	; (8000bd0 <__aeabi_fsub+0x34c>)
 800095c:	4003      	ands	r3, r0
 800095e:	0840      	lsrs	r0, r0, #1
 8000960:	4010      	ands	r0, r2
 8000962:	4318      	orrs	r0, r3
 8000964:	e7c8      	b.n	80008f8 <__aeabi_fsub+0x74>
 8000966:	2e00      	cmp	r6, #0
 8000968:	d020      	beq.n	80009ac <__aeabi_fsub+0x128>
 800096a:	428c      	cmp	r4, r1
 800096c:	d023      	beq.n	80009b6 <__aeabi_fsub+0x132>
 800096e:	0028      	movs	r0, r5
 8000970:	38ff      	subs	r0, #255	; 0xff
 8000972:	2800      	cmp	r0, #0
 8000974:	d039      	beq.n	80009ea <__aeabi_fsub+0x166>
 8000976:	1b57      	subs	r7, r2, r5
 8000978:	2d00      	cmp	r5, #0
 800097a:	d000      	beq.n	800097e <__aeabi_fsub+0xfa>
 800097c:	e09d      	b.n	8000aba <__aeabi_fsub+0x236>
 800097e:	4663      	mov	r3, ip
 8000980:	2b00      	cmp	r3, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_fsub+0x102>
 8000984:	e0db      	b.n	8000b3e <__aeabi_fsub+0x2ba>
 8000986:	1e7b      	subs	r3, r7, #1
 8000988:	2f01      	cmp	r7, #1
 800098a:	d100      	bne.n	800098e <__aeabi_fsub+0x10a>
 800098c:	e10d      	b.n	8000baa <__aeabi_fsub+0x326>
 800098e:	2fff      	cmp	r7, #255	; 0xff
 8000990:	d071      	beq.n	8000a76 <__aeabi_fsub+0x1f2>
 8000992:	001f      	movs	r7, r3
 8000994:	e098      	b.n	8000ac8 <__aeabi_fsub+0x244>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x118>
 800099a:	e0a7      	b.n	8000aec <__aeabi_fsub+0x268>
 800099c:	1e42      	subs	r2, r0, #1
 800099e:	2801      	cmp	r0, #1
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fsub+0x120>
 80009a2:	e0e6      	b.n	8000b72 <__aeabi_fsub+0x2ee>
 80009a4:	28ff      	cmp	r0, #255	; 0xff
 80009a6:	d068      	beq.n	8000a7a <__aeabi_fsub+0x1f6>
 80009a8:	0010      	movs	r0, r2
 80009aa:	e78f      	b.n	80008cc <__aeabi_fsub+0x48>
 80009ac:	2001      	movs	r0, #1
 80009ae:	4041      	eors	r1, r0
 80009b0:	42a1      	cmp	r1, r4
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fsub+0x132>
 80009b4:	e77f      	b.n	80008b6 <__aeabi_fsub+0x32>
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	4240      	negs	r0, r0
 80009ba:	4680      	mov	r8, r0
 80009bc:	44a8      	add	r8, r5
 80009be:	4640      	mov	r0, r8
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d038      	beq.n	8000a36 <__aeabi_fsub+0x1b2>
 80009c4:	1b51      	subs	r1, r2, r5
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0x148>
 80009ca:	e0ae      	b.n	8000b2a <__aeabi_fsub+0x2a6>
 80009cc:	2aff      	cmp	r2, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x14e>
 80009d0:	e0df      	b.n	8000b92 <__aeabi_fsub+0x30e>
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	4660      	mov	r0, ip
 80009d6:	04db      	lsls	r3, r3, #19
 80009d8:	4318      	orrs	r0, r3
 80009da:	4684      	mov	ip, r0
 80009dc:	291b      	cmp	r1, #27
 80009de:	dc00      	bgt.n	80009e2 <__aeabi_fsub+0x15e>
 80009e0:	e0d9      	b.n	8000b96 <__aeabi_fsub+0x312>
 80009e2:	2001      	movs	r0, #1
 80009e4:	0015      	movs	r5, r2
 80009e6:	1980      	adds	r0, r0, r6
 80009e8:	e7b1      	b.n	800094e <__aeabi_fsub+0xca>
 80009ea:	20fe      	movs	r0, #254	; 0xfe
 80009ec:	1c6a      	adds	r2, r5, #1
 80009ee:	4210      	tst	r0, r2
 80009f0:	d171      	bne.n	8000ad6 <__aeabi_fsub+0x252>
 80009f2:	2d00      	cmp	r5, #0
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fsub+0x174>
 80009f6:	e0a6      	b.n	8000b46 <__aeabi_fsub+0x2c2>
 80009f8:	4663      	mov	r3, ip
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fsub+0x17c>
 80009fe:	e0d9      	b.n	8000bb4 <__aeabi_fsub+0x330>
 8000a00:	2200      	movs	r2, #0
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fsub+0x184>
 8000a06:	e788      	b.n	800091a <__aeabi_fsub+0x96>
 8000a08:	1b98      	subs	r0, r3, r6
 8000a0a:	0143      	lsls	r3, r0, #5
 8000a0c:	d400      	bmi.n	8000a10 <__aeabi_fsub+0x18c>
 8000a0e:	e0e1      	b.n	8000bd4 <__aeabi_fsub+0x350>
 8000a10:	4663      	mov	r3, ip
 8000a12:	000c      	movs	r4, r1
 8000a14:	1af0      	subs	r0, r6, r3
 8000a16:	e76f      	b.n	80008f8 <__aeabi_fsub+0x74>
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x19a>
 8000a1c:	e0b7      	b.n	8000b8e <__aeabi_fsub+0x30a>
 8000a1e:	0002      	movs	r2, r0
 8000a20:	3a01      	subs	r2, #1
 8000a22:	2801      	cmp	r0, #1
 8000a24:	d100      	bne.n	8000a28 <__aeabi_fsub+0x1a4>
 8000a26:	e09c      	b.n	8000b62 <__aeabi_fsub+0x2de>
 8000a28:	28ff      	cmp	r0, #255	; 0xff
 8000a2a:	d026      	beq.n	8000a7a <__aeabi_fsub+0x1f6>
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	e788      	b.n	8000942 <__aeabi_fsub+0xbe>
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	2700      	movs	r7, #0
 8000a34:	e771      	b.n	800091a <__aeabi_fsub+0x96>
 8000a36:	20fe      	movs	r0, #254	; 0xfe
 8000a38:	1c6a      	adds	r2, r5, #1
 8000a3a:	4210      	tst	r0, r2
 8000a3c:	d064      	beq.n	8000b08 <__aeabi_fsub+0x284>
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d0f6      	beq.n	8000a30 <__aeabi_fsub+0x1ac>
 8000a42:	0015      	movs	r5, r2
 8000a44:	4466      	add	r6, ip
 8000a46:	0870      	lsrs	r0, r6, #1
 8000a48:	0743      	lsls	r3, r0, #29
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fsub+0x1ca>
 8000a4c:	e756      	b.n	80008fc <__aeabi_fsub+0x78>
 8000a4e:	08c3      	lsrs	r3, r0, #3
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d012      	beq.n	8000a7a <__aeabi_fsub+0x1f6>
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5f      	lsrs	r7, r3, #9
 8000a58:	b2ea      	uxtb	r2, r5
 8000a5a:	e75e      	b.n	800091a <__aeabi_fsub+0x96>
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fsub+0x1e0>
 8000a62:	e096      	b.n	8000b92 <__aeabi_fsub+0x30e>
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d008      	beq.n	8000a7a <__aeabi_fsub+0x1f6>
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	03d2      	lsls	r2, r2, #15
 8000a6c:	4213      	tst	r3, r2
 8000a6e:	d004      	beq.n	8000a7a <__aeabi_fsub+0x1f6>
 8000a70:	4648      	mov	r0, r9
 8000a72:	4210      	tst	r0, r2
 8000a74:	d101      	bne.n	8000a7a <__aeabi_fsub+0x1f6>
 8000a76:	000c      	movs	r4, r1
 8000a78:	464b      	mov	r3, r9
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0d8      	beq.n	8000a30 <__aeabi_fsub+0x1ac>
 8000a7e:	2780      	movs	r7, #128	; 0x80
 8000a80:	03ff      	lsls	r7, r7, #15
 8000a82:	431f      	orrs	r7, r3
 8000a84:	027f      	lsls	r7, r7, #9
 8000a86:	22ff      	movs	r2, #255	; 0xff
 8000a88:	0a7f      	lsrs	r7, r7, #9
 8000a8a:	e746      	b.n	800091a <__aeabi_fsub+0x96>
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	003a      	movs	r2, r7
 8000a90:	1b45      	subs	r5, r0, r5
 8000a92:	0038      	movs	r0, r7
 8000a94:	3501      	adds	r5, #1
 8000a96:	40ea      	lsrs	r2, r5
 8000a98:	1b5d      	subs	r5, r3, r5
 8000a9a:	40a8      	lsls	r0, r5
 8000a9c:	1e43      	subs	r3, r0, #1
 8000a9e:	4198      	sbcs	r0, r3
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	4310      	orrs	r0, r2
 8000aa4:	e728      	b.n	80008f8 <__aeabi_fsub+0x74>
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	1a1b      	subs	r3, r3, r0
 8000aaa:	0032      	movs	r2, r6
 8000aac:	409e      	lsls	r6, r3
 8000aae:	40c2      	lsrs	r2, r0
 8000ab0:	0030      	movs	r0, r6
 8000ab2:	1e43      	subs	r3, r0, #1
 8000ab4:	4198      	sbcs	r0, r3
 8000ab6:	4310      	orrs	r0, r2
 8000ab8:	e70c      	b.n	80008d4 <__aeabi_fsub+0x50>
 8000aba:	2aff      	cmp	r2, #255	; 0xff
 8000abc:	d0db      	beq.n	8000a76 <__aeabi_fsub+0x1f2>
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	4660      	mov	r0, ip
 8000ac2:	04db      	lsls	r3, r3, #19
 8000ac4:	4318      	orrs	r0, r3
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	2f1b      	cmp	r7, #27
 8000aca:	dd56      	ble.n	8000b7a <__aeabi_fsub+0x2f6>
 8000acc:	2001      	movs	r0, #1
 8000ace:	000c      	movs	r4, r1
 8000ad0:	0015      	movs	r5, r2
 8000ad2:	1a30      	subs	r0, r6, r0
 8000ad4:	e700      	b.n	80008d8 <__aeabi_fsub+0x54>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017b      	lsls	r3, r7, #5
 8000adc:	d43d      	bmi.n	8000b5a <__aeabi_fsub+0x2d6>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d000      	beq.n	8000ae4 <__aeabi_fsub+0x260>
 8000ae2:	e6fe      	b.n	80008e2 <__aeabi_fsub+0x5e>
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2700      	movs	r7, #0
 8000aea:	e716      	b.n	800091a <__aeabi_fsub+0x96>
 8000aec:	0005      	movs	r5, r0
 8000aee:	e7af      	b.n	8000a50 <__aeabi_fsub+0x1cc>
 8000af0:	0032      	movs	r2, r6
 8000af2:	4643      	mov	r3, r8
 8000af4:	4641      	mov	r1, r8
 8000af6:	40da      	lsrs	r2, r3
 8000af8:	2320      	movs	r3, #32
 8000afa:	1a5b      	subs	r3, r3, r1
 8000afc:	409e      	lsls	r6, r3
 8000afe:	0030      	movs	r0, r6
 8000b00:	1e43      	subs	r3, r0, #1
 8000b02:	4198      	sbcs	r0, r3
 8000b04:	4310      	orrs	r0, r2
 8000b06:	e721      	b.n	800094c <__aeabi_fsub+0xc8>
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1a7      	bne.n	8000a5c <__aeabi_fsub+0x1d8>
 8000b0c:	4663      	mov	r3, ip
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d059      	beq.n	8000bc6 <__aeabi_fsub+0x342>
 8000b12:	2200      	movs	r2, #0
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fsub+0x296>
 8000b18:	e6ff      	b.n	800091a <__aeabi_fsub+0x96>
 8000b1a:	0030      	movs	r0, r6
 8000b1c:	4460      	add	r0, ip
 8000b1e:	0143      	lsls	r3, r0, #5
 8000b20:	d592      	bpl.n	8000a48 <__aeabi_fsub+0x1c4>
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <__aeabi_fsub+0x348>)
 8000b24:	3501      	adds	r5, #1
 8000b26:	4018      	ands	r0, r3
 8000b28:	e78e      	b.n	8000a48 <__aeabi_fsub+0x1c4>
 8000b2a:	4663      	mov	r3, ip
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d047      	beq.n	8000bc0 <__aeabi_fsub+0x33c>
 8000b30:	1e4b      	subs	r3, r1, #1
 8000b32:	2901      	cmp	r1, #1
 8000b34:	d015      	beq.n	8000b62 <__aeabi_fsub+0x2de>
 8000b36:	29ff      	cmp	r1, #255	; 0xff
 8000b38:	d02b      	beq.n	8000b92 <__aeabi_fsub+0x30e>
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	e74e      	b.n	80009dc <__aeabi_fsub+0x158>
 8000b3e:	000c      	movs	r4, r1
 8000b40:	464b      	mov	r3, r9
 8000b42:	003d      	movs	r5, r7
 8000b44:	e784      	b.n	8000a50 <__aeabi_fsub+0x1cc>
 8000b46:	4662      	mov	r2, ip
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d18b      	bne.n	8000a64 <__aeabi_fsub+0x1e0>
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d192      	bne.n	8000a76 <__aeabi_fsub+0x1f2>
 8000b50:	2780      	movs	r7, #128	; 0x80
 8000b52:	2400      	movs	r4, #0
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	03ff      	lsls	r7, r7, #15
 8000b58:	e6df      	b.n	800091a <__aeabi_fsub+0x96>
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	000c      	movs	r4, r1
 8000b5e:	1af7      	subs	r7, r6, r3
 8000b60:	e6bf      	b.n	80008e2 <__aeabi_fsub+0x5e>
 8000b62:	0030      	movs	r0, r6
 8000b64:	4460      	add	r0, ip
 8000b66:	2501      	movs	r5, #1
 8000b68:	0143      	lsls	r3, r0, #5
 8000b6a:	d400      	bmi.n	8000b6e <__aeabi_fsub+0x2ea>
 8000b6c:	e76c      	b.n	8000a48 <__aeabi_fsub+0x1c4>
 8000b6e:	2502      	movs	r5, #2
 8000b70:	e6f2      	b.n	8000958 <__aeabi_fsub+0xd4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	2501      	movs	r5, #1
 8000b76:	1b98      	subs	r0, r3, r6
 8000b78:	e6ae      	b.n	80008d8 <__aeabi_fsub+0x54>
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	4664      	mov	r4, ip
 8000b7e:	4660      	mov	r0, ip
 8000b80:	40fc      	lsrs	r4, r7
 8000b82:	1bdf      	subs	r7, r3, r7
 8000b84:	40b8      	lsls	r0, r7
 8000b86:	1e43      	subs	r3, r0, #1
 8000b88:	4198      	sbcs	r0, r3
 8000b8a:	4320      	orrs	r0, r4
 8000b8c:	e79f      	b.n	8000ace <__aeabi_fsub+0x24a>
 8000b8e:	0005      	movs	r5, r0
 8000b90:	e75e      	b.n	8000a50 <__aeabi_fsub+0x1cc>
 8000b92:	464b      	mov	r3, r9
 8000b94:	e771      	b.n	8000a7a <__aeabi_fsub+0x1f6>
 8000b96:	2320      	movs	r3, #32
 8000b98:	4665      	mov	r5, ip
 8000b9a:	4660      	mov	r0, ip
 8000b9c:	40cd      	lsrs	r5, r1
 8000b9e:	1a59      	subs	r1, r3, r1
 8000ba0:	4088      	lsls	r0, r1
 8000ba2:	1e43      	subs	r3, r0, #1
 8000ba4:	4198      	sbcs	r0, r3
 8000ba6:	4328      	orrs	r0, r5
 8000ba8:	e71c      	b.n	80009e4 <__aeabi_fsub+0x160>
 8000baa:	4663      	mov	r3, ip
 8000bac:	000c      	movs	r4, r1
 8000bae:	2501      	movs	r5, #1
 8000bb0:	1af0      	subs	r0, r6, r3
 8000bb2:	e691      	b.n	80008d8 <__aeabi_fsub+0x54>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d095      	beq.n	8000ae4 <__aeabi_fsub+0x260>
 8000bb8:	000c      	movs	r4, r1
 8000bba:	464f      	mov	r7, r9
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e6ac      	b.n	800091a <__aeabi_fsub+0x96>
 8000bc0:	464b      	mov	r3, r9
 8000bc2:	000d      	movs	r5, r1
 8000bc4:	e744      	b.n	8000a50 <__aeabi_fsub+0x1cc>
 8000bc6:	464f      	mov	r7, r9
 8000bc8:	2200      	movs	r2, #0
 8000bca:	e6a6      	b.n	800091a <__aeabi_fsub+0x96>
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_fsub+0x356>
 8000bd8:	e736      	b.n	8000a48 <__aeabi_fsub+0x1c4>
 8000bda:	2400      	movs	r4, #0
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e69c      	b.n	800091a <__aeabi_fsub+0x96>

08000be0 <__aeabi_f2iz>:
 8000be0:	0241      	lsls	r1, r0, #9
 8000be2:	0042      	lsls	r2, r0, #1
 8000be4:	0fc3      	lsrs	r3, r0, #31
 8000be6:	0a49      	lsrs	r1, r1, #9
 8000be8:	2000      	movs	r0, #0
 8000bea:	0e12      	lsrs	r2, r2, #24
 8000bec:	2a7e      	cmp	r2, #126	; 0x7e
 8000bee:	dd03      	ble.n	8000bf8 <__aeabi_f2iz+0x18>
 8000bf0:	2a9d      	cmp	r2, #157	; 0x9d
 8000bf2:	dd02      	ble.n	8000bfa <__aeabi_f2iz+0x1a>
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <__aeabi_f2iz+0x3c>)
 8000bf6:	1898      	adds	r0, r3, r2
 8000bf8:	4770      	bx	lr
 8000bfa:	2080      	movs	r0, #128	; 0x80
 8000bfc:	0400      	lsls	r0, r0, #16
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	2a95      	cmp	r2, #149	; 0x95
 8000c02:	dc07      	bgt.n	8000c14 <__aeabi_f2iz+0x34>
 8000c04:	2096      	movs	r0, #150	; 0x96
 8000c06:	1a82      	subs	r2, r0, r2
 8000c08:	40d1      	lsrs	r1, r2
 8000c0a:	4248      	negs	r0, r1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f3      	bne.n	8000bf8 <__aeabi_f2iz+0x18>
 8000c10:	0008      	movs	r0, r1
 8000c12:	e7f1      	b.n	8000bf8 <__aeabi_f2iz+0x18>
 8000c14:	3a96      	subs	r2, #150	; 0x96
 8000c16:	4091      	lsls	r1, r2
 8000c18:	e7f7      	b.n	8000c0a <__aeabi_f2iz+0x2a>
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	7fffffff 	.word	0x7fffffff

08000c20 <__aeabi_i2f>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d013      	beq.n	8000c4e <__aeabi_i2f+0x2e>
 8000c26:	17c3      	asrs	r3, r0, #31
 8000c28:	18c6      	adds	r6, r0, r3
 8000c2a:	405e      	eors	r6, r3
 8000c2c:	0fc4      	lsrs	r4, r0, #31
 8000c2e:	0030      	movs	r0, r6
 8000c30:	f000 f844 	bl	8000cbc <__clzsi2>
 8000c34:	239e      	movs	r3, #158	; 0x9e
 8000c36:	0005      	movs	r5, r0
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	2b96      	cmp	r3, #150	; 0x96
 8000c3c:	dc0f      	bgt.n	8000c5e <__aeabi_i2f+0x3e>
 8000c3e:	2808      	cmp	r0, #8
 8000c40:	dd01      	ble.n	8000c46 <__aeabi_i2f+0x26>
 8000c42:	3d08      	subs	r5, #8
 8000c44:	40ae      	lsls	r6, r5
 8000c46:	0276      	lsls	r6, r6, #9
 8000c48:	0a76      	lsrs	r6, r6, #9
 8000c4a:	b2d8      	uxtb	r0, r3
 8000c4c:	e002      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000c4e:	2400      	movs	r4, #0
 8000c50:	2000      	movs	r0, #0
 8000c52:	2600      	movs	r6, #0
 8000c54:	05c0      	lsls	r0, r0, #23
 8000c56:	4330      	orrs	r0, r6
 8000c58:	07e4      	lsls	r4, r4, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5e:	2b99      	cmp	r3, #153	; 0x99
 8000c60:	dd0c      	ble.n	8000c7c <__aeabi_i2f+0x5c>
 8000c62:	2205      	movs	r2, #5
 8000c64:	0031      	movs	r1, r6
 8000c66:	1a12      	subs	r2, r2, r0
 8000c68:	40d1      	lsrs	r1, r2
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	0001      	movs	r1, r0
 8000c6e:	0030      	movs	r0, r6
 8000c70:	311b      	adds	r1, #27
 8000c72:	4088      	lsls	r0, r1
 8000c74:	1e41      	subs	r1, r0, #1
 8000c76:	4188      	sbcs	r0, r1
 8000c78:	4302      	orrs	r2, r0
 8000c7a:	0016      	movs	r6, r2
 8000c7c:	2d05      	cmp	r5, #5
 8000c7e:	dc12      	bgt.n	8000ca6 <__aeabi_i2f+0x86>
 8000c80:	0031      	movs	r1, r6
 8000c82:	4f0d      	ldr	r7, [pc, #52]	; (8000cb8 <__aeabi_i2f+0x98>)
 8000c84:	4039      	ands	r1, r7
 8000c86:	0772      	lsls	r2, r6, #29
 8000c88:	d009      	beq.n	8000c9e <__aeabi_i2f+0x7e>
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	4030      	ands	r0, r6
 8000c8e:	2804      	cmp	r0, #4
 8000c90:	d005      	beq.n	8000c9e <__aeabi_i2f+0x7e>
 8000c92:	3104      	adds	r1, #4
 8000c94:	014a      	lsls	r2, r1, #5
 8000c96:	d502      	bpl.n	8000c9e <__aeabi_i2f+0x7e>
 8000c98:	239f      	movs	r3, #159	; 0x9f
 8000c9a:	4039      	ands	r1, r7
 8000c9c:	1b5b      	subs	r3, r3, r5
 8000c9e:	0189      	lsls	r1, r1, #6
 8000ca0:	0a4e      	lsrs	r6, r1, #9
 8000ca2:	b2d8      	uxtb	r0, r3
 8000ca4:	e7d6      	b.n	8000c54 <__aeabi_i2f+0x34>
 8000ca6:	1f6a      	subs	r2, r5, #5
 8000ca8:	4096      	lsls	r6, r2
 8000caa:	0031      	movs	r1, r6
 8000cac:	4f02      	ldr	r7, [pc, #8]	; (8000cb8 <__aeabi_i2f+0x98>)
 8000cae:	4039      	ands	r1, r7
 8000cb0:	0772      	lsls	r2, r6, #29
 8000cb2:	d0f4      	beq.n	8000c9e <__aeabi_i2f+0x7e>
 8000cb4:	e7e9      	b.n	8000c8a <__aeabi_i2f+0x6a>
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	fbffffff 	.word	0xfbffffff

08000cbc <__clzsi2>:
 8000cbc:	211c      	movs	r1, #28
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	041b      	lsls	r3, r3, #16
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d301      	bcc.n	8000cca <__clzsi2+0xe>
 8000cc6:	0c00      	lsrs	r0, r0, #16
 8000cc8:	3910      	subs	r1, #16
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d301      	bcc.n	8000cd4 <__clzsi2+0x18>
 8000cd0:	0a00      	lsrs	r0, r0, #8
 8000cd2:	3908      	subs	r1, #8
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d301      	bcc.n	8000cde <__clzsi2+0x22>
 8000cda:	0900      	lsrs	r0, r0, #4
 8000cdc:	3904      	subs	r1, #4
 8000cde:	a202      	add	r2, pc, #8	; (adr r2, 8000ce8 <__clzsi2+0x2c>)
 8000ce0:	5c10      	ldrb	r0, [r2, r0]
 8000ce2:	1840      	adds	r0, r0, r1
 8000ce4:	4770      	bx	lr
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	02020304 	.word	0x02020304
 8000cec:	01010101 	.word	0x01010101
	...

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <SystemCoreClockUpdate+0xdc>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	220c      	movs	r2, #12
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d011      	beq.n	8000d4e <SystemCoreClockUpdate+0x4a>
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d841      	bhi.n	8000db4 <SystemCoreClockUpdate+0xb0>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <SystemCoreClockUpdate+0x3a>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d004      	beq.n	8000d46 <SystemCoreClockUpdate+0x42>
 8000d3c:	e03a      	b.n	8000db4 <SystemCoreClockUpdate+0xb0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <SystemCoreClockUpdate+0xe4>)
 8000d42:	601a      	str	r2, [r3, #0]
      break;
 8000d44:	e03a      	b.n	8000dbc <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000d48:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <SystemCoreClockUpdate+0xe4>)
 8000d4a:	601a      	str	r2, [r3, #0]
      break;
 8000d4c:	e036      	b.n	8000dbc <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <SystemCoreClockUpdate+0xdc>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	23f0      	movs	r3, #240	; 0xf0
 8000d54:	039b      	lsls	r3, r3, #14
 8000d56:	4013      	ands	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <SystemCoreClockUpdate+0xdc>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	025b      	lsls	r3, r3, #9
 8000d62:	4013      	ands	r3, r2
 8000d64:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <SystemCoreClockUpdate+0xdc>)
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	220f      	movs	r2, #15
 8000d74:	4013      	ands	r3, r2
 8000d76:	3301      	adds	r3, #1
 8000d78:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	025b      	lsls	r3, r3, #9
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d10a      	bne.n	8000d9a <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000d84:	6839      	ldr	r1, [r7, #0]
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <SystemCoreClockUpdate+0xe4>)
 8000d88:	f7ff f9c8 	bl	800011c <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	001a      	movs	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	435a      	muls	r2, r3
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000d96:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8000d98:	e010      	b.n	8000dbc <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	000a      	movs	r2, r1
 8000d9e:	0152      	lsls	r2, r2, #5
 8000da0:	1a52      	subs	r2, r2, r1
 8000da2:	0193      	lsls	r3, r2, #6
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	185b      	adds	r3, r3, r1
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	001a      	movs	r2, r3
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000db0:	601a      	str	r2, [r3, #0]
      break;
 8000db2:	e003      	b.n	8000dbc <SystemCoreClockUpdate+0xb8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <SystemCoreClockUpdate+0xe4>)
 8000db8:	601a      	str	r2, [r3, #0]
      break;
 8000dba:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SystemCoreClockUpdate+0xdc>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <SystemCoreClockUpdate+0xe8>)
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <SystemCoreClockUpdate+0xe0>)
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b004      	add	sp, #16
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	20000000 	.word	0x20000000
 8000de8:	007a1200 	.word	0x007a1200
 8000dec:	080023e0 	.word	0x080023e0

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d809      	bhi.n	8000e18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	231f      	movs	r3, #31
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_EnableIRQ+0x30>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	4091      	lsls	r1, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <hwInit>:
void dacInit(void);
void pwmInit(void);
void encoderInit(void);
void uartInit(void);

void hwInit(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	rccInit();
 8000e28:	f000 f816 	bl	8000e58 <rccInit>
	gpioInit();
 8000e2c:	f000 f866 	bl	8000efc <gpioInit>
	dacInit();
 8000e30:	f000 f8b0 	bl	8000f94 <dacInit>
	pwmInit();
 8000e34:	f000 f8e8 	bl	8001008 <pwmInit>
	encoderInit();
 8000e38:	f000 f8ec 	bl	8001014 <encoderInit>
	uartInit();
 8000e3c:	f000 f938 	bl	80010b0 <uartInit>

	RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <hwInit+0x30>)
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <hwInit+0x30>)
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	615a      	str	r2, [r3, #20]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40021000 	.word	0x40021000

08000e58 <rccInit>:

// RCC input = HSI, 8Mhz -> PLL -> 48Mhz
void rccInit(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	// HSI(8MHz) on
	RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <rccInit+0x9c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <rccInit+0x9c>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
	RCC->CR &= ~RCC_CR_PLLON;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <rccInit+0x9c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <rccInit+0x9c>)
 8000e6e:	4922      	ldr	r1, [pc, #136]	; (8000ef8 <rccInit+0xa0>)
 8000e70:	400a      	ands	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
	while(RCC->CR & RCC_CR_PLLRDY);
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <rccInit+0x9c>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	049b      	lsls	r3, r3, #18
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d1f9      	bne.n	8000e76 <rccInit+0x1e>
	// Set HSI as PLL src + PLLMul to x12
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2 + RCC_CFGR_PLLMUL12;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <rccInit+0x9c>)
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <rccInit+0x9c>)
 8000e88:	21a0      	movs	r1, #160	; 0xa0
 8000e8a:	0389      	lsls	r1, r1, #14
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	605a      	str	r2, [r3, #4]
	// PLL turn on
	RCC->CR |= RCC_CR_PLLON;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <rccInit+0x9c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <rccInit+0x9c>)
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	0449      	lsls	r1, r1, #17
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <rccInit+0x9c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	049b      	lsls	r3, r3, #18
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d0f9      	beq.n	8000ea0 <rccInit+0x48>
	// System clock mux
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <rccInit+0x9c>)
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <rccInit+0x9c>)
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]
	// AHB div to 1
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <rccInit+0x9c>)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <rccInit+0x9c>)
 8000ebc:	6852      	ldr	r2, [r2, #4]
 8000ebe:	605a      	str	r2, [r3, #4]
	// APB div to 1
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <rccInit+0x9c>)
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <rccInit+0x9c>)
 8000ec4:	6852      	ldr	r2, [r2, #4]
 8000ec6:	605a      	str	r2, [r3, #4]
	// check HSI as system clock flag ready
	while(((RCC->CFGR & RCC_CFGR_SWS_0) && (RCC->CFGR & RCC_CFGR_SWS_1)) != RCC_CFGR_SWS_HSI);
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <rccInit+0x9c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d006      	beq.n	8000ee2 <rccInit+0x8a>
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <rccInit+0x9c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2208      	movs	r2, #8
 8000eda:	4013      	ands	r3, r2
 8000edc:	d001      	beq.n	8000ee2 <rccInit+0x8a>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <rccInit+0x8c>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f0      	bne.n	8000eca <rccInit+0x72>
	// set system variable SystemCoreClock to current clock value
	SystemCoreClockUpdate();
 8000ee8:	f7ff ff0c 	bl	8000d04 <SystemCoreClockUpdate>
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	feffffff 	.word	0xfeffffff

08000efc <gpioInit>:

void gpioInit(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	// PA4 = DAC_OUT1
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <gpioInit+0x8c>)
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <gpioInit+0x8c>)
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	0289      	lsls	r1, r1, #10
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	615a      	str	r2, [r3, #20]
	// analog mode
	GPIOA->MODER |= GPIO_MODER_MODER4;
 8000f0e:	2390      	movs	r3, #144	; 0x90
 8000f10:	05db      	lsls	r3, r3, #23
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	2390      	movs	r3, #144	; 0x90
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	21c0      	movs	r1, #192	; 0xc0
 8000f1a:	0089      	lsls	r1, r1, #2
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
	// PA0 = USR BTN with pull up already
	// PC9 = built-in LED, push-pull output
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <gpioInit+0x8c>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <gpioInit+0x8c>)
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	0309      	lsls	r1, r1, #12
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	615a      	str	r2, [r3, #20]
	GPIOC->MODER |= GPIO_MODER_MODER9_0;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <gpioInit+0x90>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <gpioInit+0x90>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	02c9      	lsls	r1, r1, #11
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]

	// PA9 = USART1_TX
	// PA10 = USART1_RX
	GPIOA->AFR[1] |= (1 << GPIO_AFRH_AFSEL9_Pos) + (1 << GPIO_AFRH_AFSEL10_Pos);
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f42:	2390      	movs	r3, #144	; 0x90
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	2188      	movs	r1, #136	; 0x88
 8000f48:	0049      	lsls	r1, r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR9_0;
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	2390      	movs	r3, #144	; 0x90
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	02c9      	lsls	r1, r1, #11
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	60da      	str	r2, [r3, #12]
	GPIOA->MODER &= ~(GPIO_MODER_MODER9 + GPIO_MODER_MODER10);
 8000f60:	2390      	movs	r3, #144	; 0x90
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	2390      	movs	r3, #144	; 0x90
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	4909      	ldr	r1, [pc, #36]	; (8000f90 <gpioInit+0x94>)
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER9_1 + GPIO_MODER_MODER10_1);
 8000f70:	2390      	movs	r3, #144	; 0x90
 8000f72:	05db      	lsls	r3, r3, #23
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2390      	movs	r3, #144	; 0x90
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	21a0      	movs	r1, #160	; 0xa0
 8000f7c:	0389      	lsls	r1, r1, #14
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	ffc3ffff 	.word	0xffc3ffff

08000f94 <dacInit>:

void dacInit(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_DACEN+RCC_APB1ENR_TIM14EN;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <dacInit+0x5c>)
 8000f9a:	69da      	ldr	r2, [r3, #28]
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <dacInit+0x5c>)
 8000f9e:	4915      	ldr	r1, [pc, #84]	; (8000ff4 <dacInit+0x60>)
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	61da      	str	r2, [r3, #28]

	// software trigger + dac enable
	DAC->CR |= (DAC_CR_TSEL1_Msk + DAC_CR_EN1);
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <dacInit+0x64>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <dacInit+0x64>)
 8000faa:	2139      	movs	r1, #57	; 0x39
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

	TIM14->PSC = (SystemCoreClock/1000000)-1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <dacInit+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4912      	ldr	r1, [pc, #72]	; (8001000 <dacInit+0x6c>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f8b0 	bl	800011c <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <dacInit+0x70>)
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM14->ARR = (M2U(PERIOD)/STEPS)-1;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <dacInit+0x70>)
 8000fc8:	22c7      	movs	r2, #199	; 0xc7
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->DIER |= TIM_DIER_UIE;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <dacInit+0x70>)
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <dacInit+0x70>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM14_IRQn);
 8000fd8:	2013      	movs	r0, #19
 8000fda:	f7ff ff09 	bl	8000df0 <__NVIC_EnableIRQ>
	TIM14->CR1 |= TIM_CR1_CEN;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <dacInit+0x70>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <dacInit+0x70>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	20000100 	.word	0x20000100
 8000ff8:	40007400 	.word	0x40007400
 8000ffc:	20000000 	.word	0x20000000
 8001000:	000f4240 	.word	0x000f4240
 8001004:	40002000 	.word	0x40002000

08001008 <pwmInit>:


void pwmInit(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <encoderInit>:

void encoderInit(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
// tim3 is used in quad.encoder mode
// AF1 = tim3_ch1 pin (PA6) + tim3_ch2 pin (PA7)
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL6_Pos) + (1 << GPIO_AFRL_AFRL7_Pos);
 8001018:	2390      	movs	r3, #144	; 0x90
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	2390      	movs	r3, #144	; 0x90
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	2188      	movs	r1, #136	; 0x88
 8001024:	0549      	lsls	r1, r1, #21
 8001026:	430a      	orrs	r2, r1
 8001028:	621a      	str	r2, [r3, #32]
	GPIOA->MODER &= ~(GPIO_MODER_MODER6 + GPIO_MODER_MODER7);
 800102a:	2390      	movs	r3, #144	; 0x90
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2390      	movs	r3, #144	; 0x90
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	491b      	ldr	r1, [pc, #108]	; (80010a4 <encoderInit+0x90>)
 8001036:	400a      	ands	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER6_1 + GPIO_MODER_MODER7_1);
 800103a:	2390      	movs	r3, #144	; 0x90
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2390      	movs	r3, #144	; 0x90
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	21a0      	movs	r1, #160	; 0xa0
 8001046:	0209      	lsls	r1, r1, #8
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <encoderInit+0x94>)
 800104e:	69da      	ldr	r2, [r3, #28]
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <encoderInit+0x94>)
 8001052:	2102      	movs	r1, #2
 8001054:	430a      	orrs	r2, r1
 8001056:	61da      	str	r2, [r3, #28]

	// CC1 & CC2 channels as inputs, IC1 mapped to TI1, IC2 mapped to TI2
	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 + TIM_CCMR1_CC2S_0);
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <encoderInit+0x98>)
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <encoderInit+0x98>)
 800105e:	2102      	movs	r1, #2
 8001060:	31ff      	adds	r1, #255	; 0xff
 8001062:	430a      	orrs	r2, r1
 8001064:	619a      	str	r2, [r3, #24]
	// polarity: on noninverted/rising edge
	TIM3->CCER &= ~(TIM_CCER_CC1P + TIM_CCER_CC2P);
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <encoderInit+0x98>)
 8001068:	6a1a      	ldr	r2, [r3, #32]
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <encoderInit+0x98>)
 800106c:	2122      	movs	r1, #34	; 0x22
 800106e:	438a      	bics	r2, r1
 8001070:	621a      	str	r2, [r3, #32]
	// select encoder mode 1
	TIM3->SMCR |= (1 << TIM_SMCR_SMS_Pos);
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <encoderInit+0x98>)
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <encoderInit+0x98>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	609a      	str	r2, [r3, #8]
	// filter for jittering
	TIM3->CCMR1 |= (3 << TIM_CCMR1_IC1F_Pos);
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <encoderInit+0x98>)
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <encoderInit+0x98>)
 8001084:	2130      	movs	r1, #48	; 0x30
 8001086:	430a      	orrs	r2, r1
 8001088:	619a      	str	r2, [r3, #24]
	// counter top value
	TIM3->ARR = ENC_MAX;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <encoderInit+0x98>)
 800108c:	22c8      	movs	r2, #200	; 0xc8
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
	// lastly - enabling counter
	TIM3->CR1 |= TIM_CR1_CEN;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <encoderInit+0x98>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <encoderInit+0x98>)
 8001096:	2101      	movs	r1, #1
 8001098:	430a      	orrs	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	ffff0fff 	.word	0xffff0fff
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40000400 	.word	0x40000400

080010b0 <uartInit>:

void uartInit(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	// 48 Mhz input
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <uartInit+0x80>)
 80010b6:	699a      	ldr	r2, [r3, #24]
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <uartInit+0x80>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	01c9      	lsls	r1, r1, #7
 80010be:	430a      	orrs	r2, r1
 80010c0:	619a      	str	r2, [r3, #24]
	RCC->AHBENR |= RCC_AHBENR_DMAEN;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <uartInit+0x80>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <uartInit+0x80>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	615a      	str	r2, [r3, #20]
	USART1->BRR = 0x1388; // 9600 baud
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <uartInit+0x84>)
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <uartInit+0x88>)
 80010d2:	60da      	str	r2, [r3, #12]

//	 rx dma
	USART1->CR3 |= USART_CR3_DMAR;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <uartInit+0x84>)
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <uartInit+0x84>)
 80010da:	2140      	movs	r1, #64	; 0x40
 80010dc:	430a      	orrs	r2, r1
 80010de:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CPAR = (uint32_t)&USART1->RDR;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <uartInit+0x8c>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <uartInit+0x90>)
 80010e4:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)rxBuffer;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <uartInit+0x8c>)
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <uartInit+0x94>)
 80010ea:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CNDTR = DMA_R_SIZE;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <uartInit+0x8c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	605a      	str	r2, [r3, #4]
	DMA1_Channel3->CCR = (3 << DMA_CCR_PL_Pos) + DMA_CCR_MINC + DMA_CCR_CIRC + DMA_CCR_TCIE + DMA_CCR_EN;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <uartInit+0x8c>)
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <uartInit+0x98>)
 80010f6:	601a      	str	r2, [r3, #0]

//	 tx dma
	USART1->CR3 |= USART_CR3_DMAT;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <uartInit+0x84>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <uartInit+0x84>)
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	430a      	orrs	r2, r1
 8001102:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CPAR = (uint32_t)&USART1->TDR;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <uartInit+0x9c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <uartInit+0xa0>)
 8001108:	609a      	str	r2, [r3, #8]
	DMA1_Channel2->CMAR = (uint32_t)txBuffer;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <uartInit+0x9c>)
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <uartInit+0xa4>)
 800110e:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CCR = (2 << DMA_CCR_PL_Pos) + DMA_CCR_MINC + DMA_CCR_DIR + DMA_CCR_TCIE;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <uartInit+0x9c>)
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <uartInit+0xa8>)
 8001114:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001116:	200a      	movs	r0, #10
 8001118:	f7ff fe6a 	bl	8000df0 <__NVIC_EnableIRQ>

	USART1->CR1 |= USART_CR1_RE + USART_CR1_TE + USART_CR1_UE;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <uartInit+0x84>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <uartInit+0x84>)
 8001122:	210d      	movs	r1, #13
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	40021000 	.word	0x40021000
 8001134:	40013800 	.word	0x40013800
 8001138:	00001388 	.word	0x00001388
 800113c:	40020030 	.word	0x40020030
 8001140:	40013824 	.word	0x40013824
 8001144:	200000d8 	.word	0x200000d8
 8001148:	000030a3 	.word	0x000030a3
 800114c:	4002001c 	.word	0x4002001c
 8001150:	40013828 	.word	0x40013828
 8001154:	200000e4 	.word	0x200000e4
 8001158:	00002092 	.word	0x00002092

0800115c <getCRC>:

// matches with crc32
uint32_t getCRC(uint32_t* src, uint32_t length) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	//reset hardware module
	CRC->CR = (CRC_CR_REV_OUT + CRC_CR_REV_IN + CRC_CR_RESET);
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <getCRC+0x44>)
 8001168:	22e1      	movs	r2, #225	; 0xe1
 800116a:	609a      	str	r2, [r3, #8]

	for (uint32_t i = 0; i < (length / sizeof(uint32_t)); i++){
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e009      	b.n	8001186 <getCRC+0x2a>
		CRC->DR = *src;
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <getCRC+0x44>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6013      	str	r3, [r2, #0]
		src++;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3304      	adds	r3, #4
 800117e:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < (length / sizeof(uint32_t)); i++){
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	429a      	cmp	r2, r3
 800118e:	d3f0      	bcc.n	8001172 <getCRC+0x16>
	}

	return (~CRC->DR);
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <getCRC+0x44>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	43db      	mvns	r3, r3
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40023000 	.word	0x40023000

080011a4 <pollKeys>:
#include "interaction.h"
#include "hw.h"

static uint16_t buttonCnt, timeCnt, oldAmplitude;

uint8_t pollKeys() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	if (GPIOA->IDR & GPIO_IDR_0) {
 80011a8:	2390      	movs	r3, #144	; 0x90
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4013      	ands	r3, r2
 80011b2:	d007      	beq.n	80011c4 <pollKeys+0x20>
		buttonCnt++;
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <pollKeys+0x28>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <pollKeys+0x28>)
 80011be:	801a      	strh	r2, [r3, #0]
		return 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <pollKeys+0x22>
	}
	return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000084 	.word	0x20000084

080011d0 <keyReaction>:

void keyReaction() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	static uint8_t key, oldKey;

	key = pollKeys();
 80011d4:	f7ff ffe6 	bl	80011a4 <pollKeys>
 80011d8:	0003      	movs	r3, r0
 80011da:	001a      	movs	r2, r3
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <keyReaction+0x80>)
 80011de:	701a      	strb	r2, [r3, #0]
	if (!key && oldKey) { // press release moment
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <keyReaction+0x80>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12b      	bne.n	8001240 <keyReaction+0x70>
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <keyReaction+0x84>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d027      	beq.n	8001240 <keyReaction+0x70>
		if (buttonCnt > (2*SECOND)) { // long press
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <keyReaction+0x88>)
 80011f2:	881a      	ldrh	r2, [r3, #0]
 80011f4:	23fa      	movs	r3, #250	; 0xfa
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d909      	bls.n	8001210 <keyReaction+0x40>
			devInfo.controlByte ^= halfSine;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <keyReaction+0x8c>)
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	2201      	movs	r2, #1
 8001204:	4053      	eors	r3, r2
 8001206:	b2d9      	uxtb	r1, r3
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <keyReaction+0x8c>)
 800120a:	2230      	movs	r2, #48	; 0x30
 800120c:	5499      	strb	r1, [r3, r2]
 800120e:	e014      	b.n	800123a <keyReaction+0x6a>
		} else if (buttonCnt > 5) { // press
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <keyReaction+0x88>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b05      	cmp	r3, #5
 8001216:	d910      	bls.n	800123a <keyReaction+0x6a>
			devInfo.controlByte |= runScript;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <keyReaction+0x8c>)
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	5c9b      	ldrb	r3, [r3, r2]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	4252      	negs	r2, r2
 8001222:	4313      	orrs	r3, r2
 8001224:	b2d9      	uxtb	r1, r3
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <keyReaction+0x8c>)
 8001228:	2230      	movs	r2, #48	; 0x30
 800122a:	5499      	strb	r1, [r3, r2]
			oldAmplitude = devInfo.amplitude;
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <keyReaction+0x8c>)
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <keyReaction+0x90>)
 8001232:	801a      	strh	r2, [r3, #0]
			timeCnt = 0;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <keyReaction+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
		}
		buttonCnt = 0;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <keyReaction+0x88>)
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
	}
	oldKey = key;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <keyReaction+0x80>)
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <keyReaction+0x84>)
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	2000008a 	.word	0x2000008a
 8001254:	2000008b 	.word	0x2000008b
 8001258:	20000084 	.word	0x20000084
 800125c:	20000090 	.word	0x20000090
 8001260:	20000088 	.word	0x20000088
 8001264:	20000086 	.word	0x20000086

08001268 <encoderReaction>:

#define ENCODER_STEP 15
void encoderReaction(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	static ENC_TYPE oldVal = 0;
	ENC_TYPE newVal = TIM3->CNT;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <encoderReaction+0x78>)
 8001270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	701a      	strb	r2, [r3, #0]

	if (newVal != oldVal) {
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <encoderReaction+0x7c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d029      	beq.n	80012d6 <encoderReaction+0x6e>
		int16_t diff = newVal - oldVal;
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <encoderReaction+0x7c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29a      	uxth	r2, r3
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	801a      	strh	r2, [r3, #0]
		if (diff > 0) { // positive change
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	5e9b      	ldrsh	r3, [r3, r2]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd0c      	ble.n	80012ba <encoderReaction+0x52>
			if (devInfo.amplitude <= (0xfff-ENCODER_STEP))
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <encoderReaction+0x80>)
 80012a2:	881a      	ldrh	r2, [r3, #0]
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d810      	bhi.n	80012ce <encoderReaction+0x66>
				devInfo.amplitude += ENCODER_STEP;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <encoderReaction+0x80>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	330f      	adds	r3, #15
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <encoderReaction+0x80>)
 80012b6:	801a      	strh	r2, [r3, #0]
 80012b8:	e009      	b.n	80012ce <encoderReaction+0x66>
		} else { // negative change
			if (devInfo.amplitude >= ENCODER_STEP)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <encoderReaction+0x80>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	2b0e      	cmp	r3, #14
 80012c0:	d905      	bls.n	80012ce <encoderReaction+0x66>
				devInfo.amplitude -= ENCODER_STEP;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <encoderReaction+0x80>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	3b0f      	subs	r3, #15
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <encoderReaction+0x80>)
 80012cc:	801a      	strh	r2, [r3, #0]
		}
		oldVal = newVal;
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <encoderReaction+0x7c>)
 80012d0:	1dfa      	adds	r2, r7, #7
 80012d2:	7812      	ldrb	r2, [r2, #0]
 80012d4:	701a      	strb	r2, [r3, #0]
	}
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40000400 	.word	0x40000400
 80012e4:	2000008c 	.word	0x2000008c
 80012e8:	20000090 	.word	0x20000090

080012ec <interfaceInteraction>:

void interfaceInteraction(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	static uint8_t scriptCounter = 0;
	keyReaction();
 80012f0:	f7ff ff6e 	bl	80011d0 <keyReaction>

	if (devInfo.controlByte & runScript) {
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <interfaceInteraction+0xb0>)
 80012f6:	2230      	movs	r2, #48	; 0x30
 80012f8:	5c9b      	ldrb	r3, [r3, r2]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da48      	bge.n	8001392 <interfaceInteraction+0xa6>
		timeCnt++;
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <interfaceInteraction+0xb4>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <interfaceInteraction+0xb4>)
 800130a:	801a      	strh	r2, [r3, #0]
		if (timeCnt < devInfo.scriptPoint.time[scriptCounter]) {
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <interfaceInteraction+0xb8>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <interfaceInteraction+0xb0>)
 8001312:	3308      	adds	r3, #8
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	18d3      	adds	r3, r2, r3
 8001318:	3308      	adds	r3, #8
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <interfaceInteraction+0xb4>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	d909      	bls.n	8001338 <interfaceInteraction+0x4c>
			devInfo.amplitude = devInfo.scriptPoint.amplitude[scriptCounter];
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <interfaceInteraction+0xb8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <interfaceInteraction+0xb0>)
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	18d3      	adds	r3, r2, r3
 800132e:	3304      	adds	r3, #4
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <interfaceInteraction+0xb0>)
 8001334:	801a      	strh	r2, [r3, #0]
			}
		}
	} else { // else = if not script
		encoderReaction();
	}
}
 8001336:	e02e      	b.n	8001396 <interfaceInteraction+0xaa>
			timeCnt = 0;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <interfaceInteraction+0xb4>)
 800133a:	2200      	movs	r2, #0
 800133c:	801a      	strh	r2, [r3, #0]
			scriptCounter++;
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <interfaceInteraction+0xb8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <interfaceInteraction+0xb8>)
 8001348:	701a      	strb	r2, [r3, #0]
			if ((devInfo.scriptPoint.amplitude[scriptCounter] == 0)
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <interfaceInteraction+0xb8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <interfaceInteraction+0xb0>)
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	18d3      	adds	r3, r2, r3
 8001354:	3304      	adds	r3, #4
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <interfaceInteraction+0x84>
					|| (devInfo.scriptPoint.time[scriptCounter] == 0)) {
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <interfaceInteraction+0xb8>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <interfaceInteraction+0xb0>)
 8001362:	3308      	adds	r3, #8
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	3308      	adds	r3, #8
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d112      	bne.n	8001396 <interfaceInteraction+0xaa>
				devInfo.controlByte &= ~runScript;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <interfaceInteraction+0xb0>)
 8001372:	2230      	movs	r2, #48	; 0x30
 8001374:	5c9b      	ldrb	r3, [r3, r2]
 8001376:	227f      	movs	r2, #127	; 0x7f
 8001378:	4013      	ands	r3, r2
 800137a:	b2d9      	uxtb	r1, r3
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <interfaceInteraction+0xb0>)
 800137e:	2230      	movs	r2, #48	; 0x30
 8001380:	5499      	strb	r1, [r3, r2]
				devInfo.amplitude = oldAmplitude;
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <interfaceInteraction+0xbc>)
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <interfaceInteraction+0xb0>)
 8001388:	801a      	strh	r2, [r3, #0]
				scriptCounter = 0;
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <interfaceInteraction+0xb8>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	e001      	b.n	8001396 <interfaceInteraction+0xaa>
		encoderReaction();
 8001392:	f7ff ff69 	bl	8001268 <encoderReaction>
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000090 	.word	0x20000090
 80013a0:	20000086 	.word	0x20000086
 80013a4:	2000008d 	.word	0x2000008d
 80013a8:	20000088 	.word	0x20000088

080013ac <llistAppend>:
	// return fail
	return 0;
}

/* inserts at last position*/
uint8_t llistAppend(node_t** head, NODE_DATA_TYPE* newPacket) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	// allocate new linked-list member
	node_t* new  = (node_t*)malloc(sizeof(node_t));
 80013b6:	2010      	movs	r0, #16
 80013b8:	f000 fadc 	bl	8001974 <malloc>
 80013bc:	0003      	movs	r3, r0
 80013be:	60bb      	str	r3, [r7, #8]
	if (new != NULL) {
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d020      	beq.n	8001408 <llistAppend+0x5c>
		// used in step 5
		node_t* last = *head;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]
		// put new data in new member
		memcpy(&(new->data), newPacket, sizeof(NODE_DATA_TYPE));
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	220c      	movs	r2, #12
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 fae2 	bl	800199c <memcpy>

		// make this new node LAST in list: next == NULL
		new->next = NULL;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]

		// if list is empty, than make new node as head
		if (*head == NULL) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d107      	bne.n	80013f6 <llistAppend+0x4a>
			*head = new;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	601a      	str	r2, [r3, #0]
			// return success
			return 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00c      	b.n	800140a <llistAppend+0x5e>
		}

		// else traverse till the last node
		while(last->next != NULL) {
			last = last->next;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60fb      	str	r3, [r7, #12]
		while(last->next != NULL) {
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f8      	bne.n	80013f0 <llistAppend+0x44>
		}

		// change the next of last node
		last->next = (void*)new;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	60da      	str	r2, [r3, #12]

		// return success
		return 1;
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <llistAppend+0x5e>
	}
	// return fail
	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	0018      	movs	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}

08001412 <llistDeleteLast>:
			}
		}
	}
}

void llistDeleteLast(node_t** head) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	node_t* temp;
	node_t* prev;

	if (head == NULL){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01e      	beq.n	800145e <llistDeleteLast+0x4c>
		return;
	}

	temp = *head;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
	prev = *head;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60bb      	str	r3, [r7, #8]

	while(temp->next != NULL) {
 800142c:	e004      	b.n	8001438 <llistDeleteLast+0x26>
		prev = temp;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	60bb      	str	r3, [r7, #8]
		temp = temp->next;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	60fb      	str	r3, [r7, #12]
	while(temp->next != NULL) {
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f6      	bne.n	800142e <llistDeleteLast+0x1c>
	}

	prev->next = NULL;
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]

	if (temp == prev) { // if deleting first node
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	429a      	cmp	r2, r3
 800144c:	d102      	bne.n	8001454 <llistDeleteLast+0x42>
		*head = NULL;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	}
	free(temp);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fa96 	bl	8001988 <free>
 800145c:	e000      	b.n	8001460 <llistDeleteLast+0x4e>
		return;
 800145e:	46c0      	nop			; (mov r8, r8)
}
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TIM14_IRQHandler>:
#define BH_SINE(x) (16*x*(PI-x)) / ( (5*PI*PI)-4*x*(PI-x) )

volatile uint8_t msEvent = 0;
device devInfo = {0};

void TIM14_IRQHandler(void) {
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	af00      	add	r7, sp, #0
	static uint16_t sineCnt = 0, msCounter = 0;
	static float sinVal = 0.00f, angle = 0.00f;

	TIM14->SR = 0;
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <TIM14_IRQHandler+0x1bc>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
	// Bhaskara sine approximation
	if (angle <= PI) {
 8001472:	4b6d      	ldr	r3, [pc, #436]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	496d      	ldr	r1, [pc, #436]	; (800162c <TIM14_IRQHandler+0x1c4>)
 8001478:	1c18      	adds	r0, r3, #0
 800147a:	f7fe fef7 	bl	800026c <__aeabi_fcmple>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d038      	beq.n	80014f4 <TIM14_IRQHandler+0x8c>
		sinVal = BH_SINE(angle);
 8001482:	4b69      	ldr	r3, [pc, #420]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2183      	movs	r1, #131	; 0x83
 8001488:	05c9      	lsls	r1, r1, #23
 800148a:	1c18      	adds	r0, r3, #0
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_fmul>
 8001490:	1c03      	adds	r3, r0, #0
 8001492:	1c1c      	adds	r4, r3, #0
 8001494:	4b64      	ldr	r3, [pc, #400]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c19      	adds	r1, r3, #0
 800149a:	4864      	ldr	r0, [pc, #400]	; (800162c <TIM14_IRQHandler+0x1c4>)
 800149c:	f7ff f9f2 	bl	8000884 <__aeabi_fsub>
 80014a0:	1c03      	adds	r3, r0, #0
 80014a2:	1c19      	adds	r1, r3, #0
 80014a4:	1c20      	adds	r0, r4, #0
 80014a6:	f7ff f8c7 	bl	8000638 <__aeabi_fmul>
 80014aa:	1c03      	adds	r3, r0, #0
 80014ac:	1c1c      	adds	r4, r3, #0
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2181      	movs	r1, #129	; 0x81
 80014b4:	05c9      	lsls	r1, r1, #23
 80014b6:	1c18      	adds	r0, r3, #0
 80014b8:	f7ff f8be 	bl	8000638 <__aeabi_fmul>
 80014bc:	1c03      	adds	r3, r0, #0
 80014be:	1c1d      	adds	r5, r3, #0
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	1c19      	adds	r1, r3, #0
 80014c6:	4859      	ldr	r0, [pc, #356]	; (800162c <TIM14_IRQHandler+0x1c4>)
 80014c8:	f7ff f9dc 	bl	8000884 <__aeabi_fsub>
 80014cc:	1c03      	adds	r3, r0, #0
 80014ce:	1c19      	adds	r1, r3, #0
 80014d0:	1c28      	adds	r0, r5, #0
 80014d2:	f7ff f8b1 	bl	8000638 <__aeabi_fmul>
 80014d6:	1c03      	adds	r3, r0, #0
 80014d8:	1c19      	adds	r1, r3, #0
 80014da:	4855      	ldr	r0, [pc, #340]	; (8001630 <TIM14_IRQHandler+0x1c8>)
 80014dc:	f7ff f9d2 	bl	8000884 <__aeabi_fsub>
 80014e0:	1c03      	adds	r3, r0, #0
 80014e2:	1c19      	adds	r1, r3, #0
 80014e4:	1c20      	adds	r0, r4, #0
 80014e6:	f7fe fedf 	bl	80002a8 <__aeabi_fdiv>
 80014ea:	1c03      	adds	r3, r0, #0
 80014ec:	1c1a      	adds	r2, r3, #0
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <TIM14_IRQHandler+0x1cc>)
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e04c      	b.n	800158e <TIM14_IRQHandler+0x126>
	} else {
		if (devInfo.controlByte & halfSine) {
 80014f4:	4b50      	ldr	r3, [pc, #320]	; (8001638 <TIM14_IRQHandler+0x1d0>)
 80014f6:	2230      	movs	r2, #48	; 0x30
 80014f8:	5c9b      	ldrb	r3, [r3, r2]
 80014fa:	001a      	movs	r2, r3
 80014fc:	2301      	movs	r3, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	d003      	beq.n	800150a <TIM14_IRQHandler+0xa2>
			sinVal = 0;
 8001502:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <TIM14_IRQHandler+0x1cc>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e041      	b.n	800158e <TIM14_IRQHandler+0x126>
		} else {
			angle -= PI;
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4947      	ldr	r1, [pc, #284]	; (800162c <TIM14_IRQHandler+0x1c4>)
 8001510:	1c18      	adds	r0, r3, #0
 8001512:	f7ff f9b7 	bl	8000884 <__aeabi_fsub>
 8001516:	1c03      	adds	r3, r0, #0
 8001518:	1c1a      	adds	r2, r3, #0
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 800151c:	601a      	str	r2, [r3, #0]
			sinVal = BH_SINE(angle);
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2183      	movs	r1, #131	; 0x83
 8001524:	05c9      	lsls	r1, r1, #23
 8001526:	1c18      	adds	r0, r3, #0
 8001528:	f7ff f886 	bl	8000638 <__aeabi_fmul>
 800152c:	1c03      	adds	r3, r0, #0
 800152e:	1c1c      	adds	r4, r3, #0
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1c19      	adds	r1, r3, #0
 8001536:	483d      	ldr	r0, [pc, #244]	; (800162c <TIM14_IRQHandler+0x1c4>)
 8001538:	f7ff f9a4 	bl	8000884 <__aeabi_fsub>
 800153c:	1c03      	adds	r3, r0, #0
 800153e:	1c19      	adds	r1, r3, #0
 8001540:	1c20      	adds	r0, r4, #0
 8001542:	f7ff f879 	bl	8000638 <__aeabi_fmul>
 8001546:	1c03      	adds	r3, r0, #0
 8001548:	1c1c      	adds	r4, r3, #0
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2181      	movs	r1, #129	; 0x81
 8001550:	05c9      	lsls	r1, r1, #23
 8001552:	1c18      	adds	r0, r3, #0
 8001554:	f7ff f870 	bl	8000638 <__aeabi_fmul>
 8001558:	1c03      	adds	r3, r0, #0
 800155a:	1c1d      	adds	r5, r3, #0
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1c19      	adds	r1, r3, #0
 8001562:	4832      	ldr	r0, [pc, #200]	; (800162c <TIM14_IRQHandler+0x1c4>)
 8001564:	f7ff f98e 	bl	8000884 <__aeabi_fsub>
 8001568:	1c03      	adds	r3, r0, #0
 800156a:	1c19      	adds	r1, r3, #0
 800156c:	1c28      	adds	r0, r5, #0
 800156e:	f7ff f863 	bl	8000638 <__aeabi_fmul>
 8001572:	1c03      	adds	r3, r0, #0
 8001574:	1c19      	adds	r1, r3, #0
 8001576:	482e      	ldr	r0, [pc, #184]	; (8001630 <TIM14_IRQHandler+0x1c8>)
 8001578:	f7ff f984 	bl	8000884 <__aeabi_fsub>
 800157c:	1c03      	adds	r3, r0, #0
 800157e:	1c19      	adds	r1, r3, #0
 8001580:	1c20      	adds	r0, r4, #0
 8001582:	f7fe fe91 	bl	80002a8 <__aeabi_fdiv>
 8001586:	1c03      	adds	r3, r0, #0
 8001588:	1c1a      	adds	r2, r3, #0
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <TIM14_IRQHandler+0x1cc>)
 800158c:	601a      	str	r2, [r3, #0]
		}
	}
	sinVal *= devInfo.amplitude;
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <TIM14_IRQHandler+0x1d0>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff fb44 	bl	8000c20 <__aeabi_i2f>
 8001598:	1c02      	adds	r2, r0, #0
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <TIM14_IRQHandler+0x1cc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	1c19      	adds	r1, r3, #0
 80015a0:	1c10      	adds	r0, r2, #0
 80015a2:	f7ff f849 	bl	8000638 <__aeabi_fmul>
 80015a6:	1c03      	adds	r3, r0, #0
 80015a8:	1c1a      	adds	r2, r3, #0
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <TIM14_IRQHandler+0x1cc>)
 80015ac:	601a      	str	r2, [r3, #0]

	DAC1->DHR12R1 = (uint16_t)lroundf(sinVal);
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <TIM14_IRQHandler+0x1cc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1c18      	adds	r0, r3, #0
 80015b4:	f000 fe63 	bl	800227e <lroundf>
 80015b8:	0003      	movs	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <TIM14_IRQHandler+0x1d4>)
 80015be:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR = DAC_SWTRIGR_SWTRIG1;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <TIM14_IRQHandler+0x1d4>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	605a      	str	r2, [r3, #4]

	angle = ((2*PI)/STEPS)*(sineCnt++);
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <TIM14_IRQHandler+0x1d8>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	b291      	uxth	r1, r2
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <TIM14_IRQHandler+0x1d8>)
 80015d0:	8011      	strh	r1, [r2, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff fb24 	bl	8000c20 <__aeabi_i2f>
 80015d8:	1c03      	adds	r3, r0, #0
 80015da:	491a      	ldr	r1, [pc, #104]	; (8001644 <TIM14_IRQHandler+0x1dc>)
 80015dc:	1c18      	adds	r0, r3, #0
 80015de:	f7ff f82b 	bl	8000638 <__aeabi_fmul>
 80015e2:	1c03      	adds	r3, r0, #0
 80015e4:	1c1a      	adds	r2, r3, #0
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <TIM14_IRQHandler+0x1c0>)
 80015e8:	601a      	str	r2, [r3, #0]
	sineCnt %= STEPS;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <TIM14_IRQHandler+0x1d8>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2164      	movs	r1, #100	; 0x64
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7fe fe19 	bl	8000228 <__aeabi_uidivmod>
 80015f6:	000b      	movs	r3, r1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <TIM14_IRQHandler+0x1d8>)
 80015fc:	801a      	strh	r2, [r3, #0]

	if (++msCounter >= MS_TRIG) {
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <TIM14_IRQHandler+0x1e0>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <TIM14_IRQHandler+0x1e0>)
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <TIM14_IRQHandler+0x1e0>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	2b04      	cmp	r3, #4
 8001610:	d905      	bls.n	800161e <TIM14_IRQHandler+0x1b6>
		msCounter = 0;
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <TIM14_IRQHandler+0x1e0>)
 8001614:	2200      	movs	r2, #0
 8001616:	801a      	strh	r2, [r3, #0]
		msEvent = 1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <TIM14_IRQHandler+0x1e4>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
	}
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	40002000 	.word	0x40002000
 8001628:	200000c8 	.word	0x200000c8
 800162c:	40490e56 	.word	0x40490e56
 8001630:	42456165 	.word	0x42456165
 8001634:	200000cc 	.word	0x200000cc
 8001638:	20000090 	.word	0x20000090
 800163c:	40007400 	.word	0x40007400
 8001640:	200000d0 	.word	0x200000d0
 8001644:	3d80ad04 	.word	0x3d80ad04
 8001648:	200000d2 	.word	0x200000d2
 800164c:	2000008e 	.word	0x2000008e

08001650 <main>:

uint8_t dummy[8] = {0};
static uint16_t oldAmplitude = 0;
int main(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	static uint16_t hzCnt = 0;
	devInfo.amplitude = AMPLITUDE;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <main+0x9c>)
 8001656:	22fa      	movs	r2, #250	; 0xfa
 8001658:	00d2      	lsls	r2, r2, #3
 800165a:	801a      	strh	r2, [r3, #0]
	devInfo.scriptPoint.time[0] = SCRIPT_TIME;
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <main+0x9c>)
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <main+0xa0>)
 8001660:	831a      	strh	r2, [r3, #24]
	devInfo.scriptPoint.amplitude[0] = SCRIPT_AMPLITUDE;
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <main+0x9c>)
 8001664:	22fa      	movs	r2, #250	; 0xfa
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	809a      	strh	r2, [r3, #4]
	hwInit();
 800166a:	f7ff fbdb 	bl	8000e24 <hwInit>

	/* Loop forever */
	while(1) {
		if(msEvent) {
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <main+0xa4>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0fa      	beq.n	800166e <main+0x1e>
			msEvent = 0;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <main+0xa4>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
			interfaceInteraction();
 800167e:	f7ff fe35 	bl	80012ec <interfaceInteraction>

			analyzePacket();
 8001682:	f000 f8c9 	bl	8001818 <analyzePacket>

			if (++hzCnt >= SECOND) {
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <main+0xa8>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <main+0xa8>)
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <main+0xa8>)
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	23fa      	movs	r3, #250	; 0xfa
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	429a      	cmp	r2, r3
 800169c:	d3e7      	bcc.n	800166e <main+0x1e>
				hzCnt = 0;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <main+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	801a      	strh	r2, [r3, #0]
				// LED TOGGLE
				GPIOC->ODR ^= GPIO_ODR_9;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <main+0xac>)
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <main+0xac>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0089      	lsls	r1, r1, #2
 80016ae:	404a      	eors	r2, r1
 80016b0:	615a      	str	r2, [r3, #20]
				if (oldAmplitude != devInfo.amplitude) {
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <main+0x9c>)
 80016b4:	881a      	ldrh	r2, [r3, #0]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <main+0xb0>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d0d7      	beq.n	800166e <main+0x1e>
					oldAmplitude = devInfo.amplitude;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <main+0x9c>)
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <main+0xb0>)
 80016c4:	801a      	strh	r2, [r3, #0]
					DMA1_Channel2->CNDTR = sprintf(txBuffer,"Amplitude is: %u\n", devInfo.amplitude);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <main+0x9c>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	001a      	movs	r2, r3
 80016cc:	490d      	ldr	r1, [pc, #52]	; (8001704 <main+0xb4>)
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <main+0xb8>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 fa69 	bl	8001ba8 <siprintf>
 80016d6:	0002      	movs	r2, r0
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <main+0xbc>)
 80016da:	605a      	str	r2, [r3, #4]
					// start dma->tx
					DMA1_Channel2->CCR |= DMA_CCR_EN;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <main+0xbc>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <main+0xbc>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
		if(msEvent) {
 80016e8:	e7c1      	b.n	800166e <main+0x1e>
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000090 	.word	0x20000090
 80016f0:	000005dc 	.word	0x000005dc
 80016f4:	2000008e 	.word	0x2000008e
 80016f8:	200000d4 	.word	0x200000d4
 80016fc:	48000800 	.word	0x48000800
 8001700:	200000c4 	.word	0x200000c4
 8001704:	0800230c 	.word	0x0800230c
 8001708:	200000e4 	.word	0x200000e4
 800170c:	4002001c 	.word	0x4002001c

08001710 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler>:
uint8_t rxBuffer[DMA_R_SIZE];
char txBuffer[DMA_T_SIZE] = {'\0'};

static node_t* qOfPackets = NULL;

void DMA1_CH2_3_DMA2_CH1_2_IRQHandler(void) {
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	af00      	add	r7, sp, #0
	static packet_t localCopy;
	if (DMA1->ISR & DMA_ISR_TCIF3) { // rx buffer full
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x48>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d00e      	beq.n	800173e <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x2e>
		memcpy(&localCopy, rxBuffer, sizeof(packet_t));
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x4c>)
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x50>)
 8001724:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001726:	c313      	stmia	r3!, {r0, r1, r4}
		DMA1->IFCR = (0xf << 8); // clear all dma_ch3 interrupts
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x48>)
 800172a:	22f0      	movs	r2, #240	; 0xf0
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	605a      	str	r2, [r3, #4]
		llistAppend(&qOfPackets, &localCopy);
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x4c>)
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x54>)
 8001734:	0011      	movs	r1, r2
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff fe38 	bl	80013ac <llistAppend>
	} else { // tx complete
		DMA1->IFCR = (0xf << 4); // clear all dma_ch2 interrupts
		DMA1_Channel2->CCR &= ~DMA_CCR_EN; // stop channel to restart it later
	}
}
 800173c:	e008      	b.n	8001750 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x40>
		DMA1->IFCR = (0xf << 4); // clear all dma_ch2 interrupts
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x48>)
 8001740:	22f0      	movs	r2, #240	; 0xf0
 8001742:	605a      	str	r2, [r3, #4]
		DMA1_Channel2->CCR &= ~DMA_CCR_EN; // stop channel to restart it later
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x58>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x58>)
 800174a:	2101      	movs	r1, #1
 800174c:	438a      	bics	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bdb0      	pop	{r4, r5, r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40020000 	.word	0x40020000
 800175c:	2000011c 	.word	0x2000011c
 8001760:	200000d8 	.word	0x200000d8
 8001764:	20000118 	.word	0x20000118
 8001768:	4002001c 	.word	0x4002001c

0800176c <uartTransmit>:

uint8_t uartTransmit(uint8_t* src, uint16_t len) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	000a      	movs	r2, r1
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	801a      	strh	r2, [r3, #0]
	if ((DMA1_Channel2->CCR & DMA_CCR_EN) == 0) {
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <uartTransmit+0x40>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d10e      	bne.n	80017a2 <uartTransmit+0x36>
		DMA1_Channel2->CNDTR = len;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <uartTransmit+0x40>)
 8001786:	1cba      	adds	r2, r7, #2
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	605a      	str	r2, [r3, #4]
		DMA1_Channel2->CMAR = (uint32_t)src;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <uartTransmit+0x40>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	60da      	str	r2, [r3, #12]
		DMA1_Channel2->CCR |= DMA_CCR_EN;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <uartTransmit+0x40>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <uartTransmit+0x40>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
		return 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <uartTransmit+0x38>
	}
	return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	4002001c 	.word	0x4002001c

080017b0 <sendPacket>:

void sendPacket(uint8_t * data, enum ePacketTypes type) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	000a      	movs	r2, r1
 80017ba:	1cfb      	adds	r3, r7, #3
 80017bc:	701a      	strb	r2, [r3, #0]
	packet_t packetToSend = {0};
 80017be:	240c      	movs	r4, #12
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	0018      	movs	r0, r3
 80017c4:	230c      	movs	r3, #12
 80017c6:	001a      	movs	r2, r3
 80017c8:	2100      	movs	r1, #0
 80017ca:	f000 f8f0 	bl	80019ae <memset>
	packetToSend.header = PACKET_RESPONSE;
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	22cc      	movs	r2, #204	; 0xcc
 80017d2:	701a      	strb	r2, [r3, #0]

	memcpy(packetToSend.data, data, DATA_BYTES);
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	2202      	movs	r2, #2
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	189b      	adds	r3, r3, r2
 80017dc:	2206      	movs	r2, #6
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f8dc 	bl	800199c <memcpy>
	packetToSend.packetType = type;
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	1cfa      	adds	r2, r7, #3
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	705a      	strb	r2, [r3, #1]

	packetToSend.crc = getCRC((uint32_t*)&packetToSend, sizeof(packetToSend)-sizeof(packetToSend.crc));
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2108      	movs	r1, #8
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff fcb3 	bl	800115c <getCRC>
 80017f6:	0002      	movs	r2, r0
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	609a      	str	r2, [r3, #8]

	while( !uartTransmit((uint8_t*)&packetToSend, sizeof(packetToSend)) );
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	230c      	movs	r3, #12
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	210c      	movs	r1, #12
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff ffb1 	bl	800176c <uartTransmit>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d0f7      	beq.n	80017fe <sendPacket+0x4e>
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b007      	add	sp, #28
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <analyzePacket>:

void analyzePacket() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
	uint32_t tmp = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
	packet_t packetCopy = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	0018      	movs	r0, r3
 8001826:	230c      	movs	r3, #12
 8001828:	001a      	movs	r2, r3
 800182a:	2100      	movs	r1, #0
 800182c:	f000 f8bf 	bl	80019ae <memset>
	node_t* head = qOfPackets;
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <analyzePacket+0xb8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	617b      	str	r3, [r7, #20]

	if (head == NULL) {
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d045      	beq.n	80018c8 <analyzePacket+0xb0>
		return;
	}

	while(head->next != NULL) {
 800183c:	e002      	b.n	8001844 <analyzePacket+0x2c>
		head = head->next;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	617b      	str	r3, [r7, #20]
	while(head->next != NULL) {
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f8      	bne.n	800183e <analyzePacket+0x26>
	}

	memcpy(&packetCopy, &head->data, sizeof(packetCopy)); // make local copy
 800184c:	6979      	ldr	r1, [r7, #20]
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	220c      	movs	r2, #12
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f8a2 	bl	800199c <memcpy>

	tmp = getCRC((uint32_t*)&packetCopy, sizeof(packetCopy)-sizeof(packetCopy.crc));
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2108      	movs	r1, #8
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff fc7d 	bl	800115c <getCRC>
 8001862:	0003      	movs	r3, r0
 8001864:	613b      	str	r3, [r7, #16]
	if (tmp == packetCopy.crc) {
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d12c      	bne.n	80018ca <analyzePacket+0xb2>
		if (packetCopy.header == PACKET_READ) {
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2baa      	cmp	r3, #170	; 0xaa
 8001876:	d10a      	bne.n	800188e <analyzePacket+0x76>
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <analyzePacket+0xbc>)
 800187a:	881a      	ldrh	r2, [r3, #0]
			memcpy(packetCopy.data, &devInfo.amplitude, sizeof(devInfo.amplitude));
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	805a      	strh	r2, [r3, #2]
			sendPacket(packetCopy.data, responseOperation);
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	3302      	adds	r3, #2
 8001884:	2103      	movs	r1, #3
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff ff92 	bl	80017b0 <sendPacket>
 800188c:	e017      	b.n	80018be <analyzePacket+0xa6>
		} else if (packetCopy.header == PACKET_WRITE){
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2bbb      	cmp	r3, #187	; 0xbb
 8001894:	d113      	bne.n	80018be <analyzePacket+0xa6>
			switch(packetCopy.packetType) {
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d00a      	beq.n	80018b4 <analyzePacket+0x9c>
 800189e:	dc0b      	bgt.n	80018b8 <analyzePacket+0xa0>
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <analyzePacket+0x92>
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d009      	beq.n	80018bc <analyzePacket+0xa4>
			case scriptPointOperation:
				break;
			case controlByteOperation:
				break;
			default:
				break;
 80018a8:	e006      	b.n	80018b8 <analyzePacket+0xa0>
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	885a      	ldrh	r2, [r3, #2]
				memcpy(&devInfo.amplitude, packetCopy.data, sizeof(devInfo.amplitude));
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <analyzePacket+0xbc>)
 80018b0:	801a      	strh	r2, [r3, #0]
				break;
 80018b2:	e004      	b.n	80018be <analyzePacket+0xa6>
				break;
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	e002      	b.n	80018be <analyzePacket+0xa6>
				break;
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	e000      	b.n	80018be <analyzePacket+0xa6>
				break;
 80018bc:	46c0      	nop			; (mov r8, r8)
			}
		} else { // nor read, nor write

		}
		llistDeleteLast(&qOfPackets);
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <analyzePacket+0xb8>)
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fda6 	bl	8001412 <llistDeleteLast>
 80018c6:	e000      	b.n	80018ca <analyzePacket+0xb2>
		return;
 80018c8:	46c0      	nop			; (mov r8, r8)
	} else { // crc doesn't match

	}

}
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b006      	add	sp, #24
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000118 	.word	0x20000118
 80018d4:	20000090 	.word	0x20000090

080018d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018dc:	f7ff fa0c 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	; (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	; (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001906:	f000 f811 	bl	800192c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190a:	f7ff fea1 	bl	8001650 <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   r0, =_estack
 8001910:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800191c:	0800242c 	.word	0x0800242c
  ldr r2, =_sbss
 8001920:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001924:	2000013c 	.word	0x2000013c

08001928 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_COMP_IRQHandler>
	...

0800192c <__libc_init_array>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	2600      	movs	r6, #0
 8001930:	4d0c      	ldr	r5, [pc, #48]	; (8001964 <__libc_init_array+0x38>)
 8001932:	4c0d      	ldr	r4, [pc, #52]	; (8001968 <__libc_init_array+0x3c>)
 8001934:	1b64      	subs	r4, r4, r5
 8001936:	10a4      	asrs	r4, r4, #2
 8001938:	42a6      	cmp	r6, r4
 800193a:	d109      	bne.n	8001950 <__libc_init_array+0x24>
 800193c:	2600      	movs	r6, #0
 800193e:	f000 fcd9 	bl	80022f4 <_init>
 8001942:	4d0a      	ldr	r5, [pc, #40]	; (800196c <__libc_init_array+0x40>)
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <__libc_init_array+0x44>)
 8001946:	1b64      	subs	r4, r4, r5
 8001948:	10a4      	asrs	r4, r4, #2
 800194a:	42a6      	cmp	r6, r4
 800194c:	d105      	bne.n	800195a <__libc_init_array+0x2e>
 800194e:	bd70      	pop	{r4, r5, r6, pc}
 8001950:	00b3      	lsls	r3, r6, #2
 8001952:	58eb      	ldr	r3, [r5, r3]
 8001954:	4798      	blx	r3
 8001956:	3601      	adds	r6, #1
 8001958:	e7ee      	b.n	8001938 <__libc_init_array+0xc>
 800195a:	00b3      	lsls	r3, r6, #2
 800195c:	58eb      	ldr	r3, [r5, r3]
 800195e:	4798      	blx	r3
 8001960:	3601      	adds	r6, #1
 8001962:	e7f2      	b.n	800194a <__libc_init_array+0x1e>
 8001964:	08002424 	.word	0x08002424
 8001968:	08002424 	.word	0x08002424
 800196c:	08002424 	.word	0x08002424
 8001970:	08002428 	.word	0x08002428

08001974 <malloc>:
 8001974:	b510      	push	{r4, lr}
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <malloc+0x10>)
 8001978:	0001      	movs	r1, r0
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f000 f88c 	bl	8001a98 <_malloc_r>
 8001980:	bd10      	pop	{r4, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	20000004 	.word	0x20000004

08001988 <free>:
 8001988:	b510      	push	{r4, lr}
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <free+0x10>)
 800198c:	0001      	movs	r1, r0
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f000 f816 	bl	80019c0 <_free_r>
 8001994:	bd10      	pop	{r4, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	20000004 	.word	0x20000004

0800199c <memcpy>:
 800199c:	2300      	movs	r3, #0
 800199e:	b510      	push	{r4, lr}
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d100      	bne.n	80019a6 <memcpy+0xa>
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	5ccc      	ldrb	r4, [r1, r3]
 80019a8:	54c4      	strb	r4, [r0, r3]
 80019aa:	3301      	adds	r3, #1
 80019ac:	e7f8      	b.n	80019a0 <memcpy+0x4>

080019ae <memset>:
 80019ae:	0003      	movs	r3, r0
 80019b0:	1882      	adds	r2, r0, r2
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d100      	bne.n	80019b8 <memset+0xa>
 80019b6:	4770      	bx	lr
 80019b8:	7019      	strb	r1, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	e7f9      	b.n	80019b2 <memset+0x4>
	...

080019c0 <_free_r>:
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	0005      	movs	r5, r0
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d010      	beq.n	80019ea <_free_r+0x2a>
 80019c8:	1f0c      	subs	r4, r1, #4
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da00      	bge.n	80019d2 <_free_r+0x12>
 80019d0:	18e4      	adds	r4, r4, r3
 80019d2:	0028      	movs	r0, r5
 80019d4:	f000 f908 	bl	8001be8 <__malloc_lock>
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <_free_r+0x90>)
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d105      	bne.n	80019ec <_free_r+0x2c>
 80019e0:	6063      	str	r3, [r4, #4]
 80019e2:	6014      	str	r4, [r2, #0]
 80019e4:	0028      	movs	r0, r5
 80019e6:	f000 f907 	bl	8001bf8 <__malloc_unlock>
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
 80019ec:	42a3      	cmp	r3, r4
 80019ee:	d908      	bls.n	8001a02 <_free_r+0x42>
 80019f0:	6821      	ldr	r1, [r4, #0]
 80019f2:	1860      	adds	r0, r4, r1
 80019f4:	4283      	cmp	r3, r0
 80019f6:	d1f3      	bne.n	80019e0 <_free_r+0x20>
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	1841      	adds	r1, r0, r1
 80019fe:	6021      	str	r1, [r4, #0]
 8001a00:	e7ee      	b.n	80019e0 <_free_r+0x20>
 8001a02:	001a      	movs	r2, r3
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <_free_r+0x4e>
 8001a0a:	42a3      	cmp	r3, r4
 8001a0c:	d9f9      	bls.n	8001a02 <_free_r+0x42>
 8001a0e:	6811      	ldr	r1, [r2, #0]
 8001a10:	1850      	adds	r0, r2, r1
 8001a12:	42a0      	cmp	r0, r4
 8001a14:	d10b      	bne.n	8001a2e <_free_r+0x6e>
 8001a16:	6820      	ldr	r0, [r4, #0]
 8001a18:	1809      	adds	r1, r1, r0
 8001a1a:	1850      	adds	r0, r2, r1
 8001a1c:	6011      	str	r1, [r2, #0]
 8001a1e:	4283      	cmp	r3, r0
 8001a20:	d1e0      	bne.n	80019e4 <_free_r+0x24>
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	1841      	adds	r1, r0, r1
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	6053      	str	r3, [r2, #4]
 8001a2c:	e7da      	b.n	80019e4 <_free_r+0x24>
 8001a2e:	42a0      	cmp	r0, r4
 8001a30:	d902      	bls.n	8001a38 <_free_r+0x78>
 8001a32:	230c      	movs	r3, #12
 8001a34:	602b      	str	r3, [r5, #0]
 8001a36:	e7d5      	b.n	80019e4 <_free_r+0x24>
 8001a38:	6821      	ldr	r1, [r4, #0]
 8001a3a:	1860      	adds	r0, r4, r1
 8001a3c:	4283      	cmp	r3, r0
 8001a3e:	d103      	bne.n	8001a48 <_free_r+0x88>
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	1841      	adds	r1, r0, r1
 8001a46:	6021      	str	r1, [r4, #0]
 8001a48:	6063      	str	r3, [r4, #4]
 8001a4a:	6054      	str	r4, [r2, #4]
 8001a4c:	e7ca      	b.n	80019e4 <_free_r+0x24>
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	20000128 	.word	0x20000128

08001a54 <sbrk_aligned>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	4e0f      	ldr	r6, [pc, #60]	; (8001a94 <sbrk_aligned+0x40>)
 8001a58:	000d      	movs	r5, r1
 8001a5a:	6831      	ldr	r1, [r6, #0]
 8001a5c:	0004      	movs	r4, r0
 8001a5e:	2900      	cmp	r1, #0
 8001a60:	d102      	bne.n	8001a68 <sbrk_aligned+0x14>
 8001a62:	f000 f88f 	bl	8001b84 <_sbrk_r>
 8001a66:	6030      	str	r0, [r6, #0]
 8001a68:	0029      	movs	r1, r5
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f000 f88a 	bl	8001b84 <_sbrk_r>
 8001a70:	1c43      	adds	r3, r0, #1
 8001a72:	d00a      	beq.n	8001a8a <sbrk_aligned+0x36>
 8001a74:	2303      	movs	r3, #3
 8001a76:	1cc5      	adds	r5, r0, #3
 8001a78:	439d      	bics	r5, r3
 8001a7a:	42a8      	cmp	r0, r5
 8001a7c:	d007      	beq.n	8001a8e <sbrk_aligned+0x3a>
 8001a7e:	1a29      	subs	r1, r5, r0
 8001a80:	0020      	movs	r0, r4
 8001a82:	f000 f87f 	bl	8001b84 <_sbrk_r>
 8001a86:	1c43      	adds	r3, r0, #1
 8001a88:	d101      	bne.n	8001a8e <sbrk_aligned+0x3a>
 8001a8a:	2501      	movs	r5, #1
 8001a8c:	426d      	negs	r5, r5
 8001a8e:	0028      	movs	r0, r5
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	2000012c 	.word	0x2000012c

08001a98 <_malloc_r>:
 8001a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	1ccb      	adds	r3, r1, #3
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	3308      	adds	r3, #8
 8001aa2:	0006      	movs	r6, r0
 8001aa4:	001f      	movs	r7, r3
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d232      	bcs.n	8001b10 <_malloc_r+0x78>
 8001aaa:	270c      	movs	r7, #12
 8001aac:	42b9      	cmp	r1, r7
 8001aae:	d831      	bhi.n	8001b14 <_malloc_r+0x7c>
 8001ab0:	0030      	movs	r0, r6
 8001ab2:	f000 f899 	bl	8001be8 <__malloc_lock>
 8001ab6:	4d32      	ldr	r5, [pc, #200]	; (8001b80 <_malloc_r+0xe8>)
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	001c      	movs	r4, r3
 8001abc:	2c00      	cmp	r4, #0
 8001abe:	d12e      	bne.n	8001b1e <_malloc_r+0x86>
 8001ac0:	0039      	movs	r1, r7
 8001ac2:	0030      	movs	r0, r6
 8001ac4:	f7ff ffc6 	bl	8001a54 <sbrk_aligned>
 8001ac8:	0004      	movs	r4, r0
 8001aca:	1c43      	adds	r3, r0, #1
 8001acc:	d11e      	bne.n	8001b0c <_malloc_r+0x74>
 8001ace:	682c      	ldr	r4, [r5, #0]
 8001ad0:	0025      	movs	r5, r4
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	d14a      	bne.n	8001b6c <_malloc_r+0xd4>
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	0029      	movs	r1, r5
 8001ada:	18e3      	adds	r3, r4, r3
 8001adc:	0030      	movs	r0, r6
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	f000 f850 	bl	8001b84 <_sbrk_r>
 8001ae4:	9b01      	ldr	r3, [sp, #4]
 8001ae6:	4283      	cmp	r3, r0
 8001ae8:	d143      	bne.n	8001b72 <_malloc_r+0xda>
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	3703      	adds	r7, #3
 8001aee:	1aff      	subs	r7, r7, r3
 8001af0:	2303      	movs	r3, #3
 8001af2:	439f      	bics	r7, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	2f0c      	cmp	r7, #12
 8001af8:	d200      	bcs.n	8001afc <_malloc_r+0x64>
 8001afa:	270c      	movs	r7, #12
 8001afc:	0039      	movs	r1, r7
 8001afe:	0030      	movs	r0, r6
 8001b00:	f7ff ffa8 	bl	8001a54 <sbrk_aligned>
 8001b04:	1c43      	adds	r3, r0, #1
 8001b06:	d034      	beq.n	8001b72 <_malloc_r+0xda>
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	19df      	adds	r7, r3, r7
 8001b0c:	6027      	str	r7, [r4, #0]
 8001b0e:	e013      	b.n	8001b38 <_malloc_r+0xa0>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dacb      	bge.n	8001aac <_malloc_r+0x14>
 8001b14:	230c      	movs	r3, #12
 8001b16:	2500      	movs	r5, #0
 8001b18:	6033      	str	r3, [r6, #0]
 8001b1a:	0028      	movs	r0, r5
 8001b1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	1bd1      	subs	r1, r2, r7
 8001b22:	d420      	bmi.n	8001b66 <_malloc_r+0xce>
 8001b24:	290b      	cmp	r1, #11
 8001b26:	d917      	bls.n	8001b58 <_malloc_r+0xc0>
 8001b28:	19e2      	adds	r2, r4, r7
 8001b2a:	6027      	str	r7, [r4, #0]
 8001b2c:	42a3      	cmp	r3, r4
 8001b2e:	d111      	bne.n	8001b54 <_malloc_r+0xbc>
 8001b30:	602a      	str	r2, [r5, #0]
 8001b32:	6863      	ldr	r3, [r4, #4]
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	6053      	str	r3, [r2, #4]
 8001b38:	0030      	movs	r0, r6
 8001b3a:	0025      	movs	r5, r4
 8001b3c:	f000 f85c 	bl	8001bf8 <__malloc_unlock>
 8001b40:	2207      	movs	r2, #7
 8001b42:	350b      	adds	r5, #11
 8001b44:	1d23      	adds	r3, r4, #4
 8001b46:	4395      	bics	r5, r2
 8001b48:	1aea      	subs	r2, r5, r3
 8001b4a:	429d      	cmp	r5, r3
 8001b4c:	d0e5      	beq.n	8001b1a <_malloc_r+0x82>
 8001b4e:	1b5b      	subs	r3, r3, r5
 8001b50:	50a3      	str	r3, [r4, r2]
 8001b52:	e7e2      	b.n	8001b1a <_malloc_r+0x82>
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	e7ec      	b.n	8001b32 <_malloc_r+0x9a>
 8001b58:	6862      	ldr	r2, [r4, #4]
 8001b5a:	42a3      	cmp	r3, r4
 8001b5c:	d101      	bne.n	8001b62 <_malloc_r+0xca>
 8001b5e:	602a      	str	r2, [r5, #0]
 8001b60:	e7ea      	b.n	8001b38 <_malloc_r+0xa0>
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	e7e8      	b.n	8001b38 <_malloc_r+0xa0>
 8001b66:	0023      	movs	r3, r4
 8001b68:	6864      	ldr	r4, [r4, #4]
 8001b6a:	e7a7      	b.n	8001abc <_malloc_r+0x24>
 8001b6c:	002c      	movs	r4, r5
 8001b6e:	686d      	ldr	r5, [r5, #4]
 8001b70:	e7af      	b.n	8001ad2 <_malloc_r+0x3a>
 8001b72:	230c      	movs	r3, #12
 8001b74:	0030      	movs	r0, r6
 8001b76:	6033      	str	r3, [r6, #0]
 8001b78:	f000 f83e 	bl	8001bf8 <__malloc_unlock>
 8001b7c:	e7cd      	b.n	8001b1a <_malloc_r+0x82>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	20000128 	.word	0x20000128

08001b84 <_sbrk_r>:
 8001b84:	2300      	movs	r3, #0
 8001b86:	b570      	push	{r4, r5, r6, lr}
 8001b88:	4d06      	ldr	r5, [pc, #24]	; (8001ba4 <_sbrk_r+0x20>)
 8001b8a:	0004      	movs	r4, r0
 8001b8c:	0008      	movs	r0, r1
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	f000 fba0 	bl	80022d4 <_sbrk>
 8001b94:	1c43      	adds	r3, r0, #1
 8001b96:	d103      	bne.n	8001ba0 <_sbrk_r+0x1c>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d000      	beq.n	8001ba0 <_sbrk_r+0x1c>
 8001b9e:	6023      	str	r3, [r4, #0]
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	20000130 	.word	0x20000130

08001ba8 <siprintf>:
 8001ba8:	b40e      	push	{r1, r2, r3}
 8001baa:	b500      	push	{lr}
 8001bac:	490b      	ldr	r1, [pc, #44]	; (8001bdc <siprintf+0x34>)
 8001bae:	b09c      	sub	sp, #112	; 0x70
 8001bb0:	ab1d      	add	r3, sp, #116	; 0x74
 8001bb2:	9002      	str	r0, [sp, #8]
 8001bb4:	9006      	str	r0, [sp, #24]
 8001bb6:	9107      	str	r1, [sp, #28]
 8001bb8:	9104      	str	r1, [sp, #16]
 8001bba:	4809      	ldr	r0, [pc, #36]	; (8001be0 <siprintf+0x38>)
 8001bbc:	4909      	ldr	r1, [pc, #36]	; (8001be4 <siprintf+0x3c>)
 8001bbe:	cb04      	ldmia	r3!, {r2}
 8001bc0:	9105      	str	r1, [sp, #20]
 8001bc2:	6800      	ldr	r0, [r0, #0]
 8001bc4:	a902      	add	r1, sp, #8
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	f000 f880 	bl	8001ccc <_svfiprintf_r>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9a02      	ldr	r2, [sp, #8]
 8001bd0:	7013      	strb	r3, [r2, #0]
 8001bd2:	b01c      	add	sp, #112	; 0x70
 8001bd4:	bc08      	pop	{r3}
 8001bd6:	b003      	add	sp, #12
 8001bd8:	4718      	bx	r3
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	7fffffff 	.word	0x7fffffff
 8001be0:	20000004 	.word	0x20000004
 8001be4:	ffff0208 	.word	0xffff0208

08001be8 <__malloc_lock>:
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <__malloc_lock+0xc>)
 8001bec:	f000 faf0 	bl	80021d0 <__retarget_lock_acquire_recursive>
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000134 	.word	0x20000134

08001bf8 <__malloc_unlock>:
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <__malloc_unlock+0xc>)
 8001bfc:	f000 fae9 	bl	80021d2 <__retarget_lock_release_recursive>
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	20000134 	.word	0x20000134

08001c08 <__ssputs_r>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	688e      	ldr	r6, [r1, #8]
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	0007      	movs	r7, r0
 8001c10:	000c      	movs	r4, r1
 8001c12:	9203      	str	r2, [sp, #12]
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	429e      	cmp	r6, r3
 8001c18:	d83c      	bhi.n	8001c94 <__ssputs_r+0x8c>
 8001c1a:	2390      	movs	r3, #144	; 0x90
 8001c1c:	898a      	ldrh	r2, [r1, #12]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	421a      	tst	r2, r3
 8001c22:	d034      	beq.n	8001c8e <__ssputs_r+0x86>
 8001c24:	6909      	ldr	r1, [r1, #16]
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	6960      	ldr	r0, [r4, #20]
 8001c2a:	1a5b      	subs	r3, r3, r1
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2303      	movs	r3, #3
 8001c30:	4343      	muls	r3, r0
 8001c32:	0fdd      	lsrs	r5, r3, #31
 8001c34:	18ed      	adds	r5, r5, r3
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	9802      	ldr	r0, [sp, #8]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	181b      	adds	r3, r3, r0
 8001c3e:	106d      	asrs	r5, r5, #1
 8001c40:	42ab      	cmp	r3, r5
 8001c42:	d900      	bls.n	8001c46 <__ssputs_r+0x3e>
 8001c44:	001d      	movs	r5, r3
 8001c46:	0553      	lsls	r3, r2, #21
 8001c48:	d532      	bpl.n	8001cb0 <__ssputs_r+0xa8>
 8001c4a:	0029      	movs	r1, r5
 8001c4c:	0038      	movs	r0, r7
 8001c4e:	f7ff ff23 	bl	8001a98 <_malloc_r>
 8001c52:	1e06      	subs	r6, r0, #0
 8001c54:	d109      	bne.n	8001c6a <__ssputs_r+0x62>
 8001c56:	230c      	movs	r3, #12
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	2340      	movs	r3, #64	; 0x40
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	89a2      	ldrh	r2, [r4, #12]
 8001c60:	4240      	negs	r0, r0
 8001c62:	4313      	orrs	r3, r2
 8001c64:	81a3      	strh	r3, [r4, #12]
 8001c66:	b005      	add	sp, #20
 8001c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c6a:	9a02      	ldr	r2, [sp, #8]
 8001c6c:	6921      	ldr	r1, [r4, #16]
 8001c6e:	f7ff fe95 	bl	800199c <memcpy>
 8001c72:	89a3      	ldrh	r3, [r4, #12]
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <__ssputs_r+0xc0>)
 8001c76:	401a      	ands	r2, r3
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	81a3      	strh	r3, [r4, #12]
 8001c7e:	9b02      	ldr	r3, [sp, #8]
 8001c80:	6126      	str	r6, [r4, #16]
 8001c82:	18f6      	adds	r6, r6, r3
 8001c84:	6026      	str	r6, [r4, #0]
 8001c86:	6165      	str	r5, [r4, #20]
 8001c88:	9e01      	ldr	r6, [sp, #4]
 8001c8a:	1aed      	subs	r5, r5, r3
 8001c8c:	60a5      	str	r5, [r4, #8]
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	429e      	cmp	r6, r3
 8001c92:	d900      	bls.n	8001c96 <__ssputs_r+0x8e>
 8001c94:	9e01      	ldr	r6, [sp, #4]
 8001c96:	0032      	movs	r2, r6
 8001c98:	9903      	ldr	r1, [sp, #12]
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	f000 faa5 	bl	80021ea <memmove>
 8001ca0:	68a3      	ldr	r3, [r4, #8]
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	1b9b      	subs	r3, r3, r6
 8001ca6:	60a3      	str	r3, [r4, #8]
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	199e      	adds	r6, r3, r6
 8001cac:	6026      	str	r6, [r4, #0]
 8001cae:	e7da      	b.n	8001c66 <__ssputs_r+0x5e>
 8001cb0:	002a      	movs	r2, r5
 8001cb2:	0038      	movs	r0, r7
 8001cb4:	f000 faac 	bl	8002210 <_realloc_r>
 8001cb8:	1e06      	subs	r6, r0, #0
 8001cba:	d1e0      	bne.n	8001c7e <__ssputs_r+0x76>
 8001cbc:	0038      	movs	r0, r7
 8001cbe:	6921      	ldr	r1, [r4, #16]
 8001cc0:	f7ff fe7e 	bl	80019c0 <_free_r>
 8001cc4:	e7c7      	b.n	8001c56 <__ssputs_r+0x4e>
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	fffffb7f 	.word	0xfffffb7f

08001ccc <_svfiprintf_r>:
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	b0a1      	sub	sp, #132	; 0x84
 8001cd0:	9003      	str	r0, [sp, #12]
 8001cd2:	001d      	movs	r5, r3
 8001cd4:	898b      	ldrh	r3, [r1, #12]
 8001cd6:	000f      	movs	r7, r1
 8001cd8:	0016      	movs	r6, r2
 8001cda:	061b      	lsls	r3, r3, #24
 8001cdc:	d511      	bpl.n	8001d02 <_svfiprintf_r+0x36>
 8001cde:	690b      	ldr	r3, [r1, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10e      	bne.n	8001d02 <_svfiprintf_r+0x36>
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	f7ff fed7 	bl	8001a98 <_malloc_r>
 8001cea:	6038      	str	r0, [r7, #0]
 8001cec:	6138      	str	r0, [r7, #16]
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	d105      	bne.n	8001cfe <_svfiprintf_r+0x32>
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	9a03      	ldr	r2, [sp, #12]
 8001cf6:	3801      	subs	r0, #1
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	b021      	add	sp, #132	; 0x84
 8001cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfe:	2340      	movs	r3, #64	; 0x40
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	2300      	movs	r3, #0
 8001d04:	ac08      	add	r4, sp, #32
 8001d06:	6163      	str	r3, [r4, #20]
 8001d08:	3320      	adds	r3, #32
 8001d0a:	7663      	strb	r3, [r4, #25]
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	76a3      	strb	r3, [r4, #26]
 8001d10:	9507      	str	r5, [sp, #28]
 8001d12:	0035      	movs	r5, r6
 8001d14:	782b      	ldrb	r3, [r5, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <_svfiprintf_r+0x52>
 8001d1a:	2b25      	cmp	r3, #37	; 0x25
 8001d1c:	d147      	bne.n	8001dae <_svfiprintf_r+0xe2>
 8001d1e:	1bab      	subs	r3, r5, r6
 8001d20:	9305      	str	r3, [sp, #20]
 8001d22:	42b5      	cmp	r5, r6
 8001d24:	d00c      	beq.n	8001d40 <_svfiprintf_r+0x74>
 8001d26:	0032      	movs	r2, r6
 8001d28:	0039      	movs	r1, r7
 8001d2a:	9803      	ldr	r0, [sp, #12]
 8001d2c:	f7ff ff6c 	bl	8001c08 <__ssputs_r>
 8001d30:	1c43      	adds	r3, r0, #1
 8001d32:	d100      	bne.n	8001d36 <_svfiprintf_r+0x6a>
 8001d34:	e0ae      	b.n	8001e94 <_svfiprintf_r+0x1c8>
 8001d36:	6962      	ldr	r2, [r4, #20]
 8001d38:	9b05      	ldr	r3, [sp, #20]
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	4463      	add	r3, ip
 8001d3e:	6163      	str	r3, [r4, #20]
 8001d40:	782b      	ldrb	r3, [r5, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d100      	bne.n	8001d48 <_svfiprintf_r+0x7c>
 8001d46:	e0a5      	b.n	8001e94 <_svfiprintf_r+0x1c8>
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	4252      	negs	r2, r2
 8001d4e:	6062      	str	r2, [r4, #4]
 8001d50:	a904      	add	r1, sp, #16
 8001d52:	3254      	adds	r2, #84	; 0x54
 8001d54:	1852      	adds	r2, r2, r1
 8001d56:	1c6e      	adds	r6, r5, #1
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	60e3      	str	r3, [r4, #12]
 8001d5c:	60a3      	str	r3, [r4, #8]
 8001d5e:	7013      	strb	r3, [r2, #0]
 8001d60:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d62:	2205      	movs	r2, #5
 8001d64:	7831      	ldrb	r1, [r6, #0]
 8001d66:	4854      	ldr	r0, [pc, #336]	; (8001eb8 <_svfiprintf_r+0x1ec>)
 8001d68:	f000 fa34 	bl	80021d4 <memchr>
 8001d6c:	1c75      	adds	r5, r6, #1
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d11f      	bne.n	8001db2 <_svfiprintf_r+0xe6>
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	06d3      	lsls	r3, r2, #27
 8001d76:	d504      	bpl.n	8001d82 <_svfiprintf_r+0xb6>
 8001d78:	2353      	movs	r3, #83	; 0x53
 8001d7a:	a904      	add	r1, sp, #16
 8001d7c:	185b      	adds	r3, r3, r1
 8001d7e:	2120      	movs	r1, #32
 8001d80:	7019      	strb	r1, [r3, #0]
 8001d82:	0713      	lsls	r3, r2, #28
 8001d84:	d504      	bpl.n	8001d90 <_svfiprintf_r+0xc4>
 8001d86:	2353      	movs	r3, #83	; 0x53
 8001d88:	a904      	add	r1, sp, #16
 8001d8a:	185b      	adds	r3, r3, r1
 8001d8c:	212b      	movs	r1, #43	; 0x2b
 8001d8e:	7019      	strb	r1, [r3, #0]
 8001d90:	7833      	ldrb	r3, [r6, #0]
 8001d92:	2b2a      	cmp	r3, #42	; 0x2a
 8001d94:	d016      	beq.n	8001dc4 <_svfiprintf_r+0xf8>
 8001d96:	0035      	movs	r5, r6
 8001d98:	2100      	movs	r1, #0
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	68e3      	ldr	r3, [r4, #12]
 8001d9e:	782a      	ldrb	r2, [r5, #0]
 8001da0:	1c6e      	adds	r6, r5, #1
 8001da2:	3a30      	subs	r2, #48	; 0x30
 8001da4:	2a09      	cmp	r2, #9
 8001da6:	d94e      	bls.n	8001e46 <_svfiprintf_r+0x17a>
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d111      	bne.n	8001dd0 <_svfiprintf_r+0x104>
 8001dac:	e017      	b.n	8001dde <_svfiprintf_r+0x112>
 8001dae:	3501      	adds	r5, #1
 8001db0:	e7b0      	b.n	8001d14 <_svfiprintf_r+0x48>
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <_svfiprintf_r+0x1ec>)
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	1ac0      	subs	r0, r0, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	4083      	lsls	r3, r0
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	002e      	movs	r6, r5
 8001dc0:	6023      	str	r3, [r4, #0]
 8001dc2:	e7ce      	b.n	8001d62 <_svfiprintf_r+0x96>
 8001dc4:	9b07      	ldr	r3, [sp, #28]
 8001dc6:	1d19      	adds	r1, r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	9107      	str	r1, [sp, #28]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db01      	blt.n	8001dd4 <_svfiprintf_r+0x108>
 8001dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001dd2:	e004      	b.n	8001dde <_svfiprintf_r+0x112>
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	60e3      	str	r3, [r4, #12]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	782b      	ldrb	r3, [r5, #0]
 8001de0:	2b2e      	cmp	r3, #46	; 0x2e
 8001de2:	d10a      	bne.n	8001dfa <_svfiprintf_r+0x12e>
 8001de4:	786b      	ldrb	r3, [r5, #1]
 8001de6:	2b2a      	cmp	r3, #42	; 0x2a
 8001de8:	d135      	bne.n	8001e56 <_svfiprintf_r+0x18a>
 8001dea:	9b07      	ldr	r3, [sp, #28]
 8001dec:	3502      	adds	r5, #2
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	9207      	str	r2, [sp, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db2b      	blt.n	8001e50 <_svfiprintf_r+0x184>
 8001df8:	9309      	str	r3, [sp, #36]	; 0x24
 8001dfa:	4e30      	ldr	r6, [pc, #192]	; (8001ebc <_svfiprintf_r+0x1f0>)
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	0030      	movs	r0, r6
 8001e00:	7829      	ldrb	r1, [r5, #0]
 8001e02:	f000 f9e7 	bl	80021d4 <memchr>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d006      	beq.n	8001e18 <_svfiprintf_r+0x14c>
 8001e0a:	2340      	movs	r3, #64	; 0x40
 8001e0c:	1b80      	subs	r0, r0, r6
 8001e0e:	4083      	lsls	r3, r0
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	3501      	adds	r5, #1
 8001e14:	4313      	orrs	r3, r2
 8001e16:	6023      	str	r3, [r4, #0]
 8001e18:	7829      	ldrb	r1, [r5, #0]
 8001e1a:	2206      	movs	r2, #6
 8001e1c:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <_svfiprintf_r+0x1f4>)
 8001e1e:	1c6e      	adds	r6, r5, #1
 8001e20:	7621      	strb	r1, [r4, #24]
 8001e22:	f000 f9d7 	bl	80021d4 <memchr>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d03c      	beq.n	8001ea4 <_svfiprintf_r+0x1d8>
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <_svfiprintf_r+0x1f8>)
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d125      	bne.n	8001e7c <_svfiprintf_r+0x1b0>
 8001e30:	2207      	movs	r2, #7
 8001e32:	9b07      	ldr	r3, [sp, #28]
 8001e34:	3307      	adds	r3, #7
 8001e36:	4393      	bics	r3, r2
 8001e38:	3308      	adds	r3, #8
 8001e3a:	9307      	str	r3, [sp, #28]
 8001e3c:	6963      	ldr	r3, [r4, #20]
 8001e3e:	9a04      	ldr	r2, [sp, #16]
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	6163      	str	r3, [r4, #20]
 8001e44:	e765      	b.n	8001d12 <_svfiprintf_r+0x46>
 8001e46:	4343      	muls	r3, r0
 8001e48:	0035      	movs	r5, r6
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	189b      	adds	r3, r3, r2
 8001e4e:	e7a6      	b.n	8001d9e <_svfiprintf_r+0xd2>
 8001e50:	2301      	movs	r3, #1
 8001e52:	425b      	negs	r3, r3
 8001e54:	e7d0      	b.n	8001df8 <_svfiprintf_r+0x12c>
 8001e56:	2300      	movs	r3, #0
 8001e58:	200a      	movs	r0, #10
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	3501      	adds	r5, #1
 8001e5e:	6063      	str	r3, [r4, #4]
 8001e60:	7829      	ldrb	r1, [r5, #0]
 8001e62:	1c6e      	adds	r6, r5, #1
 8001e64:	3930      	subs	r1, #48	; 0x30
 8001e66:	2909      	cmp	r1, #9
 8001e68:	d903      	bls.n	8001e72 <_svfiprintf_r+0x1a6>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0c5      	beq.n	8001dfa <_svfiprintf_r+0x12e>
 8001e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8001e70:	e7c3      	b.n	8001dfa <_svfiprintf_r+0x12e>
 8001e72:	4342      	muls	r2, r0
 8001e74:	0035      	movs	r5, r6
 8001e76:	2301      	movs	r3, #1
 8001e78:	1852      	adds	r2, r2, r1
 8001e7a:	e7f1      	b.n	8001e60 <_svfiprintf_r+0x194>
 8001e7c:	ab07      	add	r3, sp, #28
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	003a      	movs	r2, r7
 8001e82:	0021      	movs	r1, r4
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_svfiprintf_r+0x1fc>)
 8001e86:	9803      	ldr	r0, [sp, #12]
 8001e88:	e000      	b.n	8001e8c <_svfiprintf_r+0x1c0>
 8001e8a:	bf00      	nop
 8001e8c:	9004      	str	r0, [sp, #16]
 8001e8e:	9b04      	ldr	r3, [sp, #16]
 8001e90:	3301      	adds	r3, #1
 8001e92:	d1d3      	bne.n	8001e3c <_svfiprintf_r+0x170>
 8001e94:	89bb      	ldrh	r3, [r7, #12]
 8001e96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001e98:	065b      	lsls	r3, r3, #25
 8001e9a:	d400      	bmi.n	8001e9e <_svfiprintf_r+0x1d2>
 8001e9c:	e72d      	b.n	8001cfa <_svfiprintf_r+0x2e>
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	4240      	negs	r0, r0
 8001ea2:	e72a      	b.n	8001cfa <_svfiprintf_r+0x2e>
 8001ea4:	ab07      	add	r3, sp, #28
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	0021      	movs	r1, r4
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <_svfiprintf_r+0x1fc>)
 8001eae:	9803      	ldr	r0, [sp, #12]
 8001eb0:	f000 f87c 	bl	8001fac <_printf_i>
 8001eb4:	e7ea      	b.n	8001e8c <_svfiprintf_r+0x1c0>
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	080023f0 	.word	0x080023f0
 8001ebc:	080023f6 	.word	0x080023f6
 8001ec0:	080023fa 	.word	0x080023fa
 8001ec4:	00000000 	.word	0x00000000
 8001ec8:	08001c09 	.word	0x08001c09

08001ecc <_printf_common>:
 8001ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ece:	0015      	movs	r5, r2
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	688a      	ldr	r2, [r1, #8]
 8001ed4:	690b      	ldr	r3, [r1, #16]
 8001ed6:	000c      	movs	r4, r1
 8001ed8:	9000      	str	r0, [sp, #0]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	da00      	bge.n	8001ee0 <_printf_common+0x14>
 8001ede:	0013      	movs	r3, r2
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	602b      	str	r3, [r5, #0]
 8001ee4:	3243      	adds	r2, #67	; 0x43
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d001      	beq.n	8001ef0 <_printf_common+0x24>
 8001eec:	3301      	adds	r3, #1
 8001eee:	602b      	str	r3, [r5, #0]
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	069b      	lsls	r3, r3, #26
 8001ef4:	d502      	bpl.n	8001efc <_printf_common+0x30>
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	602b      	str	r3, [r5, #0]
 8001efc:	6822      	ldr	r2, [r4, #0]
 8001efe:	2306      	movs	r3, #6
 8001f00:	0017      	movs	r7, r2
 8001f02:	401f      	ands	r7, r3
 8001f04:	421a      	tst	r2, r3
 8001f06:	d027      	beq.n	8001f58 <_printf_common+0x8c>
 8001f08:	0023      	movs	r3, r4
 8001f0a:	3343      	adds	r3, #67	; 0x43
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	4193      	sbcs	r3, r2
 8001f12:	6822      	ldr	r2, [r4, #0]
 8001f14:	0692      	lsls	r2, r2, #26
 8001f16:	d430      	bmi.n	8001f7a <_printf_common+0xae>
 8001f18:	0022      	movs	r2, r4
 8001f1a:	9901      	ldr	r1, [sp, #4]
 8001f1c:	9800      	ldr	r0, [sp, #0]
 8001f1e:	9e08      	ldr	r6, [sp, #32]
 8001f20:	3243      	adds	r2, #67	; 0x43
 8001f22:	47b0      	blx	r6
 8001f24:	1c43      	adds	r3, r0, #1
 8001f26:	d025      	beq.n	8001f74 <_printf_common+0xa8>
 8001f28:	2306      	movs	r3, #6
 8001f2a:	6820      	ldr	r0, [r4, #0]
 8001f2c:	682a      	ldr	r2, [r5, #0]
 8001f2e:	68e1      	ldr	r1, [r4, #12]
 8001f30:	2500      	movs	r5, #0
 8001f32:	4003      	ands	r3, r0
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d103      	bne.n	8001f40 <_printf_common+0x74>
 8001f38:	1a8d      	subs	r5, r1, r2
 8001f3a:	43eb      	mvns	r3, r5
 8001f3c:	17db      	asrs	r3, r3, #31
 8001f3e:	401d      	ands	r5, r3
 8001f40:	68a3      	ldr	r3, [r4, #8]
 8001f42:	6922      	ldr	r2, [r4, #16]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	dd01      	ble.n	8001f4c <_printf_common+0x80>
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	18ed      	adds	r5, r5, r3
 8001f4c:	2700      	movs	r7, #0
 8001f4e:	42bd      	cmp	r5, r7
 8001f50:	d120      	bne.n	8001f94 <_printf_common+0xc8>
 8001f52:	2000      	movs	r0, #0
 8001f54:	e010      	b.n	8001f78 <_printf_common+0xac>
 8001f56:	3701      	adds	r7, #1
 8001f58:	68e3      	ldr	r3, [r4, #12]
 8001f5a:	682a      	ldr	r2, [r5, #0]
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	42bb      	cmp	r3, r7
 8001f60:	ddd2      	ble.n	8001f08 <_printf_common+0x3c>
 8001f62:	0022      	movs	r2, r4
 8001f64:	2301      	movs	r3, #1
 8001f66:	9901      	ldr	r1, [sp, #4]
 8001f68:	9800      	ldr	r0, [sp, #0]
 8001f6a:	9e08      	ldr	r6, [sp, #32]
 8001f6c:	3219      	adds	r2, #25
 8001f6e:	47b0      	blx	r6
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d1f0      	bne.n	8001f56 <_printf_common+0x8a>
 8001f74:	2001      	movs	r0, #1
 8001f76:	4240      	negs	r0, r0
 8001f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001f7a:	2030      	movs	r0, #48	; 0x30
 8001f7c:	18e1      	adds	r1, r4, r3
 8001f7e:	3143      	adds	r1, #67	; 0x43
 8001f80:	7008      	strb	r0, [r1, #0]
 8001f82:	0021      	movs	r1, r4
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	3145      	adds	r1, #69	; 0x45
 8001f88:	7809      	ldrb	r1, [r1, #0]
 8001f8a:	18a2      	adds	r2, r4, r2
 8001f8c:	3243      	adds	r2, #67	; 0x43
 8001f8e:	3302      	adds	r3, #2
 8001f90:	7011      	strb	r1, [r2, #0]
 8001f92:	e7c1      	b.n	8001f18 <_printf_common+0x4c>
 8001f94:	0022      	movs	r2, r4
 8001f96:	2301      	movs	r3, #1
 8001f98:	9901      	ldr	r1, [sp, #4]
 8001f9a:	9800      	ldr	r0, [sp, #0]
 8001f9c:	9e08      	ldr	r6, [sp, #32]
 8001f9e:	321a      	adds	r2, #26
 8001fa0:	47b0      	blx	r6
 8001fa2:	1c43      	adds	r3, r0, #1
 8001fa4:	d0e6      	beq.n	8001f74 <_printf_common+0xa8>
 8001fa6:	3701      	adds	r7, #1
 8001fa8:	e7d1      	b.n	8001f4e <_printf_common+0x82>
	...

08001fac <_printf_i>:
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	b08b      	sub	sp, #44	; 0x2c
 8001fb0:	9206      	str	r2, [sp, #24]
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	3243      	adds	r2, #67	; 0x43
 8001fb6:	9307      	str	r3, [sp, #28]
 8001fb8:	9005      	str	r0, [sp, #20]
 8001fba:	9204      	str	r2, [sp, #16]
 8001fbc:	7e0a      	ldrb	r2, [r1, #24]
 8001fbe:	000c      	movs	r4, r1
 8001fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001fc2:	2a78      	cmp	r2, #120	; 0x78
 8001fc4:	d807      	bhi.n	8001fd6 <_printf_i+0x2a>
 8001fc6:	2a62      	cmp	r2, #98	; 0x62
 8001fc8:	d809      	bhi.n	8001fde <_printf_i+0x32>
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d100      	bne.n	8001fd0 <_printf_i+0x24>
 8001fce:	e0c1      	b.n	8002154 <_printf_i+0x1a8>
 8001fd0:	2a58      	cmp	r2, #88	; 0x58
 8001fd2:	d100      	bne.n	8001fd6 <_printf_i+0x2a>
 8001fd4:	e08c      	b.n	80020f0 <_printf_i+0x144>
 8001fd6:	0026      	movs	r6, r4
 8001fd8:	3642      	adds	r6, #66	; 0x42
 8001fda:	7032      	strb	r2, [r6, #0]
 8001fdc:	e022      	b.n	8002024 <_printf_i+0x78>
 8001fde:	0010      	movs	r0, r2
 8001fe0:	3863      	subs	r0, #99	; 0x63
 8001fe2:	2815      	cmp	r0, #21
 8001fe4:	d8f7      	bhi.n	8001fd6 <_printf_i+0x2a>
 8001fe6:	f7fe f88f 	bl	8000108 <__gnu_thumb1_case_shi>
 8001fea:	0016      	.short	0x0016
 8001fec:	fff6001f 	.word	0xfff6001f
 8001ff0:	fff6fff6 	.word	0xfff6fff6
 8001ff4:	001ffff6 	.word	0x001ffff6
 8001ff8:	fff6fff6 	.word	0xfff6fff6
 8001ffc:	fff6fff6 	.word	0xfff6fff6
 8002000:	003600a8 	.word	0x003600a8
 8002004:	fff6009a 	.word	0xfff6009a
 8002008:	00b9fff6 	.word	0x00b9fff6
 800200c:	0036fff6 	.word	0x0036fff6
 8002010:	fff6fff6 	.word	0xfff6fff6
 8002014:	009e      	.short	0x009e
 8002016:	0026      	movs	r6, r4
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	3642      	adds	r6, #66	; 0x42
 800201c:	1d11      	adds	r1, r2, #4
 800201e:	6019      	str	r1, [r3, #0]
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	7033      	strb	r3, [r6, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	e0a7      	b.n	8002178 <_printf_i+0x1cc>
 8002028:	6808      	ldr	r0, [r1, #0]
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	1d0a      	adds	r2, r1, #4
 800202e:	0605      	lsls	r5, r0, #24
 8002030:	d50b      	bpl.n	800204a <_printf_i+0x9e>
 8002032:	680d      	ldr	r5, [r1, #0]
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	2d00      	cmp	r5, #0
 8002038:	da03      	bge.n	8002042 <_printf_i+0x96>
 800203a:	232d      	movs	r3, #45	; 0x2d
 800203c:	9a04      	ldr	r2, [sp, #16]
 800203e:	426d      	negs	r5, r5
 8002040:	7013      	strb	r3, [r2, #0]
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <_printf_i+0x21c>)
 8002044:	270a      	movs	r7, #10
 8002046:	9303      	str	r3, [sp, #12]
 8002048:	e01b      	b.n	8002082 <_printf_i+0xd6>
 800204a:	680d      	ldr	r5, [r1, #0]
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	0641      	lsls	r1, r0, #25
 8002050:	d5f1      	bpl.n	8002036 <_printf_i+0x8a>
 8002052:	b22d      	sxth	r5, r5
 8002054:	e7ef      	b.n	8002036 <_printf_i+0x8a>
 8002056:	680d      	ldr	r5, [r1, #0]
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	1d08      	adds	r0, r1, #4
 800205c:	6018      	str	r0, [r3, #0]
 800205e:	062e      	lsls	r6, r5, #24
 8002060:	d501      	bpl.n	8002066 <_printf_i+0xba>
 8002062:	680d      	ldr	r5, [r1, #0]
 8002064:	e003      	b.n	800206e <_printf_i+0xc2>
 8002066:	066d      	lsls	r5, r5, #25
 8002068:	d5fb      	bpl.n	8002062 <_printf_i+0xb6>
 800206a:	680d      	ldr	r5, [r1, #0]
 800206c:	b2ad      	uxth	r5, r5
 800206e:	4b56      	ldr	r3, [pc, #344]	; (80021c8 <_printf_i+0x21c>)
 8002070:	2708      	movs	r7, #8
 8002072:	9303      	str	r3, [sp, #12]
 8002074:	2a6f      	cmp	r2, #111	; 0x6f
 8002076:	d000      	beq.n	800207a <_printf_i+0xce>
 8002078:	3702      	adds	r7, #2
 800207a:	0023      	movs	r3, r4
 800207c:	2200      	movs	r2, #0
 800207e:	3343      	adds	r3, #67	; 0x43
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	6863      	ldr	r3, [r4, #4]
 8002084:	60a3      	str	r3, [r4, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db03      	blt.n	8002092 <_printf_i+0xe6>
 800208a:	2204      	movs	r2, #4
 800208c:	6821      	ldr	r1, [r4, #0]
 800208e:	4391      	bics	r1, r2
 8002090:	6021      	str	r1, [r4, #0]
 8002092:	2d00      	cmp	r5, #0
 8002094:	d102      	bne.n	800209c <_printf_i+0xf0>
 8002096:	9e04      	ldr	r6, [sp, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <_printf_i+0x10a>
 800209c:	9e04      	ldr	r6, [sp, #16]
 800209e:	0028      	movs	r0, r5
 80020a0:	0039      	movs	r1, r7
 80020a2:	f7fe f8c1 	bl	8000228 <__aeabi_uidivmod>
 80020a6:	9b03      	ldr	r3, [sp, #12]
 80020a8:	3e01      	subs	r6, #1
 80020aa:	5c5b      	ldrb	r3, [r3, r1]
 80020ac:	7033      	strb	r3, [r6, #0]
 80020ae:	002b      	movs	r3, r5
 80020b0:	0005      	movs	r5, r0
 80020b2:	429f      	cmp	r7, r3
 80020b4:	d9f3      	bls.n	800209e <_printf_i+0xf2>
 80020b6:	2f08      	cmp	r7, #8
 80020b8:	d109      	bne.n	80020ce <_printf_i+0x122>
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	07db      	lsls	r3, r3, #31
 80020be:	d506      	bpl.n	80020ce <_printf_i+0x122>
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	6922      	ldr	r2, [r4, #16]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	dc02      	bgt.n	80020ce <_printf_i+0x122>
 80020c8:	2330      	movs	r3, #48	; 0x30
 80020ca:	3e01      	subs	r6, #1
 80020cc:	7033      	strb	r3, [r6, #0]
 80020ce:	9b04      	ldr	r3, [sp, #16]
 80020d0:	1b9b      	subs	r3, r3, r6
 80020d2:	6123      	str	r3, [r4, #16]
 80020d4:	9b07      	ldr	r3, [sp, #28]
 80020d6:	0021      	movs	r1, r4
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	9805      	ldr	r0, [sp, #20]
 80020dc:	9b06      	ldr	r3, [sp, #24]
 80020de:	aa09      	add	r2, sp, #36	; 0x24
 80020e0:	f7ff fef4 	bl	8001ecc <_printf_common>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d14c      	bne.n	8002182 <_printf_i+0x1d6>
 80020e8:	2001      	movs	r0, #1
 80020ea:	4240      	negs	r0, r0
 80020ec:	b00b      	add	sp, #44	; 0x2c
 80020ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f0:	3145      	adds	r1, #69	; 0x45
 80020f2:	700a      	strb	r2, [r1, #0]
 80020f4:	4a34      	ldr	r2, [pc, #208]	; (80021c8 <_printf_i+0x21c>)
 80020f6:	9203      	str	r2, [sp, #12]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	6821      	ldr	r1, [r4, #0]
 80020fc:	ca20      	ldmia	r2!, {r5}
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	0608      	lsls	r0, r1, #24
 8002102:	d516      	bpl.n	8002132 <_printf_i+0x186>
 8002104:	07cb      	lsls	r3, r1, #31
 8002106:	d502      	bpl.n	800210e <_printf_i+0x162>
 8002108:	2320      	movs	r3, #32
 800210a:	4319      	orrs	r1, r3
 800210c:	6021      	str	r1, [r4, #0]
 800210e:	2710      	movs	r7, #16
 8002110:	2d00      	cmp	r5, #0
 8002112:	d1b2      	bne.n	800207a <_printf_i+0xce>
 8002114:	2320      	movs	r3, #32
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	439a      	bics	r2, r3
 800211a:	6022      	str	r2, [r4, #0]
 800211c:	e7ad      	b.n	800207a <_printf_i+0xce>
 800211e:	2220      	movs	r2, #32
 8002120:	6809      	ldr	r1, [r1, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	6022      	str	r2, [r4, #0]
 8002126:	0022      	movs	r2, r4
 8002128:	2178      	movs	r1, #120	; 0x78
 800212a:	3245      	adds	r2, #69	; 0x45
 800212c:	7011      	strb	r1, [r2, #0]
 800212e:	4a27      	ldr	r2, [pc, #156]	; (80021cc <_printf_i+0x220>)
 8002130:	e7e1      	b.n	80020f6 <_printf_i+0x14a>
 8002132:	0648      	lsls	r0, r1, #25
 8002134:	d5e6      	bpl.n	8002104 <_printf_i+0x158>
 8002136:	b2ad      	uxth	r5, r5
 8002138:	e7e4      	b.n	8002104 <_printf_i+0x158>
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	680d      	ldr	r5, [r1, #0]
 800213e:	1d10      	adds	r0, r2, #4
 8002140:	6949      	ldr	r1, [r1, #20]
 8002142:	6018      	str	r0, [r3, #0]
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	062e      	lsls	r6, r5, #24
 8002148:	d501      	bpl.n	800214e <_printf_i+0x1a2>
 800214a:	6019      	str	r1, [r3, #0]
 800214c:	e002      	b.n	8002154 <_printf_i+0x1a8>
 800214e:	066d      	lsls	r5, r5, #25
 8002150:	d5fb      	bpl.n	800214a <_printf_i+0x19e>
 8002152:	8019      	strh	r1, [r3, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	9e04      	ldr	r6, [sp, #16]
 8002158:	6123      	str	r3, [r4, #16]
 800215a:	e7bb      	b.n	80020d4 <_printf_i+0x128>
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	1d11      	adds	r1, r2, #4
 8002160:	6019      	str	r1, [r3, #0]
 8002162:	6816      	ldr	r6, [r2, #0]
 8002164:	2100      	movs	r1, #0
 8002166:	0030      	movs	r0, r6
 8002168:	6862      	ldr	r2, [r4, #4]
 800216a:	f000 f833 	bl	80021d4 <memchr>
 800216e:	2800      	cmp	r0, #0
 8002170:	d001      	beq.n	8002176 <_printf_i+0x1ca>
 8002172:	1b80      	subs	r0, r0, r6
 8002174:	6060      	str	r0, [r4, #4]
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	6123      	str	r3, [r4, #16]
 800217a:	2300      	movs	r3, #0
 800217c:	9a04      	ldr	r2, [sp, #16]
 800217e:	7013      	strb	r3, [r2, #0]
 8002180:	e7a8      	b.n	80020d4 <_printf_i+0x128>
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	0032      	movs	r2, r6
 8002186:	9906      	ldr	r1, [sp, #24]
 8002188:	9805      	ldr	r0, [sp, #20]
 800218a:	9d07      	ldr	r5, [sp, #28]
 800218c:	47a8      	blx	r5
 800218e:	1c43      	adds	r3, r0, #1
 8002190:	d0aa      	beq.n	80020e8 <_printf_i+0x13c>
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	079b      	lsls	r3, r3, #30
 8002196:	d415      	bmi.n	80021c4 <_printf_i+0x218>
 8002198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219a:	68e0      	ldr	r0, [r4, #12]
 800219c:	4298      	cmp	r0, r3
 800219e:	daa5      	bge.n	80020ec <_printf_i+0x140>
 80021a0:	0018      	movs	r0, r3
 80021a2:	e7a3      	b.n	80020ec <_printf_i+0x140>
 80021a4:	0022      	movs	r2, r4
 80021a6:	2301      	movs	r3, #1
 80021a8:	9906      	ldr	r1, [sp, #24]
 80021aa:	9805      	ldr	r0, [sp, #20]
 80021ac:	9e07      	ldr	r6, [sp, #28]
 80021ae:	3219      	adds	r2, #25
 80021b0:	47b0      	blx	r6
 80021b2:	1c43      	adds	r3, r0, #1
 80021b4:	d098      	beq.n	80020e8 <_printf_i+0x13c>
 80021b6:	3501      	adds	r5, #1
 80021b8:	68e3      	ldr	r3, [r4, #12]
 80021ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	42ab      	cmp	r3, r5
 80021c0:	dcf0      	bgt.n	80021a4 <_printf_i+0x1f8>
 80021c2:	e7e9      	b.n	8002198 <_printf_i+0x1ec>
 80021c4:	2500      	movs	r5, #0
 80021c6:	e7f7      	b.n	80021b8 <_printf_i+0x20c>
 80021c8:	08002401 	.word	0x08002401
 80021cc:	08002412 	.word	0x08002412

080021d0 <__retarget_lock_acquire_recursive>:
 80021d0:	4770      	bx	lr

080021d2 <__retarget_lock_release_recursive>:
 80021d2:	4770      	bx	lr

080021d4 <memchr>:
 80021d4:	b2c9      	uxtb	r1, r1
 80021d6:	1882      	adds	r2, r0, r2
 80021d8:	4290      	cmp	r0, r2
 80021da:	d101      	bne.n	80021e0 <memchr+0xc>
 80021dc:	2000      	movs	r0, #0
 80021de:	4770      	bx	lr
 80021e0:	7803      	ldrb	r3, [r0, #0]
 80021e2:	428b      	cmp	r3, r1
 80021e4:	d0fb      	beq.n	80021de <memchr+0xa>
 80021e6:	3001      	adds	r0, #1
 80021e8:	e7f6      	b.n	80021d8 <memchr+0x4>

080021ea <memmove>:
 80021ea:	b510      	push	{r4, lr}
 80021ec:	4288      	cmp	r0, r1
 80021ee:	d902      	bls.n	80021f6 <memmove+0xc>
 80021f0:	188b      	adds	r3, r1, r2
 80021f2:	4298      	cmp	r0, r3
 80021f4:	d303      	bcc.n	80021fe <memmove+0x14>
 80021f6:	2300      	movs	r3, #0
 80021f8:	e007      	b.n	800220a <memmove+0x20>
 80021fa:	5c8b      	ldrb	r3, [r1, r2]
 80021fc:	5483      	strb	r3, [r0, r2]
 80021fe:	3a01      	subs	r2, #1
 8002200:	d2fb      	bcs.n	80021fa <memmove+0x10>
 8002202:	bd10      	pop	{r4, pc}
 8002204:	5ccc      	ldrb	r4, [r1, r3]
 8002206:	54c4      	strb	r4, [r0, r3]
 8002208:	3301      	adds	r3, #1
 800220a:	429a      	cmp	r2, r3
 800220c:	d1fa      	bne.n	8002204 <memmove+0x1a>
 800220e:	e7f8      	b.n	8002202 <memmove+0x18>

08002210 <_realloc_r>:
 8002210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002212:	0007      	movs	r7, r0
 8002214:	000e      	movs	r6, r1
 8002216:	0014      	movs	r4, r2
 8002218:	2900      	cmp	r1, #0
 800221a:	d105      	bne.n	8002228 <_realloc_r+0x18>
 800221c:	0011      	movs	r1, r2
 800221e:	f7ff fc3b 	bl	8001a98 <_malloc_r>
 8002222:	0005      	movs	r5, r0
 8002224:	0028      	movs	r0, r5
 8002226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002228:	2a00      	cmp	r2, #0
 800222a:	d103      	bne.n	8002234 <_realloc_r+0x24>
 800222c:	f7ff fbc8 	bl	80019c0 <_free_r>
 8002230:	0025      	movs	r5, r4
 8002232:	e7f7      	b.n	8002224 <_realloc_r+0x14>
 8002234:	f000 f81b 	bl	800226e <_malloc_usable_size_r>
 8002238:	9001      	str	r0, [sp, #4]
 800223a:	4284      	cmp	r4, r0
 800223c:	d803      	bhi.n	8002246 <_realloc_r+0x36>
 800223e:	0035      	movs	r5, r6
 8002240:	0843      	lsrs	r3, r0, #1
 8002242:	42a3      	cmp	r3, r4
 8002244:	d3ee      	bcc.n	8002224 <_realloc_r+0x14>
 8002246:	0021      	movs	r1, r4
 8002248:	0038      	movs	r0, r7
 800224a:	f7ff fc25 	bl	8001a98 <_malloc_r>
 800224e:	1e05      	subs	r5, r0, #0
 8002250:	d0e8      	beq.n	8002224 <_realloc_r+0x14>
 8002252:	9b01      	ldr	r3, [sp, #4]
 8002254:	0022      	movs	r2, r4
 8002256:	429c      	cmp	r4, r3
 8002258:	d900      	bls.n	800225c <_realloc_r+0x4c>
 800225a:	001a      	movs	r2, r3
 800225c:	0031      	movs	r1, r6
 800225e:	0028      	movs	r0, r5
 8002260:	f7ff fb9c 	bl	800199c <memcpy>
 8002264:	0031      	movs	r1, r6
 8002266:	0038      	movs	r0, r7
 8002268:	f7ff fbaa 	bl	80019c0 <_free_r>
 800226c:	e7da      	b.n	8002224 <_realloc_r+0x14>

0800226e <_malloc_usable_size_r>:
 800226e:	1f0b      	subs	r3, r1, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1f18      	subs	r0, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	da01      	bge.n	800227c <_malloc_usable_size_r+0xe>
 8002278:	580b      	ldr	r3, [r1, r0]
 800227a:	18c0      	adds	r0, r0, r3
 800227c:	4770      	bx	lr

0800227e <lroundf>:
 800227e:	0dc1      	lsrs	r1, r0, #23
 8002280:	b2c9      	uxtb	r1, r1
 8002282:	000a      	movs	r2, r1
 8002284:	b510      	push	{r4, lr}
 8002286:	2401      	movs	r4, #1
 8002288:	1c03      	adds	r3, r0, #0
 800228a:	3a7f      	subs	r2, #127	; 0x7f
 800228c:	17c0      	asrs	r0, r0, #31
 800228e:	4320      	orrs	r0, r4
 8002290:	2a1e      	cmp	r2, #30
 8002292:	dc18      	bgt.n	80022c6 <lroundf+0x48>
 8002294:	2a00      	cmp	r2, #0
 8002296:	da02      	bge.n	800229e <lroundf+0x20>
 8002298:	1c53      	adds	r3, r2, #1
 800229a:	d118      	bne.n	80022ce <lroundf+0x50>
 800229c:	bd10      	pop	{r4, pc}
 800229e:	2480      	movs	r4, #128	; 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	0a5b      	lsrs	r3, r3, #9
 80022a4:	0424      	lsls	r4, r4, #16
 80022a6:	431c      	orrs	r4, r3
 80022a8:	2a16      	cmp	r2, #22
 80022aa:	dd04      	ble.n	80022b6 <lroundf+0x38>
 80022ac:	0023      	movs	r3, r4
 80022ae:	3996      	subs	r1, #150	; 0x96
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4358      	muls	r0, r3
 80022b4:	e7f2      	b.n	800229c <lroundf+0x1e>
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	03db      	lsls	r3, r3, #15
 80022ba:	4113      	asrs	r3, r2
 80022bc:	2117      	movs	r1, #23
 80022be:	191b      	adds	r3, r3, r4
 80022c0:	1a8a      	subs	r2, r1, r2
 80022c2:	40d3      	lsrs	r3, r2
 80022c4:	e7f5      	b.n	80022b2 <lroundf+0x34>
 80022c6:	1c18      	adds	r0, r3, #0
 80022c8:	f7fe fc8a 	bl	8000be0 <__aeabi_f2iz>
 80022cc:	e7e6      	b.n	800229c <lroundf+0x1e>
 80022ce:	2000      	movs	r0, #0
 80022d0:	e7e4      	b.n	800229c <lroundf+0x1e>
	...

080022d4 <_sbrk>:
 80022d4:	4a05      	ldr	r2, [pc, #20]	; (80022ec <_sbrk+0x18>)
 80022d6:	0003      	movs	r3, r0
 80022d8:	6811      	ldr	r1, [r2, #0]
 80022da:	2900      	cmp	r1, #0
 80022dc:	d101      	bne.n	80022e2 <_sbrk+0xe>
 80022de:	4904      	ldr	r1, [pc, #16]	; (80022f0 <_sbrk+0x1c>)
 80022e0:	6011      	str	r1, [r2, #0]
 80022e2:	6810      	ldr	r0, [r2, #0]
 80022e4:	18c3      	adds	r3, r0, r3
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4770      	bx	lr
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	20000138 	.word	0x20000138
 80022f0:	20000140 	.word	0x20000140

080022f4 <_init>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr

08002300 <_fini>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr
