
sig-generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d54  08001d54  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d54  08001d54  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d54  08001d54  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d58  08001d58  00011d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08001dc8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08001dc8  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ece  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a2c  00000000  00000000  00021f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00022990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000140  00000000  00000000  00022b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b8dc  00000000  00000000  00022c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000028fe  00000000  00000000  0002e53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003b8f2  00000000  00000000  00030e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006c72c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000790  00000000  00000000  0006c77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001c6c 	.word	0x08001c6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08001c6c 	.word	0x08001c6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fdiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0245      	lsls	r5, r0, #9
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0047      	lsls	r7, r0, #1
 8000402:	1c0c      	adds	r4, r1, #0
 8000404:	0a6d      	lsrs	r5, r5, #9
 8000406:	0e3f      	lsrs	r7, r7, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2f00      	cmp	r7, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fdiv+0x1c>
 800040e:	e070      	b.n	80004f2 <__aeabi_fdiv+0xfe>
 8000410:	2fff      	cmp	r7, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fdiv+0x22>
 8000414:	e075      	b.n	8000502 <__aeabi_fdiv+0x10e>
 8000416:	00eb      	lsls	r3, r5, #3
 8000418:	2580      	movs	r5, #128	; 0x80
 800041a:	04ed      	lsls	r5, r5, #19
 800041c:	431d      	orrs	r5, r3
 800041e:	2300      	movs	r3, #0
 8000420:	4699      	mov	r9, r3
 8000422:	469a      	mov	sl, r3
 8000424:	3f7f      	subs	r7, #127	; 0x7f
 8000426:	0260      	lsls	r0, r4, #9
 8000428:	0a43      	lsrs	r3, r0, #9
 800042a:	4698      	mov	r8, r3
 800042c:	0063      	lsls	r3, r4, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fe4      	lsrs	r4, r4, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d04e      	beq.n	80004d4 <__aeabi_fdiv+0xe0>
 8000436:	2bff      	cmp	r3, #255	; 0xff
 8000438:	d046      	beq.n	80004c8 <__aeabi_fdiv+0xd4>
 800043a:	4642      	mov	r2, r8
 800043c:	00d0      	lsls	r0, r2, #3
 800043e:	2280      	movs	r2, #128	; 0x80
 8000440:	04d2      	lsls	r2, r2, #19
 8000442:	4302      	orrs	r2, r0
 8000444:	4690      	mov	r8, r2
 8000446:	2200      	movs	r2, #0
 8000448:	3b7f      	subs	r3, #127	; 0x7f
 800044a:	0031      	movs	r1, r6
 800044c:	1aff      	subs	r7, r7, r3
 800044e:	464b      	mov	r3, r9
 8000450:	4061      	eors	r1, r4
 8000452:	b2c9      	uxtb	r1, r1
 8000454:	4313      	orrs	r3, r2
 8000456:	2b0f      	cmp	r3, #15
 8000458:	d900      	bls.n	800045c <__aeabi_fdiv+0x68>
 800045a:	e0b5      	b.n	80005c8 <__aeabi_fdiv+0x1d4>
 800045c:	486e      	ldr	r0, [pc, #440]	; (8000618 <__aeabi_fdiv+0x224>)
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	58c3      	ldr	r3, [r0, r3]
 8000462:	469f      	mov	pc, r3
 8000464:	2300      	movs	r3, #0
 8000466:	4698      	mov	r8, r3
 8000468:	0026      	movs	r6, r4
 800046a:	4645      	mov	r5, r8
 800046c:	4692      	mov	sl, r2
 800046e:	4653      	mov	r3, sl
 8000470:	2b02      	cmp	r3, #2
 8000472:	d100      	bne.n	8000476 <__aeabi_fdiv+0x82>
 8000474:	e089      	b.n	800058a <__aeabi_fdiv+0x196>
 8000476:	2b03      	cmp	r3, #3
 8000478:	d100      	bne.n	800047c <__aeabi_fdiv+0x88>
 800047a:	e09e      	b.n	80005ba <__aeabi_fdiv+0x1c6>
 800047c:	2b01      	cmp	r3, #1
 800047e:	d018      	beq.n	80004b2 <__aeabi_fdiv+0xbe>
 8000480:	003b      	movs	r3, r7
 8000482:	337f      	adds	r3, #127	; 0x7f
 8000484:	2b00      	cmp	r3, #0
 8000486:	dd69      	ble.n	800055c <__aeabi_fdiv+0x168>
 8000488:	076a      	lsls	r2, r5, #29
 800048a:	d004      	beq.n	8000496 <__aeabi_fdiv+0xa2>
 800048c:	220f      	movs	r2, #15
 800048e:	402a      	ands	r2, r5
 8000490:	2a04      	cmp	r2, #4
 8000492:	d000      	beq.n	8000496 <__aeabi_fdiv+0xa2>
 8000494:	3504      	adds	r5, #4
 8000496:	012a      	lsls	r2, r5, #4
 8000498:	d503      	bpl.n	80004a2 <__aeabi_fdiv+0xae>
 800049a:	4b60      	ldr	r3, [pc, #384]	; (800061c <__aeabi_fdiv+0x228>)
 800049c:	401d      	ands	r5, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	3380      	adds	r3, #128	; 0x80
 80004a2:	2bfe      	cmp	r3, #254	; 0xfe
 80004a4:	dd00      	ble.n	80004a8 <__aeabi_fdiv+0xb4>
 80004a6:	e070      	b.n	800058a <__aeabi_fdiv+0x196>
 80004a8:	01ad      	lsls	r5, r5, #6
 80004aa:	0a6d      	lsrs	r5, r5, #9
 80004ac:	b2d8      	uxtb	r0, r3
 80004ae:	e002      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 80004b0:	000e      	movs	r6, r1
 80004b2:	2000      	movs	r0, #0
 80004b4:	2500      	movs	r5, #0
 80004b6:	05c0      	lsls	r0, r0, #23
 80004b8:	4328      	orrs	r0, r5
 80004ba:	07f6      	lsls	r6, r6, #31
 80004bc:	4330      	orrs	r0, r6
 80004be:	bce0      	pop	{r5, r6, r7}
 80004c0:	46ba      	mov	sl, r7
 80004c2:	46b1      	mov	r9, r6
 80004c4:	46a8      	mov	r8, r5
 80004c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c8:	4643      	mov	r3, r8
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d13f      	bne.n	800054e <__aeabi_fdiv+0x15a>
 80004ce:	2202      	movs	r2, #2
 80004d0:	3fff      	subs	r7, #255	; 0xff
 80004d2:	e003      	b.n	80004dc <__aeabi_fdiv+0xe8>
 80004d4:	4643      	mov	r3, r8
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d12d      	bne.n	8000536 <__aeabi_fdiv+0x142>
 80004da:	2201      	movs	r2, #1
 80004dc:	0031      	movs	r1, r6
 80004de:	464b      	mov	r3, r9
 80004e0:	4061      	eors	r1, r4
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	4313      	orrs	r3, r2
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d834      	bhi.n	8000554 <__aeabi_fdiv+0x160>
 80004ea:	484d      	ldr	r0, [pc, #308]	; (8000620 <__aeabi_fdiv+0x22c>)
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	58c3      	ldr	r3, [r0, r3]
 80004f0:	469f      	mov	pc, r3
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	d113      	bne.n	800051e <__aeabi_fdiv+0x12a>
 80004f6:	2304      	movs	r3, #4
 80004f8:	4699      	mov	r9, r3
 80004fa:	3b03      	subs	r3, #3
 80004fc:	2700      	movs	r7, #0
 80004fe:	469a      	mov	sl, r3
 8000500:	e791      	b.n	8000426 <__aeabi_fdiv+0x32>
 8000502:	2d00      	cmp	r5, #0
 8000504:	d105      	bne.n	8000512 <__aeabi_fdiv+0x11e>
 8000506:	2308      	movs	r3, #8
 8000508:	4699      	mov	r9, r3
 800050a:	3b06      	subs	r3, #6
 800050c:	27ff      	movs	r7, #255	; 0xff
 800050e:	469a      	mov	sl, r3
 8000510:	e789      	b.n	8000426 <__aeabi_fdiv+0x32>
 8000512:	230c      	movs	r3, #12
 8000514:	4699      	mov	r9, r3
 8000516:	3b09      	subs	r3, #9
 8000518:	27ff      	movs	r7, #255	; 0xff
 800051a:	469a      	mov	sl, r3
 800051c:	e783      	b.n	8000426 <__aeabi_fdiv+0x32>
 800051e:	0028      	movs	r0, r5
 8000520:	f000 fc04 	bl	8000d2c <__clzsi2>
 8000524:	2776      	movs	r7, #118	; 0x76
 8000526:	1f43      	subs	r3, r0, #5
 8000528:	409d      	lsls	r5, r3
 800052a:	2300      	movs	r3, #0
 800052c:	427f      	negs	r7, r7
 800052e:	4699      	mov	r9, r3
 8000530:	469a      	mov	sl, r3
 8000532:	1a3f      	subs	r7, r7, r0
 8000534:	e777      	b.n	8000426 <__aeabi_fdiv+0x32>
 8000536:	4640      	mov	r0, r8
 8000538:	f000 fbf8 	bl	8000d2c <__clzsi2>
 800053c:	4642      	mov	r2, r8
 800053e:	1f43      	subs	r3, r0, #5
 8000540:	409a      	lsls	r2, r3
 8000542:	2376      	movs	r3, #118	; 0x76
 8000544:	425b      	negs	r3, r3
 8000546:	4690      	mov	r8, r2
 8000548:	1a1b      	subs	r3, r3, r0
 800054a:	2200      	movs	r2, #0
 800054c:	e77d      	b.n	800044a <__aeabi_fdiv+0x56>
 800054e:	23ff      	movs	r3, #255	; 0xff
 8000550:	2203      	movs	r2, #3
 8000552:	e77a      	b.n	800044a <__aeabi_fdiv+0x56>
 8000554:	000e      	movs	r6, r1
 8000556:	20ff      	movs	r0, #255	; 0xff
 8000558:	2500      	movs	r5, #0
 800055a:	e7ac      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 800055c:	2001      	movs	r0, #1
 800055e:	1ac0      	subs	r0, r0, r3
 8000560:	281b      	cmp	r0, #27
 8000562:	dca6      	bgt.n	80004b2 <__aeabi_fdiv+0xbe>
 8000564:	379e      	adds	r7, #158	; 0x9e
 8000566:	002a      	movs	r2, r5
 8000568:	40bd      	lsls	r5, r7
 800056a:	40c2      	lsrs	r2, r0
 800056c:	1e6b      	subs	r3, r5, #1
 800056e:	419d      	sbcs	r5, r3
 8000570:	4315      	orrs	r5, r2
 8000572:	076b      	lsls	r3, r5, #29
 8000574:	d004      	beq.n	8000580 <__aeabi_fdiv+0x18c>
 8000576:	230f      	movs	r3, #15
 8000578:	402b      	ands	r3, r5
 800057a:	2b04      	cmp	r3, #4
 800057c:	d000      	beq.n	8000580 <__aeabi_fdiv+0x18c>
 800057e:	3504      	adds	r5, #4
 8000580:	016b      	lsls	r3, r5, #5
 8000582:	d544      	bpl.n	800060e <__aeabi_fdiv+0x21a>
 8000584:	2001      	movs	r0, #1
 8000586:	2500      	movs	r5, #0
 8000588:	e795      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 800058a:	20ff      	movs	r0, #255	; 0xff
 800058c:	2500      	movs	r5, #0
 800058e:	e792      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 8000590:	2580      	movs	r5, #128	; 0x80
 8000592:	2600      	movs	r6, #0
 8000594:	20ff      	movs	r0, #255	; 0xff
 8000596:	03ed      	lsls	r5, r5, #15
 8000598:	e78d      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 800059a:	2300      	movs	r3, #0
 800059c:	4698      	mov	r8, r3
 800059e:	2080      	movs	r0, #128	; 0x80
 80005a0:	03c0      	lsls	r0, r0, #15
 80005a2:	4205      	tst	r5, r0
 80005a4:	d009      	beq.n	80005ba <__aeabi_fdiv+0x1c6>
 80005a6:	4643      	mov	r3, r8
 80005a8:	4203      	tst	r3, r0
 80005aa:	d106      	bne.n	80005ba <__aeabi_fdiv+0x1c6>
 80005ac:	4645      	mov	r5, r8
 80005ae:	4305      	orrs	r5, r0
 80005b0:	026d      	lsls	r5, r5, #9
 80005b2:	0026      	movs	r6, r4
 80005b4:	20ff      	movs	r0, #255	; 0xff
 80005b6:	0a6d      	lsrs	r5, r5, #9
 80005b8:	e77d      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 80005ba:	2080      	movs	r0, #128	; 0x80
 80005bc:	03c0      	lsls	r0, r0, #15
 80005be:	4305      	orrs	r5, r0
 80005c0:	026d      	lsls	r5, r5, #9
 80005c2:	20ff      	movs	r0, #255	; 0xff
 80005c4:	0a6d      	lsrs	r5, r5, #9
 80005c6:	e776      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 80005c8:	4642      	mov	r2, r8
 80005ca:	016b      	lsls	r3, r5, #5
 80005cc:	0150      	lsls	r0, r2, #5
 80005ce:	4283      	cmp	r3, r0
 80005d0:	d219      	bcs.n	8000606 <__aeabi_fdiv+0x212>
 80005d2:	221b      	movs	r2, #27
 80005d4:	2500      	movs	r5, #0
 80005d6:	3f01      	subs	r7, #1
 80005d8:	2601      	movs	r6, #1
 80005da:	001c      	movs	r4, r3
 80005dc:	006d      	lsls	r5, r5, #1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	db01      	blt.n	80005e8 <__aeabi_fdiv+0x1f4>
 80005e4:	4298      	cmp	r0, r3
 80005e6:	d801      	bhi.n	80005ec <__aeabi_fdiv+0x1f8>
 80005e8:	1a1b      	subs	r3, r3, r0
 80005ea:	4335      	orrs	r5, r6
 80005ec:	3a01      	subs	r2, #1
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d1f3      	bne.n	80005da <__aeabi_fdiv+0x1e6>
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	4193      	sbcs	r3, r2
 80005f6:	431d      	orrs	r5, r3
 80005f8:	003b      	movs	r3, r7
 80005fa:	337f      	adds	r3, #127	; 0x7f
 80005fc:	000e      	movs	r6, r1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	dd00      	ble.n	8000604 <__aeabi_fdiv+0x210>
 8000602:	e741      	b.n	8000488 <__aeabi_fdiv+0x94>
 8000604:	e7aa      	b.n	800055c <__aeabi_fdiv+0x168>
 8000606:	221a      	movs	r2, #26
 8000608:	2501      	movs	r5, #1
 800060a:	1a1b      	subs	r3, r3, r0
 800060c:	e7e4      	b.n	80005d8 <__aeabi_fdiv+0x1e4>
 800060e:	01ad      	lsls	r5, r5, #6
 8000610:	2000      	movs	r0, #0
 8000612:	0a6d      	lsrs	r5, r5, #9
 8000614:	e74f      	b.n	80004b6 <__aeabi_fdiv+0xc2>
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	08001c84 	.word	0x08001c84
 800061c:	f7ffffff 	.word	0xf7ffffff
 8000620:	08001cc4 	.word	0x08001cc4

08000624 <__aeabi_fmul>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	464f      	mov	r7, r9
 8000628:	4646      	mov	r6, r8
 800062a:	46d6      	mov	lr, sl
 800062c:	0244      	lsls	r4, r0, #9
 800062e:	0045      	lsls	r5, r0, #1
 8000630:	b5c0      	push	{r6, r7, lr}
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	1c0f      	adds	r7, r1, #0
 8000636:	0e2d      	lsrs	r5, r5, #24
 8000638:	0fc6      	lsrs	r6, r0, #31
 800063a:	2d00      	cmp	r5, #0
 800063c:	d100      	bne.n	8000640 <__aeabi_fmul+0x1c>
 800063e:	e08d      	b.n	800075c <__aeabi_fmul+0x138>
 8000640:	2dff      	cmp	r5, #255	; 0xff
 8000642:	d100      	bne.n	8000646 <__aeabi_fmul+0x22>
 8000644:	e092      	b.n	800076c <__aeabi_fmul+0x148>
 8000646:	2300      	movs	r3, #0
 8000648:	2080      	movs	r0, #128	; 0x80
 800064a:	4699      	mov	r9, r3
 800064c:	469a      	mov	sl, r3
 800064e:	00e4      	lsls	r4, r4, #3
 8000650:	04c0      	lsls	r0, r0, #19
 8000652:	4304      	orrs	r4, r0
 8000654:	3d7f      	subs	r5, #127	; 0x7f
 8000656:	0278      	lsls	r0, r7, #9
 8000658:	0a43      	lsrs	r3, r0, #9
 800065a:	4698      	mov	r8, r3
 800065c:	007b      	lsls	r3, r7, #1
 800065e:	0e1b      	lsrs	r3, r3, #24
 8000660:	0fff      	lsrs	r7, r7, #31
 8000662:	2b00      	cmp	r3, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fmul+0x44>
 8000666:	e070      	b.n	800074a <__aeabi_fmul+0x126>
 8000668:	2bff      	cmp	r3, #255	; 0xff
 800066a:	d100      	bne.n	800066e <__aeabi_fmul+0x4a>
 800066c:	e086      	b.n	800077c <__aeabi_fmul+0x158>
 800066e:	4642      	mov	r2, r8
 8000670:	00d0      	lsls	r0, r2, #3
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	3b7f      	subs	r3, #127	; 0x7f
 8000676:	18ed      	adds	r5, r5, r3
 8000678:	2300      	movs	r3, #0
 800067a:	04d2      	lsls	r2, r2, #19
 800067c:	4302      	orrs	r2, r0
 800067e:	4690      	mov	r8, r2
 8000680:	469c      	mov	ip, r3
 8000682:	0031      	movs	r1, r6
 8000684:	464b      	mov	r3, r9
 8000686:	4079      	eors	r1, r7
 8000688:	1c68      	adds	r0, r5, #1
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d81c      	bhi.n	80006c8 <__aeabi_fmul+0xa4>
 800068e:	4a76      	ldr	r2, [pc, #472]	; (8000868 <__aeabi_fmul+0x244>)
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	58d3      	ldr	r3, [r2, r3]
 8000694:	469f      	mov	pc, r3
 8000696:	0039      	movs	r1, r7
 8000698:	4644      	mov	r4, r8
 800069a:	46e2      	mov	sl, ip
 800069c:	4653      	mov	r3, sl
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d00f      	beq.n	80006c2 <__aeabi_fmul+0x9e>
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fmul+0x84>
 80006a6:	e0d7      	b.n	8000858 <__aeabi_fmul+0x234>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d137      	bne.n	800071c <__aeabi_fmul+0xf8>
 80006ac:	2000      	movs	r0, #0
 80006ae:	2400      	movs	r4, #0
 80006b0:	05c0      	lsls	r0, r0, #23
 80006b2:	4320      	orrs	r0, r4
 80006b4:	07c9      	lsls	r1, r1, #31
 80006b6:	4308      	orrs	r0, r1
 80006b8:	bce0      	pop	{r5, r6, r7}
 80006ba:	46ba      	mov	sl, r7
 80006bc:	46b1      	mov	r9, r6
 80006be:	46a8      	mov	r8, r5
 80006c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	2400      	movs	r4, #0
 80006c6:	e7f3      	b.n	80006b0 <__aeabi_fmul+0x8c>
 80006c8:	0c26      	lsrs	r6, r4, #16
 80006ca:	0424      	lsls	r4, r4, #16
 80006cc:	0c22      	lsrs	r2, r4, #16
 80006ce:	4644      	mov	r4, r8
 80006d0:	0424      	lsls	r4, r4, #16
 80006d2:	0c24      	lsrs	r4, r4, #16
 80006d4:	4643      	mov	r3, r8
 80006d6:	0027      	movs	r7, r4
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	4357      	muls	r7, r2
 80006dc:	4374      	muls	r4, r6
 80006de:	435a      	muls	r2, r3
 80006e0:	435e      	muls	r6, r3
 80006e2:	1912      	adds	r2, r2, r4
 80006e4:	0c3b      	lsrs	r3, r7, #16
 80006e6:	189b      	adds	r3, r3, r2
 80006e8:	429c      	cmp	r4, r3
 80006ea:	d903      	bls.n	80006f4 <__aeabi_fmul+0xd0>
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0252      	lsls	r2, r2, #9
 80006f0:	4694      	mov	ip, r2
 80006f2:	4466      	add	r6, ip
 80006f4:	043f      	lsls	r7, r7, #16
 80006f6:	041a      	lsls	r2, r3, #16
 80006f8:	0c3f      	lsrs	r7, r7, #16
 80006fa:	19d2      	adds	r2, r2, r7
 80006fc:	0194      	lsls	r4, r2, #6
 80006fe:	1e67      	subs	r7, r4, #1
 8000700:	41bc      	sbcs	r4, r7
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	0e92      	lsrs	r2, r2, #26
 8000706:	199b      	adds	r3, r3, r6
 8000708:	4314      	orrs	r4, r2
 800070a:	019b      	lsls	r3, r3, #6
 800070c:	431c      	orrs	r4, r3
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	d400      	bmi.n	8000714 <__aeabi_fmul+0xf0>
 8000712:	e09b      	b.n	800084c <__aeabi_fmul+0x228>
 8000714:	2301      	movs	r3, #1
 8000716:	0862      	lsrs	r2, r4, #1
 8000718:	401c      	ands	r4, r3
 800071a:	4314      	orrs	r4, r2
 800071c:	0002      	movs	r2, r0
 800071e:	327f      	adds	r2, #127	; 0x7f
 8000720:	2a00      	cmp	r2, #0
 8000722:	dd64      	ble.n	80007ee <__aeabi_fmul+0x1ca>
 8000724:	0763      	lsls	r3, r4, #29
 8000726:	d004      	beq.n	8000732 <__aeabi_fmul+0x10e>
 8000728:	230f      	movs	r3, #15
 800072a:	4023      	ands	r3, r4
 800072c:	2b04      	cmp	r3, #4
 800072e:	d000      	beq.n	8000732 <__aeabi_fmul+0x10e>
 8000730:	3404      	adds	r4, #4
 8000732:	0123      	lsls	r3, r4, #4
 8000734:	d503      	bpl.n	800073e <__aeabi_fmul+0x11a>
 8000736:	0002      	movs	r2, r0
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <__aeabi_fmul+0x248>)
 800073a:	3280      	adds	r2, #128	; 0x80
 800073c:	401c      	ands	r4, r3
 800073e:	2afe      	cmp	r2, #254	; 0xfe
 8000740:	dcbf      	bgt.n	80006c2 <__aeabi_fmul+0x9e>
 8000742:	01a4      	lsls	r4, r4, #6
 8000744:	0a64      	lsrs	r4, r4, #9
 8000746:	b2d0      	uxtb	r0, r2
 8000748:	e7b2      	b.n	80006b0 <__aeabi_fmul+0x8c>
 800074a:	4643      	mov	r3, r8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d13d      	bne.n	80007cc <__aeabi_fmul+0x1a8>
 8000750:	464a      	mov	r2, r9
 8000752:	3301      	adds	r3, #1
 8000754:	431a      	orrs	r2, r3
 8000756:	4691      	mov	r9, r2
 8000758:	469c      	mov	ip, r3
 800075a:	e792      	b.n	8000682 <__aeabi_fmul+0x5e>
 800075c:	2c00      	cmp	r4, #0
 800075e:	d129      	bne.n	80007b4 <__aeabi_fmul+0x190>
 8000760:	2304      	movs	r3, #4
 8000762:	4699      	mov	r9, r3
 8000764:	3b03      	subs	r3, #3
 8000766:	2500      	movs	r5, #0
 8000768:	469a      	mov	sl, r3
 800076a:	e774      	b.n	8000656 <__aeabi_fmul+0x32>
 800076c:	2c00      	cmp	r4, #0
 800076e:	d11b      	bne.n	80007a8 <__aeabi_fmul+0x184>
 8000770:	2308      	movs	r3, #8
 8000772:	4699      	mov	r9, r3
 8000774:	3b06      	subs	r3, #6
 8000776:	25ff      	movs	r5, #255	; 0xff
 8000778:	469a      	mov	sl, r3
 800077a:	e76c      	b.n	8000656 <__aeabi_fmul+0x32>
 800077c:	4643      	mov	r3, r8
 800077e:	35ff      	adds	r5, #255	; 0xff
 8000780:	2b00      	cmp	r3, #0
 8000782:	d10b      	bne.n	800079c <__aeabi_fmul+0x178>
 8000784:	2302      	movs	r3, #2
 8000786:	464a      	mov	r2, r9
 8000788:	431a      	orrs	r2, r3
 800078a:	4691      	mov	r9, r2
 800078c:	469c      	mov	ip, r3
 800078e:	e778      	b.n	8000682 <__aeabi_fmul+0x5e>
 8000790:	4653      	mov	r3, sl
 8000792:	0031      	movs	r1, r6
 8000794:	2b02      	cmp	r3, #2
 8000796:	d000      	beq.n	800079a <__aeabi_fmul+0x176>
 8000798:	e783      	b.n	80006a2 <__aeabi_fmul+0x7e>
 800079a:	e792      	b.n	80006c2 <__aeabi_fmul+0x9e>
 800079c:	2303      	movs	r3, #3
 800079e:	464a      	mov	r2, r9
 80007a0:	431a      	orrs	r2, r3
 80007a2:	4691      	mov	r9, r2
 80007a4:	469c      	mov	ip, r3
 80007a6:	e76c      	b.n	8000682 <__aeabi_fmul+0x5e>
 80007a8:	230c      	movs	r3, #12
 80007aa:	4699      	mov	r9, r3
 80007ac:	3b09      	subs	r3, #9
 80007ae:	25ff      	movs	r5, #255	; 0xff
 80007b0:	469a      	mov	sl, r3
 80007b2:	e750      	b.n	8000656 <__aeabi_fmul+0x32>
 80007b4:	0020      	movs	r0, r4
 80007b6:	f000 fab9 	bl	8000d2c <__clzsi2>
 80007ba:	2576      	movs	r5, #118	; 0x76
 80007bc:	1f43      	subs	r3, r0, #5
 80007be:	409c      	lsls	r4, r3
 80007c0:	2300      	movs	r3, #0
 80007c2:	426d      	negs	r5, r5
 80007c4:	4699      	mov	r9, r3
 80007c6:	469a      	mov	sl, r3
 80007c8:	1a2d      	subs	r5, r5, r0
 80007ca:	e744      	b.n	8000656 <__aeabi_fmul+0x32>
 80007cc:	4640      	mov	r0, r8
 80007ce:	f000 faad 	bl	8000d2c <__clzsi2>
 80007d2:	4642      	mov	r2, r8
 80007d4:	1f43      	subs	r3, r0, #5
 80007d6:	409a      	lsls	r2, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	1a2d      	subs	r5, r5, r0
 80007dc:	4690      	mov	r8, r2
 80007de:	469c      	mov	ip, r3
 80007e0:	3d76      	subs	r5, #118	; 0x76
 80007e2:	e74e      	b.n	8000682 <__aeabi_fmul+0x5e>
 80007e4:	2480      	movs	r4, #128	; 0x80
 80007e6:	2100      	movs	r1, #0
 80007e8:	20ff      	movs	r0, #255	; 0xff
 80007ea:	03e4      	lsls	r4, r4, #15
 80007ec:	e760      	b.n	80006b0 <__aeabi_fmul+0x8c>
 80007ee:	2301      	movs	r3, #1
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	2b1b      	cmp	r3, #27
 80007f4:	dd00      	ble.n	80007f8 <__aeabi_fmul+0x1d4>
 80007f6:	e759      	b.n	80006ac <__aeabi_fmul+0x88>
 80007f8:	0022      	movs	r2, r4
 80007fa:	309e      	adds	r0, #158	; 0x9e
 80007fc:	40da      	lsrs	r2, r3
 80007fe:	4084      	lsls	r4, r0
 8000800:	0013      	movs	r3, r2
 8000802:	1e62      	subs	r2, r4, #1
 8000804:	4194      	sbcs	r4, r2
 8000806:	431c      	orrs	r4, r3
 8000808:	0763      	lsls	r3, r4, #29
 800080a:	d004      	beq.n	8000816 <__aeabi_fmul+0x1f2>
 800080c:	230f      	movs	r3, #15
 800080e:	4023      	ands	r3, r4
 8000810:	2b04      	cmp	r3, #4
 8000812:	d000      	beq.n	8000816 <__aeabi_fmul+0x1f2>
 8000814:	3404      	adds	r4, #4
 8000816:	0163      	lsls	r3, r4, #5
 8000818:	d51a      	bpl.n	8000850 <__aeabi_fmul+0x22c>
 800081a:	2001      	movs	r0, #1
 800081c:	2400      	movs	r4, #0
 800081e:	e747      	b.n	80006b0 <__aeabi_fmul+0x8c>
 8000820:	2080      	movs	r0, #128	; 0x80
 8000822:	03c0      	lsls	r0, r0, #15
 8000824:	4204      	tst	r4, r0
 8000826:	d009      	beq.n	800083c <__aeabi_fmul+0x218>
 8000828:	4643      	mov	r3, r8
 800082a:	4203      	tst	r3, r0
 800082c:	d106      	bne.n	800083c <__aeabi_fmul+0x218>
 800082e:	4644      	mov	r4, r8
 8000830:	4304      	orrs	r4, r0
 8000832:	0264      	lsls	r4, r4, #9
 8000834:	0039      	movs	r1, r7
 8000836:	20ff      	movs	r0, #255	; 0xff
 8000838:	0a64      	lsrs	r4, r4, #9
 800083a:	e739      	b.n	80006b0 <__aeabi_fmul+0x8c>
 800083c:	2080      	movs	r0, #128	; 0x80
 800083e:	03c0      	lsls	r0, r0, #15
 8000840:	4304      	orrs	r4, r0
 8000842:	0264      	lsls	r4, r4, #9
 8000844:	0031      	movs	r1, r6
 8000846:	20ff      	movs	r0, #255	; 0xff
 8000848:	0a64      	lsrs	r4, r4, #9
 800084a:	e731      	b.n	80006b0 <__aeabi_fmul+0x8c>
 800084c:	0028      	movs	r0, r5
 800084e:	e765      	b.n	800071c <__aeabi_fmul+0xf8>
 8000850:	01a4      	lsls	r4, r4, #6
 8000852:	2000      	movs	r0, #0
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	e72b      	b.n	80006b0 <__aeabi_fmul+0x8c>
 8000858:	2080      	movs	r0, #128	; 0x80
 800085a:	03c0      	lsls	r0, r0, #15
 800085c:	4304      	orrs	r4, r0
 800085e:	0264      	lsls	r4, r4, #9
 8000860:	20ff      	movs	r0, #255	; 0xff
 8000862:	0a64      	lsrs	r4, r4, #9
 8000864:	e724      	b.n	80006b0 <__aeabi_fmul+0x8c>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	08001d04 	.word	0x08001d04
 800086c:	f7ffffff 	.word	0xf7ffffff

08000870 <__aeabi_fsub>:
 8000870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000872:	46ce      	mov	lr, r9
 8000874:	4647      	mov	r7, r8
 8000876:	0243      	lsls	r3, r0, #9
 8000878:	0a5b      	lsrs	r3, r3, #9
 800087a:	024e      	lsls	r6, r1, #9
 800087c:	00da      	lsls	r2, r3, #3
 800087e:	4694      	mov	ip, r2
 8000880:	0a72      	lsrs	r2, r6, #9
 8000882:	4691      	mov	r9, r2
 8000884:	0045      	lsls	r5, r0, #1
 8000886:	004a      	lsls	r2, r1, #1
 8000888:	b580      	push	{r7, lr}
 800088a:	0e2d      	lsrs	r5, r5, #24
 800088c:	001f      	movs	r7, r3
 800088e:	0fc4      	lsrs	r4, r0, #31
 8000890:	0e12      	lsrs	r2, r2, #24
 8000892:	0fc9      	lsrs	r1, r1, #31
 8000894:	09b6      	lsrs	r6, r6, #6
 8000896:	2aff      	cmp	r2, #255	; 0xff
 8000898:	d05b      	beq.n	8000952 <__aeabi_fsub+0xe2>
 800089a:	2001      	movs	r0, #1
 800089c:	4041      	eors	r1, r0
 800089e:	428c      	cmp	r4, r1
 80008a0:	d039      	beq.n	8000916 <__aeabi_fsub+0xa6>
 80008a2:	1aa8      	subs	r0, r5, r2
 80008a4:	2800      	cmp	r0, #0
 80008a6:	dd5a      	ble.n	800095e <__aeabi_fsub+0xee>
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	d06a      	beq.n	8000982 <__aeabi_fsub+0x112>
 80008ac:	2dff      	cmp	r5, #255	; 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fsub+0x42>
 80008b0:	e0d9      	b.n	8000a66 <__aeabi_fsub+0x1f6>
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	04d2      	lsls	r2, r2, #19
 80008b6:	4316      	orrs	r6, r2
 80008b8:	281b      	cmp	r0, #27
 80008ba:	dc00      	bgt.n	80008be <__aeabi_fsub+0x4e>
 80008bc:	e0e9      	b.n	8000a92 <__aeabi_fsub+0x222>
 80008be:	2001      	movs	r0, #1
 80008c0:	4663      	mov	r3, ip
 80008c2:	1a18      	subs	r0, r3, r0
 80008c4:	0143      	lsls	r3, r0, #5
 80008c6:	d400      	bmi.n	80008ca <__aeabi_fsub+0x5a>
 80008c8:	e0b4      	b.n	8000a34 <__aeabi_fsub+0x1c4>
 80008ca:	0180      	lsls	r0, r0, #6
 80008cc:	0987      	lsrs	r7, r0, #6
 80008ce:	0038      	movs	r0, r7
 80008d0:	f000 fa2c 	bl	8000d2c <__clzsi2>
 80008d4:	3805      	subs	r0, #5
 80008d6:	4087      	lsls	r7, r0
 80008d8:	4285      	cmp	r5, r0
 80008da:	dc00      	bgt.n	80008de <__aeabi_fsub+0x6e>
 80008dc:	e0cc      	b.n	8000a78 <__aeabi_fsub+0x208>
 80008de:	1a2d      	subs	r5, r5, r0
 80008e0:	48b5      	ldr	r0, [pc, #724]	; (8000bb8 <__aeabi_fsub+0x348>)
 80008e2:	4038      	ands	r0, r7
 80008e4:	0743      	lsls	r3, r0, #29
 80008e6:	d004      	beq.n	80008f2 <__aeabi_fsub+0x82>
 80008e8:	230f      	movs	r3, #15
 80008ea:	4003      	ands	r3, r0
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d000      	beq.n	80008f2 <__aeabi_fsub+0x82>
 80008f0:	3004      	adds	r0, #4
 80008f2:	0143      	lsls	r3, r0, #5
 80008f4:	d400      	bmi.n	80008f8 <__aeabi_fsub+0x88>
 80008f6:	e0a0      	b.n	8000a3a <__aeabi_fsub+0x1ca>
 80008f8:	1c6a      	adds	r2, r5, #1
 80008fa:	2dfe      	cmp	r5, #254	; 0xfe
 80008fc:	d100      	bne.n	8000900 <__aeabi_fsub+0x90>
 80008fe:	e08d      	b.n	8000a1c <__aeabi_fsub+0x1ac>
 8000900:	0180      	lsls	r0, r0, #6
 8000902:	0a47      	lsrs	r7, r0, #9
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	05d0      	lsls	r0, r2, #23
 8000908:	4338      	orrs	r0, r7
 800090a:	07e4      	lsls	r4, r4, #31
 800090c:	4320      	orrs	r0, r4
 800090e:	bcc0      	pop	{r6, r7}
 8000910:	46b9      	mov	r9, r7
 8000912:	46b0      	mov	r8, r6
 8000914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000916:	1aa8      	subs	r0, r5, r2
 8000918:	4680      	mov	r8, r0
 800091a:	2800      	cmp	r0, #0
 800091c:	dd45      	ble.n	80009aa <__aeabi_fsub+0x13a>
 800091e:	2a00      	cmp	r2, #0
 8000920:	d070      	beq.n	8000a04 <__aeabi_fsub+0x194>
 8000922:	2dff      	cmp	r5, #255	; 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fsub+0xb8>
 8000926:	e09e      	b.n	8000a66 <__aeabi_fsub+0x1f6>
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	04db      	lsls	r3, r3, #19
 800092c:	431e      	orrs	r6, r3
 800092e:	4643      	mov	r3, r8
 8000930:	2b1b      	cmp	r3, #27
 8000932:	dc00      	bgt.n	8000936 <__aeabi_fsub+0xc6>
 8000934:	e0d2      	b.n	8000adc <__aeabi_fsub+0x26c>
 8000936:	2001      	movs	r0, #1
 8000938:	4460      	add	r0, ip
 800093a:	0143      	lsls	r3, r0, #5
 800093c:	d57a      	bpl.n	8000a34 <__aeabi_fsub+0x1c4>
 800093e:	3501      	adds	r5, #1
 8000940:	2dff      	cmp	r5, #255	; 0xff
 8000942:	d06b      	beq.n	8000a1c <__aeabi_fsub+0x1ac>
 8000944:	2301      	movs	r3, #1
 8000946:	4a9d      	ldr	r2, [pc, #628]	; (8000bbc <__aeabi_fsub+0x34c>)
 8000948:	4003      	ands	r3, r0
 800094a:	0840      	lsrs	r0, r0, #1
 800094c:	4010      	ands	r0, r2
 800094e:	4318      	orrs	r0, r3
 8000950:	e7c8      	b.n	80008e4 <__aeabi_fsub+0x74>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d020      	beq.n	8000998 <__aeabi_fsub+0x128>
 8000956:	428c      	cmp	r4, r1
 8000958:	d023      	beq.n	80009a2 <__aeabi_fsub+0x132>
 800095a:	0028      	movs	r0, r5
 800095c:	38ff      	subs	r0, #255	; 0xff
 800095e:	2800      	cmp	r0, #0
 8000960:	d039      	beq.n	80009d6 <__aeabi_fsub+0x166>
 8000962:	1b57      	subs	r7, r2, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d000      	beq.n	800096a <__aeabi_fsub+0xfa>
 8000968:	e09d      	b.n	8000aa6 <__aeabi_fsub+0x236>
 800096a:	4663      	mov	r3, ip
 800096c:	2b00      	cmp	r3, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x102>
 8000970:	e0db      	b.n	8000b2a <__aeabi_fsub+0x2ba>
 8000972:	1e7b      	subs	r3, r7, #1
 8000974:	2f01      	cmp	r7, #1
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x10a>
 8000978:	e10d      	b.n	8000b96 <__aeabi_fsub+0x326>
 800097a:	2fff      	cmp	r7, #255	; 0xff
 800097c:	d071      	beq.n	8000a62 <__aeabi_fsub+0x1f2>
 800097e:	001f      	movs	r7, r3
 8000980:	e098      	b.n	8000ab4 <__aeabi_fsub+0x244>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d100      	bne.n	8000988 <__aeabi_fsub+0x118>
 8000986:	e0a7      	b.n	8000ad8 <__aeabi_fsub+0x268>
 8000988:	1e42      	subs	r2, r0, #1
 800098a:	2801      	cmp	r0, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x120>
 800098e:	e0e6      	b.n	8000b5e <__aeabi_fsub+0x2ee>
 8000990:	28ff      	cmp	r0, #255	; 0xff
 8000992:	d068      	beq.n	8000a66 <__aeabi_fsub+0x1f6>
 8000994:	0010      	movs	r0, r2
 8000996:	e78f      	b.n	80008b8 <__aeabi_fsub+0x48>
 8000998:	2001      	movs	r0, #1
 800099a:	4041      	eors	r1, r0
 800099c:	42a1      	cmp	r1, r4
 800099e:	d000      	beq.n	80009a2 <__aeabi_fsub+0x132>
 80009a0:	e77f      	b.n	80008a2 <__aeabi_fsub+0x32>
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	4240      	negs	r0, r0
 80009a6:	4680      	mov	r8, r0
 80009a8:	44a8      	add	r8, r5
 80009aa:	4640      	mov	r0, r8
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d038      	beq.n	8000a22 <__aeabi_fsub+0x1b2>
 80009b0:	1b51      	subs	r1, r2, r5
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fsub+0x148>
 80009b6:	e0ae      	b.n	8000b16 <__aeabi_fsub+0x2a6>
 80009b8:	2aff      	cmp	r2, #255	; 0xff
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x14e>
 80009bc:	e0df      	b.n	8000b7e <__aeabi_fsub+0x30e>
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	4660      	mov	r0, ip
 80009c2:	04db      	lsls	r3, r3, #19
 80009c4:	4318      	orrs	r0, r3
 80009c6:	4684      	mov	ip, r0
 80009c8:	291b      	cmp	r1, #27
 80009ca:	dc00      	bgt.n	80009ce <__aeabi_fsub+0x15e>
 80009cc:	e0d9      	b.n	8000b82 <__aeabi_fsub+0x312>
 80009ce:	2001      	movs	r0, #1
 80009d0:	0015      	movs	r5, r2
 80009d2:	1980      	adds	r0, r0, r6
 80009d4:	e7b1      	b.n	800093a <__aeabi_fsub+0xca>
 80009d6:	20fe      	movs	r0, #254	; 0xfe
 80009d8:	1c6a      	adds	r2, r5, #1
 80009da:	4210      	tst	r0, r2
 80009dc:	d171      	bne.n	8000ac2 <__aeabi_fsub+0x252>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fsub+0x174>
 80009e2:	e0a6      	b.n	8000b32 <__aeabi_fsub+0x2c2>
 80009e4:	4663      	mov	r3, ip
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x17c>
 80009ea:	e0d9      	b.n	8000ba0 <__aeabi_fsub+0x330>
 80009ec:	2200      	movs	r2, #0
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x184>
 80009f2:	e788      	b.n	8000906 <__aeabi_fsub+0x96>
 80009f4:	1b98      	subs	r0, r3, r6
 80009f6:	0143      	lsls	r3, r0, #5
 80009f8:	d400      	bmi.n	80009fc <__aeabi_fsub+0x18c>
 80009fa:	e0e1      	b.n	8000bc0 <__aeabi_fsub+0x350>
 80009fc:	4663      	mov	r3, ip
 80009fe:	000c      	movs	r4, r1
 8000a00:	1af0      	subs	r0, r6, r3
 8000a02:	e76f      	b.n	80008e4 <__aeabi_fsub+0x74>
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x19a>
 8000a08:	e0b7      	b.n	8000b7a <__aeabi_fsub+0x30a>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	2801      	cmp	r0, #1
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fsub+0x1a4>
 8000a12:	e09c      	b.n	8000b4e <__aeabi_fsub+0x2de>
 8000a14:	28ff      	cmp	r0, #255	; 0xff
 8000a16:	d026      	beq.n	8000a66 <__aeabi_fsub+0x1f6>
 8000a18:	4690      	mov	r8, r2
 8000a1a:	e788      	b.n	800092e <__aeabi_fsub+0xbe>
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	2700      	movs	r7, #0
 8000a20:	e771      	b.n	8000906 <__aeabi_fsub+0x96>
 8000a22:	20fe      	movs	r0, #254	; 0xfe
 8000a24:	1c6a      	adds	r2, r5, #1
 8000a26:	4210      	tst	r0, r2
 8000a28:	d064      	beq.n	8000af4 <__aeabi_fsub+0x284>
 8000a2a:	2aff      	cmp	r2, #255	; 0xff
 8000a2c:	d0f6      	beq.n	8000a1c <__aeabi_fsub+0x1ac>
 8000a2e:	0015      	movs	r5, r2
 8000a30:	4466      	add	r6, ip
 8000a32:	0870      	lsrs	r0, r6, #1
 8000a34:	0743      	lsls	r3, r0, #29
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fsub+0x1ca>
 8000a38:	e756      	b.n	80008e8 <__aeabi_fsub+0x78>
 8000a3a:	08c3      	lsrs	r3, r0, #3
 8000a3c:	2dff      	cmp	r5, #255	; 0xff
 8000a3e:	d012      	beq.n	8000a66 <__aeabi_fsub+0x1f6>
 8000a40:	025b      	lsls	r3, r3, #9
 8000a42:	0a5f      	lsrs	r7, r3, #9
 8000a44:	b2ea      	uxtb	r2, r5
 8000a46:	e75e      	b.n	8000906 <__aeabi_fsub+0x96>
 8000a48:	4662      	mov	r2, ip
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fsub+0x1e0>
 8000a4e:	e096      	b.n	8000b7e <__aeabi_fsub+0x30e>
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	d008      	beq.n	8000a66 <__aeabi_fsub+0x1f6>
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	03d2      	lsls	r2, r2, #15
 8000a58:	4213      	tst	r3, r2
 8000a5a:	d004      	beq.n	8000a66 <__aeabi_fsub+0x1f6>
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	4210      	tst	r0, r2
 8000a60:	d101      	bne.n	8000a66 <__aeabi_fsub+0x1f6>
 8000a62:	000c      	movs	r4, r1
 8000a64:	464b      	mov	r3, r9
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0d8      	beq.n	8000a1c <__aeabi_fsub+0x1ac>
 8000a6a:	2780      	movs	r7, #128	; 0x80
 8000a6c:	03ff      	lsls	r7, r7, #15
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	027f      	lsls	r7, r7, #9
 8000a72:	22ff      	movs	r2, #255	; 0xff
 8000a74:	0a7f      	lsrs	r7, r7, #9
 8000a76:	e746      	b.n	8000906 <__aeabi_fsub+0x96>
 8000a78:	2320      	movs	r3, #32
 8000a7a:	003a      	movs	r2, r7
 8000a7c:	1b45      	subs	r5, r0, r5
 8000a7e:	0038      	movs	r0, r7
 8000a80:	3501      	adds	r5, #1
 8000a82:	40ea      	lsrs	r2, r5
 8000a84:	1b5d      	subs	r5, r3, r5
 8000a86:	40a8      	lsls	r0, r5
 8000a88:	1e43      	subs	r3, r0, #1
 8000a8a:	4198      	sbcs	r0, r3
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	4310      	orrs	r0, r2
 8000a90:	e728      	b.n	80008e4 <__aeabi_fsub+0x74>
 8000a92:	2320      	movs	r3, #32
 8000a94:	1a1b      	subs	r3, r3, r0
 8000a96:	0032      	movs	r2, r6
 8000a98:	409e      	lsls	r6, r3
 8000a9a:	40c2      	lsrs	r2, r0
 8000a9c:	0030      	movs	r0, r6
 8000a9e:	1e43      	subs	r3, r0, #1
 8000aa0:	4198      	sbcs	r0, r3
 8000aa2:	4310      	orrs	r0, r2
 8000aa4:	e70c      	b.n	80008c0 <__aeabi_fsub+0x50>
 8000aa6:	2aff      	cmp	r2, #255	; 0xff
 8000aa8:	d0db      	beq.n	8000a62 <__aeabi_fsub+0x1f2>
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	4660      	mov	r0, ip
 8000aae:	04db      	lsls	r3, r3, #19
 8000ab0:	4318      	orrs	r0, r3
 8000ab2:	4684      	mov	ip, r0
 8000ab4:	2f1b      	cmp	r7, #27
 8000ab6:	dd56      	ble.n	8000b66 <__aeabi_fsub+0x2f6>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	000c      	movs	r4, r1
 8000abc:	0015      	movs	r5, r2
 8000abe:	1a30      	subs	r0, r6, r0
 8000ac0:	e700      	b.n	80008c4 <__aeabi_fsub+0x54>
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	1b9f      	subs	r7, r3, r6
 8000ac6:	017b      	lsls	r3, r7, #5
 8000ac8:	d43d      	bmi.n	8000b46 <__aeabi_fsub+0x2d6>
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fsub+0x260>
 8000ace:	e6fe      	b.n	80008ce <__aeabi_fsub+0x5e>
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e716      	b.n	8000906 <__aeabi_fsub+0x96>
 8000ad8:	0005      	movs	r5, r0
 8000ada:	e7af      	b.n	8000a3c <__aeabi_fsub+0x1cc>
 8000adc:	0032      	movs	r2, r6
 8000ade:	4643      	mov	r3, r8
 8000ae0:	4641      	mov	r1, r8
 8000ae2:	40da      	lsrs	r2, r3
 8000ae4:	2320      	movs	r3, #32
 8000ae6:	1a5b      	subs	r3, r3, r1
 8000ae8:	409e      	lsls	r6, r3
 8000aea:	0030      	movs	r0, r6
 8000aec:	1e43      	subs	r3, r0, #1
 8000aee:	4198      	sbcs	r0, r3
 8000af0:	4310      	orrs	r0, r2
 8000af2:	e721      	b.n	8000938 <__aeabi_fsub+0xc8>
 8000af4:	2d00      	cmp	r5, #0
 8000af6:	d1a7      	bne.n	8000a48 <__aeabi_fsub+0x1d8>
 8000af8:	4663      	mov	r3, ip
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d059      	beq.n	8000bb2 <__aeabi_fsub+0x342>
 8000afe:	2200      	movs	r2, #0
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x296>
 8000b04:	e6ff      	b.n	8000906 <__aeabi_fsub+0x96>
 8000b06:	0030      	movs	r0, r6
 8000b08:	4460      	add	r0, ip
 8000b0a:	0143      	lsls	r3, r0, #5
 8000b0c:	d592      	bpl.n	8000a34 <__aeabi_fsub+0x1c4>
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <__aeabi_fsub+0x348>)
 8000b10:	3501      	adds	r5, #1
 8000b12:	4018      	ands	r0, r3
 8000b14:	e78e      	b.n	8000a34 <__aeabi_fsub+0x1c4>
 8000b16:	4663      	mov	r3, ip
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d047      	beq.n	8000bac <__aeabi_fsub+0x33c>
 8000b1c:	1e4b      	subs	r3, r1, #1
 8000b1e:	2901      	cmp	r1, #1
 8000b20:	d015      	beq.n	8000b4e <__aeabi_fsub+0x2de>
 8000b22:	29ff      	cmp	r1, #255	; 0xff
 8000b24:	d02b      	beq.n	8000b7e <__aeabi_fsub+0x30e>
 8000b26:	0019      	movs	r1, r3
 8000b28:	e74e      	b.n	80009c8 <__aeabi_fsub+0x158>
 8000b2a:	000c      	movs	r4, r1
 8000b2c:	464b      	mov	r3, r9
 8000b2e:	003d      	movs	r5, r7
 8000b30:	e784      	b.n	8000a3c <__aeabi_fsub+0x1cc>
 8000b32:	4662      	mov	r2, ip
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d18b      	bne.n	8000a50 <__aeabi_fsub+0x1e0>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d192      	bne.n	8000a62 <__aeabi_fsub+0x1f2>
 8000b3c:	2780      	movs	r7, #128	; 0x80
 8000b3e:	2400      	movs	r4, #0
 8000b40:	22ff      	movs	r2, #255	; 0xff
 8000b42:	03ff      	lsls	r7, r7, #15
 8000b44:	e6df      	b.n	8000906 <__aeabi_fsub+0x96>
 8000b46:	4663      	mov	r3, ip
 8000b48:	000c      	movs	r4, r1
 8000b4a:	1af7      	subs	r7, r6, r3
 8000b4c:	e6bf      	b.n	80008ce <__aeabi_fsub+0x5e>
 8000b4e:	0030      	movs	r0, r6
 8000b50:	4460      	add	r0, ip
 8000b52:	2501      	movs	r5, #1
 8000b54:	0143      	lsls	r3, r0, #5
 8000b56:	d400      	bmi.n	8000b5a <__aeabi_fsub+0x2ea>
 8000b58:	e76c      	b.n	8000a34 <__aeabi_fsub+0x1c4>
 8000b5a:	2502      	movs	r5, #2
 8000b5c:	e6f2      	b.n	8000944 <__aeabi_fsub+0xd4>
 8000b5e:	4663      	mov	r3, ip
 8000b60:	2501      	movs	r5, #1
 8000b62:	1b98      	subs	r0, r3, r6
 8000b64:	e6ae      	b.n	80008c4 <__aeabi_fsub+0x54>
 8000b66:	2320      	movs	r3, #32
 8000b68:	4664      	mov	r4, ip
 8000b6a:	4660      	mov	r0, ip
 8000b6c:	40fc      	lsrs	r4, r7
 8000b6e:	1bdf      	subs	r7, r3, r7
 8000b70:	40b8      	lsls	r0, r7
 8000b72:	1e43      	subs	r3, r0, #1
 8000b74:	4198      	sbcs	r0, r3
 8000b76:	4320      	orrs	r0, r4
 8000b78:	e79f      	b.n	8000aba <__aeabi_fsub+0x24a>
 8000b7a:	0005      	movs	r5, r0
 8000b7c:	e75e      	b.n	8000a3c <__aeabi_fsub+0x1cc>
 8000b7e:	464b      	mov	r3, r9
 8000b80:	e771      	b.n	8000a66 <__aeabi_fsub+0x1f6>
 8000b82:	2320      	movs	r3, #32
 8000b84:	4665      	mov	r5, ip
 8000b86:	4660      	mov	r0, ip
 8000b88:	40cd      	lsrs	r5, r1
 8000b8a:	1a59      	subs	r1, r3, r1
 8000b8c:	4088      	lsls	r0, r1
 8000b8e:	1e43      	subs	r3, r0, #1
 8000b90:	4198      	sbcs	r0, r3
 8000b92:	4328      	orrs	r0, r5
 8000b94:	e71c      	b.n	80009d0 <__aeabi_fsub+0x160>
 8000b96:	4663      	mov	r3, ip
 8000b98:	000c      	movs	r4, r1
 8000b9a:	2501      	movs	r5, #1
 8000b9c:	1af0      	subs	r0, r6, r3
 8000b9e:	e691      	b.n	80008c4 <__aeabi_fsub+0x54>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d095      	beq.n	8000ad0 <__aeabi_fsub+0x260>
 8000ba4:	000c      	movs	r4, r1
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	2200      	movs	r2, #0
 8000baa:	e6ac      	b.n	8000906 <__aeabi_fsub+0x96>
 8000bac:	464b      	mov	r3, r9
 8000bae:	000d      	movs	r5, r1
 8000bb0:	e744      	b.n	8000a3c <__aeabi_fsub+0x1cc>
 8000bb2:	464f      	mov	r7, r9
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	e6a6      	b.n	8000906 <__aeabi_fsub+0x96>
 8000bb8:	fbffffff 	.word	0xfbffffff
 8000bbc:	7dffffff 	.word	0x7dffffff
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_fsub+0x356>
 8000bc4:	e736      	b.n	8000a34 <__aeabi_fsub+0x1c4>
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e69c      	b.n	8000906 <__aeabi_fsub+0x96>

08000bcc <__aeabi_f2iz>:
 8000bcc:	0241      	lsls	r1, r0, #9
 8000bce:	0042      	lsls	r2, r0, #1
 8000bd0:	0fc3      	lsrs	r3, r0, #31
 8000bd2:	0a49      	lsrs	r1, r1, #9
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000bda:	dd03      	ble.n	8000be4 <__aeabi_f2iz+0x18>
 8000bdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000bde:	dd02      	ble.n	8000be6 <__aeabi_f2iz+0x1a>
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <__aeabi_f2iz+0x3c>)
 8000be2:	1898      	adds	r0, r3, r2
 8000be4:	4770      	bx	lr
 8000be6:	2080      	movs	r0, #128	; 0x80
 8000be8:	0400      	lsls	r0, r0, #16
 8000bea:	4301      	orrs	r1, r0
 8000bec:	2a95      	cmp	r2, #149	; 0x95
 8000bee:	dc07      	bgt.n	8000c00 <__aeabi_f2iz+0x34>
 8000bf0:	2096      	movs	r0, #150	; 0x96
 8000bf2:	1a82      	subs	r2, r0, r2
 8000bf4:	40d1      	lsrs	r1, r2
 8000bf6:	4248      	negs	r0, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f3      	bne.n	8000be4 <__aeabi_f2iz+0x18>
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	e7f1      	b.n	8000be4 <__aeabi_f2iz+0x18>
 8000c00:	3a96      	subs	r2, #150	; 0x96
 8000c02:	4091      	lsls	r1, r2
 8000c04:	e7f7      	b.n	8000bf6 <__aeabi_f2iz+0x2a>
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	7fffffff 	.word	0x7fffffff

08000c0c <__aeabi_i2f>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d013      	beq.n	8000c3a <__aeabi_i2f+0x2e>
 8000c12:	17c3      	asrs	r3, r0, #31
 8000c14:	18c6      	adds	r6, r0, r3
 8000c16:	405e      	eors	r6, r3
 8000c18:	0fc4      	lsrs	r4, r0, #31
 8000c1a:	0030      	movs	r0, r6
 8000c1c:	f000 f886 	bl	8000d2c <__clzsi2>
 8000c20:	239e      	movs	r3, #158	; 0x9e
 8000c22:	0005      	movs	r5, r0
 8000c24:	1a1b      	subs	r3, r3, r0
 8000c26:	2b96      	cmp	r3, #150	; 0x96
 8000c28:	dc0f      	bgt.n	8000c4a <__aeabi_i2f+0x3e>
 8000c2a:	2808      	cmp	r0, #8
 8000c2c:	dd01      	ble.n	8000c32 <__aeabi_i2f+0x26>
 8000c2e:	3d08      	subs	r5, #8
 8000c30:	40ae      	lsls	r6, r5
 8000c32:	0276      	lsls	r6, r6, #9
 8000c34:	0a76      	lsrs	r6, r6, #9
 8000c36:	b2d8      	uxtb	r0, r3
 8000c38:	e002      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	2600      	movs	r6, #0
 8000c40:	05c0      	lsls	r0, r0, #23
 8000c42:	4330      	orrs	r0, r6
 8000c44:	07e4      	lsls	r4, r4, #31
 8000c46:	4320      	orrs	r0, r4
 8000c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4a:	2b99      	cmp	r3, #153	; 0x99
 8000c4c:	dd0c      	ble.n	8000c68 <__aeabi_i2f+0x5c>
 8000c4e:	2205      	movs	r2, #5
 8000c50:	0031      	movs	r1, r6
 8000c52:	1a12      	subs	r2, r2, r0
 8000c54:	40d1      	lsrs	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	0001      	movs	r1, r0
 8000c5a:	0030      	movs	r0, r6
 8000c5c:	311b      	adds	r1, #27
 8000c5e:	4088      	lsls	r0, r1
 8000c60:	1e41      	subs	r1, r0, #1
 8000c62:	4188      	sbcs	r0, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	0016      	movs	r6, r2
 8000c68:	2d05      	cmp	r5, #5
 8000c6a:	dc12      	bgt.n	8000c92 <__aeabi_i2f+0x86>
 8000c6c:	0031      	movs	r1, r6
 8000c6e:	4f0d      	ldr	r7, [pc, #52]	; (8000ca4 <__aeabi_i2f+0x98>)
 8000c70:	4039      	ands	r1, r7
 8000c72:	0772      	lsls	r2, r6, #29
 8000c74:	d009      	beq.n	8000c8a <__aeabi_i2f+0x7e>
 8000c76:	200f      	movs	r0, #15
 8000c78:	4030      	ands	r0, r6
 8000c7a:	2804      	cmp	r0, #4
 8000c7c:	d005      	beq.n	8000c8a <__aeabi_i2f+0x7e>
 8000c7e:	3104      	adds	r1, #4
 8000c80:	014a      	lsls	r2, r1, #5
 8000c82:	d502      	bpl.n	8000c8a <__aeabi_i2f+0x7e>
 8000c84:	239f      	movs	r3, #159	; 0x9f
 8000c86:	4039      	ands	r1, r7
 8000c88:	1b5b      	subs	r3, r3, r5
 8000c8a:	0189      	lsls	r1, r1, #6
 8000c8c:	0a4e      	lsrs	r6, r1, #9
 8000c8e:	b2d8      	uxtb	r0, r3
 8000c90:	e7d6      	b.n	8000c40 <__aeabi_i2f+0x34>
 8000c92:	1f6a      	subs	r2, r5, #5
 8000c94:	4096      	lsls	r6, r2
 8000c96:	0031      	movs	r1, r6
 8000c98:	4f02      	ldr	r7, [pc, #8]	; (8000ca4 <__aeabi_i2f+0x98>)
 8000c9a:	4039      	ands	r1, r7
 8000c9c:	0772      	lsls	r2, r6, #29
 8000c9e:	d0f4      	beq.n	8000c8a <__aeabi_i2f+0x7e>
 8000ca0:	e7e9      	b.n	8000c76 <__aeabi_i2f+0x6a>
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	fbffffff 	.word	0xfbffffff

08000ca8 <__aeabi_ui2f>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	1e05      	subs	r5, r0, #0
 8000cac:	d00e      	beq.n	8000ccc <__aeabi_ui2f+0x24>
 8000cae:	f000 f83d 	bl	8000d2c <__clzsi2>
 8000cb2:	239e      	movs	r3, #158	; 0x9e
 8000cb4:	0004      	movs	r4, r0
 8000cb6:	1a1b      	subs	r3, r3, r0
 8000cb8:	2b96      	cmp	r3, #150	; 0x96
 8000cba:	dc0c      	bgt.n	8000cd6 <__aeabi_ui2f+0x2e>
 8000cbc:	2808      	cmp	r0, #8
 8000cbe:	dd01      	ble.n	8000cc4 <__aeabi_ui2f+0x1c>
 8000cc0:	3c08      	subs	r4, #8
 8000cc2:	40a5      	lsls	r5, r4
 8000cc4:	026d      	lsls	r5, r5, #9
 8000cc6:	0a6d      	lsrs	r5, r5, #9
 8000cc8:	b2d8      	uxtb	r0, r3
 8000cca:	e001      	b.n	8000cd0 <__aeabi_ui2f+0x28>
 8000ccc:	2000      	movs	r0, #0
 8000cce:	2500      	movs	r5, #0
 8000cd0:	05c0      	lsls	r0, r0, #23
 8000cd2:	4328      	orrs	r0, r5
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2b99      	cmp	r3, #153	; 0x99
 8000cd8:	dd09      	ble.n	8000cee <__aeabi_ui2f+0x46>
 8000cda:	0002      	movs	r2, r0
 8000cdc:	0029      	movs	r1, r5
 8000cde:	321b      	adds	r2, #27
 8000ce0:	4091      	lsls	r1, r2
 8000ce2:	1e4a      	subs	r2, r1, #1
 8000ce4:	4191      	sbcs	r1, r2
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	1a12      	subs	r2, r2, r0
 8000cea:	40d5      	lsrs	r5, r2
 8000cec:	430d      	orrs	r5, r1
 8000cee:	2c05      	cmp	r4, #5
 8000cf0:	dc12      	bgt.n	8000d18 <__aeabi_ui2f+0x70>
 8000cf2:	0029      	movs	r1, r5
 8000cf4:	4e0c      	ldr	r6, [pc, #48]	; (8000d28 <__aeabi_ui2f+0x80>)
 8000cf6:	4031      	ands	r1, r6
 8000cf8:	076a      	lsls	r2, r5, #29
 8000cfa:	d009      	beq.n	8000d10 <__aeabi_ui2f+0x68>
 8000cfc:	200f      	movs	r0, #15
 8000cfe:	4028      	ands	r0, r5
 8000d00:	2804      	cmp	r0, #4
 8000d02:	d005      	beq.n	8000d10 <__aeabi_ui2f+0x68>
 8000d04:	3104      	adds	r1, #4
 8000d06:	014a      	lsls	r2, r1, #5
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_ui2f+0x68>
 8000d0a:	239f      	movs	r3, #159	; 0x9f
 8000d0c:	4031      	ands	r1, r6
 8000d0e:	1b1b      	subs	r3, r3, r4
 8000d10:	0189      	lsls	r1, r1, #6
 8000d12:	0a4d      	lsrs	r5, r1, #9
 8000d14:	b2d8      	uxtb	r0, r3
 8000d16:	e7db      	b.n	8000cd0 <__aeabi_ui2f+0x28>
 8000d18:	1f62      	subs	r2, r4, #5
 8000d1a:	4095      	lsls	r5, r2
 8000d1c:	0029      	movs	r1, r5
 8000d1e:	4e02      	ldr	r6, [pc, #8]	; (8000d28 <__aeabi_ui2f+0x80>)
 8000d20:	4031      	ands	r1, r6
 8000d22:	076a      	lsls	r2, r5, #29
 8000d24:	d0f4      	beq.n	8000d10 <__aeabi_ui2f+0x68>
 8000d26:	e7e9      	b.n	8000cfc <__aeabi_ui2f+0x54>
 8000d28:	fbffffff 	.word	0xfbffffff

08000d2c <__clzsi2>:
 8000d2c:	211c      	movs	r1, #28
 8000d2e:	2301      	movs	r3, #1
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d301      	bcc.n	8000d3a <__clzsi2+0xe>
 8000d36:	0c00      	lsrs	r0, r0, #16
 8000d38:	3910      	subs	r1, #16
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	d301      	bcc.n	8000d44 <__clzsi2+0x18>
 8000d40:	0a00      	lsrs	r0, r0, #8
 8000d42:	3908      	subs	r1, #8
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d301      	bcc.n	8000d4e <__clzsi2+0x22>
 8000d4a:	0900      	lsrs	r0, r0, #4
 8000d4c:	3904      	subs	r1, #4
 8000d4e:	a202      	add	r2, pc, #8	; (adr r2, 8000d58 <__clzsi2+0x2c>)
 8000d50:	5c10      	ldrb	r0, [r2, r0]
 8000d52:	1840      	adds	r0, r0, r1
 8000d54:	4770      	bx	lr
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	02020304 	.word	0x02020304
 8000d5c:	01010101 	.word	0x01010101
	...

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <SystemCoreClockUpdate+0xdc>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	220c      	movs	r2, #12
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b08      	cmp	r3, #8
 8000d98:	d011      	beq.n	8000dbe <SystemCoreClockUpdate+0x4a>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d841      	bhi.n	8000e24 <SystemCoreClockUpdate+0xb0>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <SystemCoreClockUpdate+0x3a>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d004      	beq.n	8000db6 <SystemCoreClockUpdate+0x42>
 8000dac:	e03a      	b.n	8000e24 <SystemCoreClockUpdate+0xb0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000db0:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <SystemCoreClockUpdate+0xe4>)
 8000db2:	601a      	str	r2, [r3, #0]
      break;
 8000db4:	e03a      	b.n	8000e2c <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <SystemCoreClockUpdate+0xe4>)
 8000dba:	601a      	str	r2, [r3, #0]
      break;
 8000dbc:	e036      	b.n	8000e2c <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <SystemCoreClockUpdate+0xdc>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	23f0      	movs	r3, #240	; 0xf0
 8000dc4:	039b      	lsls	r3, r3, #14
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <SystemCoreClockUpdate+0xdc>)
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	025b      	lsls	r3, r3, #9
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	0c9b      	lsrs	r3, r3, #18
 8000dda:	3302      	adds	r3, #2
 8000ddc:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <SystemCoreClockUpdate+0xdc>)
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	220f      	movs	r2, #15
 8000de4:	4013      	ands	r3, r2
 8000de6:	3301      	adds	r3, #1
 8000de8:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	025b      	lsls	r3, r3, #9
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d10a      	bne.n	8000e0a <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <SystemCoreClockUpdate+0xe4>)
 8000df8:	f7ff f986 	bl	8000108 <__udivsi3>
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	001a      	movs	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	435a      	muls	r2, r3
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000e06:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8000e08:	e010      	b.n	8000e2c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	0152      	lsls	r2, r2, #5
 8000e10:	1a52      	subs	r2, r2, r1
 8000e12:	0193      	lsls	r3, r2, #6
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	185b      	adds	r3, r3, r1
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000e20:	601a      	str	r2, [r3, #0]
      break;
 8000e22:	e003      	b.n	8000e2c <SystemCoreClockUpdate+0xb8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000e26:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <SystemCoreClockUpdate+0xe4>)
 8000e28:	601a      	str	r2, [r3, #0]
      break;
 8000e2a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <SystemCoreClockUpdate+0xdc>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	220f      	movs	r2, #15
 8000e34:	4013      	ands	r3, r2
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <SystemCoreClockUpdate+0xe8>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
 8000e3a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	40da      	lsrs	r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <SystemCoreClockUpdate+0xe0>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	20000000 	.word	0x20000000
 8000e58:	007a1200 	.word	0x007a1200
 8000e5c:	08001d44 	.word	0x08001d44

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	0002      	movs	r2, r0
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b7f      	cmp	r3, #127	; 0x7f
 8000e72:	d809      	bhi.n	8000e88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	231f      	movs	r3, #31
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_EnableIRQ+0x30>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	4091      	lsls	r1, r2
 8000e84:	000a      	movs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
  }
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <hwInit>:
void dacInit(void);
void pwmInit(void);
void encoderInit(void);
void uartInit(void);

void hwInit(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	rccInit();
 8000e98:	f000 f81a 	bl	8000ed0 <rccInit>

	RCC->AHBENR |= RCC_AHBENR_DMAEN;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <hwInit+0x38>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <hwInit+0x38>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	615a      	str	r2, [r3, #20]

	gpioInit();
 8000ea8:	f000 f864 	bl	8000f74 <gpioInit>
	dacInit();
 8000eac:	f000 f89c 	bl	8000fe8 <dacInit>
	pwmInit();
 8000eb0:	f000 f8d4 	bl	800105c <pwmInit>
	encoderInit();
 8000eb4:	f000 f938 	bl	8001128 <encoderInit>
//	uartInit();

	RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <hwInit+0x38>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <hwInit+0x38>)
 8000ebe:	2140      	movs	r1, #64	; 0x40
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	615a      	str	r2, [r3, #20]
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <rccInit>:

// RCC input = HSI, 8Mhz -> PLL -> 48Mhz
void rccInit(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	// HSI(8MHz) on
	RCC->CR |= RCC_CR_HSION;
 8000ed4:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <rccInit+0x9c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <rccInit+0x9c>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
	RCC->CR &= ~RCC_CR_PLLON;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <rccInit+0x9c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <rccInit+0x9c>)
 8000ee6:	4922      	ldr	r1, [pc, #136]	; (8000f70 <rccInit+0xa0>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
	while(RCC->CR & RCC_CR_PLLRDY);
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <rccInit+0x9c>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	049b      	lsls	r3, r3, #18
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d1f9      	bne.n	8000eee <rccInit+0x1e>
	// Set HSI as PLL src + PLLMul to x12
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2 + RCC_CFGR_PLLMUL12;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <rccInit+0x9c>)
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <rccInit+0x9c>)
 8000f00:	21a0      	movs	r1, #160	; 0xa0
 8000f02:	0389      	lsls	r1, r1, #14
 8000f04:	430a      	orrs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]
	// PLL turn on
	RCC->CR |= RCC_CR_PLLON;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <rccInit+0x9c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <rccInit+0x9c>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0449      	lsls	r1, r1, #17
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <rccInit+0x9c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	049b      	lsls	r3, r3, #18
 8000f20:	4013      	ands	r3, r2
 8000f22:	d0f9      	beq.n	8000f18 <rccInit+0x48>
	// System clock mux
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <rccInit+0x9c>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <rccInit+0x9c>)
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	605a      	str	r2, [r3, #4]
	// AHB div to 1
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <rccInit+0x9c>)
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <rccInit+0x9c>)
 8000f34:	6852      	ldr	r2, [r2, #4]
 8000f36:	605a      	str	r2, [r3, #4]
	// APB div to 1
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <rccInit+0x9c>)
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <rccInit+0x9c>)
 8000f3c:	6852      	ldr	r2, [r2, #4]
 8000f3e:	605a      	str	r2, [r3, #4]
	// check HSI as system clock flag ready
	while(((RCC->CFGR & RCC_CFGR_SWS_0) && (RCC->CFGR & RCC_CFGR_SWS_1)) != RCC_CFGR_SWS_HSI);
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <rccInit+0x9c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2204      	movs	r2, #4
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d006      	beq.n	8000f5a <rccInit+0x8a>
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <rccInit+0x9c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2208      	movs	r2, #8
 8000f52:	4013      	ands	r3, r2
 8000f54:	d001      	beq.n	8000f5a <rccInit+0x8a>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <rccInit+0x8c>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <rccInit+0x72>
	// set system variable SystemCoreClock to current clock value
	SystemCoreClockUpdate();
 8000f60:	f7ff ff08 	bl	8000d74 <SystemCoreClockUpdate>
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	feffffff 	.word	0xfeffffff

08000f74 <gpioInit>:

void gpioInit(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	// PA4 = DAC_OUT1
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <gpioInit+0x68>)
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <gpioInit+0x68>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	0289      	lsls	r1, r1, #10
 8000f82:	430a      	orrs	r2, r1
 8000f84:	615a      	str	r2, [r3, #20]
	// analog mode
	GPIOA->MODER |= GPIO_MODER_MODER4;
 8000f86:	2390      	movs	r3, #144	; 0x90
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2390      	movs	r3, #144	; 0x90
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	21c0      	movs	r1, #192	; 0xc0
 8000f92:	0089      	lsls	r1, r1, #2
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
	// PA0 = USR BTN with pull up already
	// PC9 = built-in LED, push-pull output
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <gpioInit+0x68>)
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <gpioInit+0x68>)
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	0309      	lsls	r1, r1, #12
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	615a      	str	r2, [r3, #20]
	GPIOC->MODER |= GPIO_MODER_MODER9_0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <gpioInit+0x6c>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <gpioInit+0x6c>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	02c9      	lsls	r1, r1, #11
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

	// TIM1 PA8..11 = [AF2]
	GPIOA->AFR[1] |= (2 << GPIO_AFRH_AFSEL8_Pos) + (2 << GPIO_AFRH_AFSEL9_Pos)
 8000fb4:	2390      	movs	r3, #144	; 0x90
 8000fb6:	05db      	lsls	r3, r3, #23
 8000fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fba:	2390      	movs	r3, #144	; 0x90
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <gpioInit+0x70>)
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
			+ (2 << GPIO_AFRH_AFSEL10_Pos) + (2 << GPIO_AFRH_AFSEL11_Pos);
	GPIOA->MODER |= GPIO_MODER_MODER8_1 + GPIO_MODER_MODER9_1 +
 8000fc4:	2390      	movs	r3, #144	; 0x90
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2390      	movs	r3, #144	; 0x90
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	21aa      	movs	r1, #170	; 0xaa
 8000fd0:	0409      	lsls	r1, r1, #16
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
	// PA10 = USART1_RX
//	GPIOA->AFR[1] |= (1 << GPIO_AFRH_AFSEL9_Pos) + (1 << GPIO_AFRH_AFSEL10_Pos);
//	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR9_0;
//	GPIOA->MODER &= ~(GPIO_MODER_MODER9 + GPIO_MODER_MODER10);
//	GPIOA->MODER |= (GPIO_MODER_MODER9_1 + GPIO_MODER_MODER10_1);
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000800 	.word	0x48000800
 8000fe4:	00002222 	.word	0x00002222

08000fe8 <dacInit>:

void dacInit(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_DACEN+RCC_APB1ENR_TIM14EN;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <dacInit+0x5c>)
 8000fee:	69da      	ldr	r2, [r3, #28]
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <dacInit+0x5c>)
 8000ff2:	4915      	ldr	r1, [pc, #84]	; (8001048 <dacInit+0x60>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	61da      	str	r2, [r3, #28]

	// software trigger + dac enable
	DAC->CR |= (DAC_CR_TSEL1_Msk + DAC_CR_EN1);
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <dacInit+0x64>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <dacInit+0x64>)
 8000ffe:	2139      	movs	r1, #57	; 0x39
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

	TIM14->PSC = (SystemCoreClock/1000000)-1;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <dacInit+0x68>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4912      	ldr	r1, [pc, #72]	; (8001054 <dacInit+0x6c>)
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff f87c 	bl	8000108 <__udivsi3>
 8001010:	0003      	movs	r3, r0
 8001012:	001a      	movs	r2, r3
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <dacInit+0x70>)
 8001016:	3a01      	subs	r2, #1
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
	TIM14->ARR = (M2U(PERIOD)/STEPS)-1;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <dacInit+0x70>)
 800101c:	22c7      	movs	r2, #199	; 0xc7
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->DIER |= TIM_DIER_UIE;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <dacInit+0x70>)
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <dacInit+0x70>)
 8001026:	2101      	movs	r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM14_IRQn);
 800102c:	2013      	movs	r0, #19
 800102e:	f7ff ff17 	bl	8000e60 <__NVIC_EnableIRQ>
	TIM14->CR1 |= TIM_CR1_CEN;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <dacInit+0x70>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <dacInit+0x70>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	20000100 	.word	0x20000100
 800104c:	40007400 	.word	0x40007400
 8001050:	20000000 	.word	0x20000000
 8001054:	000f4240 	.word	0x000f4240
 8001058:	40002000 	.word	0x40002000

0800105c <pwmInit>:


void pwmInit(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <pwmInit+0xa8>)
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <pwmInit+0xa8>)
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0109      	lsls	r1, r1, #4
 800106a:	430a      	orrs	r2, r1
 800106c:	619a      	str	r2, [r3, #24]
	//	input clock = 48mhz
	//	TIM15->ARR = (4096/PWM_DIV) - 1; // frequency
	TIM1->ARR = (4096/PWM_DIV) - 1; // frequency
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <pwmInit+0xac>)
 8001070:	4a26      	ldr	r2, [pc, #152]	; (800110c <pwmInit+0xb0>)
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CCR1 = 0; // duty cycle for start
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <pwmInit+0xac>)
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <pwmInit+0xac>)
 800107c:	2200      	movs	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos) + TIM_CCMR1_OC1PE +
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <pwmInit+0xac>)
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <pwmInit+0xac>)
 8001086:	4922      	ldr	r1, [pc, #136]	; (8001110 <pwmInit+0xb4>)
 8001088:	430a      	orrs	r2, r1
 800108a:	619a      	str	r2, [r3, #24]
			(6 << TIM_CCMR1_OC2M_Pos) + TIM_CCMR1_OC2PE;// out.compare1&2 in pwm mode 1, preload enable

	TIM1->CCR3 = 0;
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <pwmInit+0xac>)
 800108e:	2200      	movs	r2, #0
 8001090:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <pwmInit+0xac>)
 8001094:	2200      	movs	r2, #0
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCMR2 |= (6 << TIM_CCMR2_OC3M_Pos) + TIM_CCMR2_OC3PE +
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <pwmInit+0xac>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <pwmInit+0xac>)
 800109e:	491c      	ldr	r1, [pc, #112]	; (8001110 <pwmInit+0xb4>)
 80010a0:	430a      	orrs	r2, r1
 80010a2:	61da      	str	r2, [r3, #28]
			(6 << TIM_CCMR2_OC4M_Pos) + TIM_CCMR2_OC4PE;// out.compare3&4 in pwm mode 1, preload enable

	TIM1->CCER |= TIM_CCER_CC1E + TIM_CCER_CC2E + TIM_CCER_CC3E + TIM_CCER_CC4E; // cap/comp.1 enable
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <pwmInit+0xac>)
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <pwmInit+0xac>)
 80010aa:	491a      	ldr	r1, [pc, #104]	; (8001114 <pwmInit+0xb8>)
 80010ac:	430a      	orrs	r2, r1
 80010ae:	621a      	str	r2, [r3, #32]
	TIM1->BDTR |= TIM_BDTR_MOE; // main output enable
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <pwmInit+0xac>)
 80010b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <pwmInit+0xac>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0209      	lsls	r1, r1, #8
 80010ba:	430a      	orrs	r2, r1
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->DIER |= 0x1E00; // enable DMA on all 4 channels
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <pwmInit+0xac>)
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <pwmInit+0xac>)
 80010c4:	21f0      	movs	r1, #240	; 0xf0
 80010c6:	0149      	lsls	r1, r1, #5
 80010c8:	430a      	orrs	r2, r1
 80010ca:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= TIM_CR1_CEN; // counter enable
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <pwmInit+0xac>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <pwmInit+0xac>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
	TIM1->EGR |= TIM_EGR_UG; // generate update
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <pwmInit+0xac>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <pwmInit+0xac>)
 80010de:	2101      	movs	r1, #1
 80010e0:	430a      	orrs	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]

	// dma transfer
	DMA1_Channel5->CPAR = (uint32_t)&TIM1->CCR1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <pwmInit+0xbc>)
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <pwmInit+0xc0>)
 80010e8:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t)pwmBuffer;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <pwmInit+0xbc>)
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <pwmInit+0xc4>)
 80010ee:	60da      	str	r2, [r3, #12]
	DMA1_Channel5->CNDTR = CHANNELS;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <pwmInit+0xbc>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CCR = (3 << DMA_CCR_PL_Pos) + DMA_CCR_MSIZE_0 + DMA_CCR_PSIZE_1
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <pwmInit+0xbc>)
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <pwmInit+0xc8>)
 80010fa:	601a      	str	r2, [r3, #0]
			+ DMA_CCR_MINC + DMA_CCR_PINC + DMA_CCR_DIR
			+ DMA_CCR_CIRC + DMA_CCR_EN;
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	40021000 	.word	0x40021000
 8001108:	40012c00 	.word	0x40012c00
 800110c:	000001ff 	.word	0x000001ff
 8001110:	00006868 	.word	0x00006868
 8001114:	00001111 	.word	0x00001111
 8001118:	40020058 	.word	0x40020058
 800111c:	40012c34 	.word	0x40012c34
 8001120:	200001ac 	.word	0x200001ac
 8001124:	000036f1 	.word	0x000036f1

08001128 <encoderInit>:

void encoderInit(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
// tim3 is used in quad.encoder mode
// AF1 = tim3_ch1 pin (PA6) + tim3_ch2 pin (PA7)
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL6_Pos) + (1 << GPIO_AFRL_AFRL7_Pos);
 800112c:	2390      	movs	r3, #144	; 0x90
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	6a1a      	ldr	r2, [r3, #32]
 8001132:	2390      	movs	r3, #144	; 0x90
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	2188      	movs	r1, #136	; 0x88
 8001138:	0549      	lsls	r1, r1, #21
 800113a:	430a      	orrs	r2, r1
 800113c:	621a      	str	r2, [r3, #32]
	GPIOA->MODER &= ~(GPIO_MODER_MODER6 + GPIO_MODER_MODER7);
 800113e:	2390      	movs	r3, #144	; 0x90
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2390      	movs	r3, #144	; 0x90
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	491b      	ldr	r1, [pc, #108]	; (80011b8 <encoderInit+0x90>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER6_1 + GPIO_MODER_MODER7_1);
 800114e:	2390      	movs	r3, #144	; 0x90
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2390      	movs	r3, #144	; 0x90
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	21a0      	movs	r1, #160	; 0xa0
 800115a:	0209      	lsls	r1, r1, #8
 800115c:	430a      	orrs	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <encoderInit+0x94>)
 8001162:	69da      	ldr	r2, [r3, #28]
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <encoderInit+0x94>)
 8001166:	2102      	movs	r1, #2
 8001168:	430a      	orrs	r2, r1
 800116a:	61da      	str	r2, [r3, #28]

	// CC1 & CC2 channels as inputs, IC1 mapped to TI1, IC2 mapped to TI2
	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 + TIM_CCMR1_CC2S_0);
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <encoderInit+0x98>)
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <encoderInit+0x98>)
 8001172:	2102      	movs	r1, #2
 8001174:	31ff      	adds	r1, #255	; 0xff
 8001176:	430a      	orrs	r2, r1
 8001178:	619a      	str	r2, [r3, #24]
	// polarity: on noninverted/rising edge
	TIM3->CCER &= ~(TIM_CCER_CC1P + TIM_CCER_CC2P);
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <encoderInit+0x98>)
 800117c:	6a1a      	ldr	r2, [r3, #32]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <encoderInit+0x98>)
 8001180:	2122      	movs	r1, #34	; 0x22
 8001182:	438a      	bics	r2, r1
 8001184:	621a      	str	r2, [r3, #32]
	// select encoder mode 1
	TIM3->SMCR |= (1 << TIM_SMCR_SMS_Pos);
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <encoderInit+0x98>)
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <encoderInit+0x98>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	609a      	str	r2, [r3, #8]
	// filter for jittering
	TIM3->CCMR1 |= (3 << TIM_CCMR1_IC1F_Pos);
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <encoderInit+0x98>)
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <encoderInit+0x98>)
 8001198:	2130      	movs	r1, #48	; 0x30
 800119a:	430a      	orrs	r2, r1
 800119c:	619a      	str	r2, [r3, #24]
	// counter top value
	TIM3->ARR = ENC_MAX;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <encoderInit+0x98>)
 80011a0:	22c8      	movs	r2, #200	; 0xc8
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
	// lastly - enabling counter
	TIM3->CR1 |= TIM_CR1_CEN;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <encoderInit+0x98>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <encoderInit+0x98>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	ffff0fff 	.word	0xffff0fff
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40000400 	.word	0x40000400

080011c4 <pollKeys>:
static uint16_t buttonCnt, timeCnt, oldAmplitude[CHANNELS];

//------------------------------------------------
#define RESET_KEY_STATE 0xff
static uint8_t pressedKeys = RESET_KEY_STATE;
void pollKeys() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	static uint8_t oldKeys = 0;
	uint8_t newKeys = 0;
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	// on-board button
	if (GPIOA->IDR & GPIO_IDR_0) {
 80011d0:	2390      	movs	r3, #144	; 0x90
 80011d2:	05db      	lsls	r3, r3, #23
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	d00b      	beq.n	80011f4 <pollKeys+0x30>
		buttonCnt++;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <pollKeys+0x68>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <pollKeys+0x68>)
 80011e6:	801a      	strh	r2, [r3, #0]
		newKeys |= 1;
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	1dfa      	adds	r2, r7, #7
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
	}

	// encoder button
	if ((GPIOA->IDR & GPIO_IDR_5) == 0) {
 80011f4:	2390      	movs	r3, #144	; 0x90
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	2220      	movs	r2, #32
 80011fc:	4013      	ands	r3, r2
 80011fe:	d105      	bne.n	800120c <pollKeys+0x48>
		newKeys |= 2;
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	2102      	movs	r1, #2
 8001208:	430a      	orrs	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
	}

	pressedKeys = newKeys & oldKeys;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <pollKeys+0x6c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	1dfa      	adds	r2, r7, #7
 8001212:	7812      	ldrb	r2, [r2, #0]
 8001214:	4013      	ands	r3, r2
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <pollKeys+0x70>)
 800121a:	701a      	strb	r2, [r3, #0]
	oldKeys = newKeys;
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <pollKeys+0x6c>)
 800121e:	1dfa      	adds	r2, r7, #7
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	701a      	strb	r2, [r3, #0]
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000088 	.word	0x20000088
 8001230:	20000094 	.word	0x20000094
 8001234:	20000004 	.word	0x20000004

08001238 <getKeys>:

uint8_t getKeys() {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if (pressedKeys == RESET_KEY_STATE) {
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <getKeys+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2bff      	cmp	r3, #255	; 0xff
 8001242:	d103      	bne.n	800124c <getKeys+0x14>
		pollKeys();
 8001244:	f7ff ffbe 	bl	80011c4 <pollKeys>
		pollKeys();
 8001248:	f7ff ffbc 	bl	80011c4 <pollKeys>
	}
	return pressedKeys;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <getKeys+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20000004 	.word	0x20000004

0800125c <keyReaction>:
//------------------------------------------------

void keyReaction() {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	static uint8_t key, oldKey;

	key = getKeys();
 8001260:	f7ff ffea 	bl	8001238 <getKeys>
 8001264:	0003      	movs	r3, r0
 8001266:	001a      	movs	r2, r3
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <keyReaction+0xc4>)
 800126a:	701a      	strb	r2, [r3, #0]
	if (!key && oldKey) { // press release moment
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <keyReaction+0xc4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d14d      	bne.n	8001310 <keyReaction+0xb4>
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <keyReaction+0xc8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d049      	beq.n	8001310 <keyReaction+0xb4>
		if (oldKey == 1) {
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <keyReaction+0xc8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d12d      	bne.n	80012e0 <keyReaction+0x84>
			if (buttonCnt > (2*SECOND)) { // long press
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <keyReaction+0xcc>)
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	23fa      	movs	r3, #250	; 0xfa
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	429a      	cmp	r2, r3
 800128e:	d911      	bls.n	80012b4 <keyReaction+0x58>
				devInfo.controlByte ^= (halfSine1 << devInfo.currChannel);
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <keyReaction+0xd0>)
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	5c9b      	ldrb	r3, [r3, r2]
 8001296:	b25a      	sxtb	r2, r3
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <keyReaction+0xd0>)
 800129a:	2141      	movs	r1, #65	; 0x41
 800129c:	5c5b      	ldrb	r3, [r3, r1]
 800129e:	0019      	movs	r1, r3
 80012a0:	2301      	movs	r3, #1
 80012a2:	408b      	lsls	r3, r1
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	4053      	eors	r3, r2
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	b2d9      	uxtb	r1, r3
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <keyReaction+0xd0>)
 80012ae:	2240      	movs	r2, #64	; 0x40
 80012b0:	5499      	strb	r1, [r3, r2]
 80012b2:	e02a      	b.n	800130a <keyReaction+0xae>
			} else if (buttonCnt > 5) { // press
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <keyReaction+0xcc>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d926      	bls.n	800130a <keyReaction+0xae>
				devInfo.controlByte |= runScript;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <keyReaction+0xd0>)
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	4252      	negs	r2, r2
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b2d9      	uxtb	r1, r3
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <keyReaction+0xd0>)
 80012cc:	2240      	movs	r2, #64	; 0x40
 80012ce:	5499      	strb	r1, [r3, r2]
				oldAmplitude[0] = devInfo.workData.amplitude[0];
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <keyReaction+0xd0>)
 80012d2:	889a      	ldrh	r2, [r3, #4]
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <keyReaction+0xd4>)
 80012d6:	801a      	strh	r2, [r3, #0]
				timeCnt = 0;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <keyReaction+0xd8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	e014      	b.n	800130a <keyReaction+0xae>
			}
		} else if (oldKey == 2) {
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <keyReaction+0xc8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d110      	bne.n	800130a <keyReaction+0xae>
			devInfo.currChannel++;
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <keyReaction+0xd0>)
 80012ea:	2241      	movs	r2, #65	; 0x41
 80012ec:	5c9b      	ldrb	r3, [r3, r2]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2d9      	uxtb	r1, r3
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <keyReaction+0xd0>)
 80012f4:	2241      	movs	r2, #65	; 0x41
 80012f6:	5499      	strb	r1, [r3, r2]
			devInfo.currChannel %= CHANNELS;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <keyReaction+0xd0>)
 80012fa:	2241      	movs	r2, #65	; 0x41
 80012fc:	5c9b      	ldrb	r3, [r3, r2]
 80012fe:	2203      	movs	r2, #3
 8001300:	4013      	ands	r3, r2
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <keyReaction+0xd0>)
 8001306:	2241      	movs	r2, #65	; 0x41
 8001308:	5499      	strb	r1, [r3, r2]
		}
		buttonCnt = 0;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <keyReaction+0xcc>)
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
	}
	oldKey = key;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <keyReaction+0xc4>)
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <keyReaction+0xc8>)
 8001316:	701a      	strb	r2, [r3, #0]
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20000095 	.word	0x20000095
 8001324:	20000096 	.word	0x20000096
 8001328:	20000088 	.word	0x20000088
 800132c:	20000168 	.word	0x20000168
 8001330:	2000008c 	.word	0x2000008c
 8001334:	2000008a 	.word	0x2000008a

08001338 <encoderReaction>:

#define ENCODER_STEP 15
void encoderReaction(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	static ENC_TYPE oldVal = 0;
	ENC_TYPE newVal = TIM3->CNT;
 800133e:	4b30      	ldr	r3, [pc, #192]	; (8001400 <encoderReaction+0xc8>)
 8001340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	701a      	strb	r2, [r3, #0]

	if (newVal != oldVal) {
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <encoderReaction+0xcc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	1dfa      	adds	r2, r7, #7
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d051      	beq.n	80013f6 <encoderReaction+0xbe>
		int16_t diff = newVal - oldVal;
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <encoderReaction+0xcc>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b29a      	uxth	r2, r3
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	801a      	strh	r2, [r3, #0]
		if (diff > 0) { // positive change
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	5e9b      	ldrsh	r3, [r3, r2]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd20      	ble.n	80013b2 <encoderReaction+0x7a>
			if (devInfo.workData.amplitude[devInfo.currChannel] <= (0xfff-ENCODER_STEP))
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <encoderReaction+0xd0>)
 8001372:	2241      	movs	r2, #65	; 0x41
 8001374:	5c9b      	ldrb	r3, [r3, r2]
 8001376:	4a24      	ldr	r2, [pc, #144]	; (8001408 <encoderReaction+0xd0>)
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	3304      	adds	r3, #4
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	23ff      	movs	r3, #255	; 0xff
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	429a      	cmp	r2, r3
 8001386:	d832      	bhi.n	80013ee <encoderReaction+0xb6>
				devInfo.workData.amplitude[devInfo.currChannel] += ENCODER_STEP;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <encoderReaction+0xd0>)
 800138a:	2241      	movs	r2, #65	; 0x41
 800138c:	5c9b      	ldrb	r3, [r3, r2]
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <encoderReaction+0xd0>)
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	18d3      	adds	r3, r2, r3
 8001394:	3304      	adds	r3, #4
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <encoderReaction+0xd0>)
 800139a:	2141      	movs	r1, #65	; 0x41
 800139c:	5c52      	ldrb	r2, [r2, r1]
 800139e:	0010      	movs	r0, r2
 80013a0:	330f      	adds	r3, #15
 80013a2:	b299      	uxth	r1, r3
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <encoderReaction+0xd0>)
 80013a6:	0043      	lsls	r3, r0, #1
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	3304      	adds	r3, #4
 80013ac:	1c0a      	adds	r2, r1, #0
 80013ae:	801a      	strh	r2, [r3, #0]
 80013b0:	e01d      	b.n	80013ee <encoderReaction+0xb6>
		} else { // negative change
			if (devInfo.workData.amplitude[devInfo.currChannel] >= ENCODER_STEP)
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <encoderReaction+0xd0>)
 80013b4:	2241      	movs	r2, #65	; 0x41
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <encoderReaction+0xd0>)
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	3304      	adds	r3, #4
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	2b0e      	cmp	r3, #14
 80013c4:	d913      	bls.n	80013ee <encoderReaction+0xb6>
				devInfo.workData.amplitude[devInfo.currChannel] -= ENCODER_STEP;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <encoderReaction+0xd0>)
 80013c8:	2241      	movs	r2, #65	; 0x41
 80013ca:	5c9b      	ldrb	r3, [r3, r2]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <encoderReaction+0xd0>)
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	3304      	adds	r3, #4
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <encoderReaction+0xd0>)
 80013d8:	2141      	movs	r1, #65	; 0x41
 80013da:	5c52      	ldrb	r2, [r2, r1]
 80013dc:	0010      	movs	r0, r2
 80013de:	3b0f      	subs	r3, #15
 80013e0:	b299      	uxth	r1, r3
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <encoderReaction+0xd0>)
 80013e4:	0043      	lsls	r3, r0, #1
 80013e6:	18d3      	adds	r3, r2, r3
 80013e8:	3304      	adds	r3, #4
 80013ea:	1c0a      	adds	r2, r1, #0
 80013ec:	801a      	strh	r2, [r3, #0]
		}
		oldVal = newVal;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <encoderReaction+0xcc>)
 80013f0:	1dfa      	adds	r2, r7, #7
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
	}
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40000400 	.word	0x40000400
 8001404:	20000097 	.word	0x20000097
 8001408:	20000168 	.word	0x20000168

0800140c <interfaceInteraction>:

void interfaceInteraction(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	static uint8_t scriptCounter = 0;
	keyReaction();
 8001410:	f7ff ff24 	bl	800125c <keyReaction>

	if (devInfo.controlByte & runScript) {
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <interfaceInteraction+0xc8>)
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	da54      	bge.n	80014ca <interfaceInteraction+0xbe>
		timeCnt++;
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <interfaceInteraction+0xcc>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <interfaceInteraction+0xcc>)
 800142a:	801a      	strh	r2, [r3, #0]
		if (timeCnt < devInfo.workData.time[scriptCounter]) {
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <interfaceInteraction+0xd0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <interfaceInteraction+0xc8>)
 8001432:	3310      	adds	r3, #16
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	3308      	adds	r3, #8
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <interfaceInteraction+0xcc>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d914      	bls.n	800146e <interfaceInteraction+0x62>
			devInfo.workData.amplitude[devInfo.currChannel] = devInfo.workData.scriptAmplitude[scriptCounter];
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <interfaceInteraction+0xd0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	0019      	movs	r1, r3
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <interfaceInteraction+0xc8>)
 800144c:	2241      	movs	r2, #65	; 0x41
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	0018      	movs	r0, r3
 8001452:	4a20      	ldr	r2, [pc, #128]	; (80014d4 <interfaceInteraction+0xc8>)
 8001454:	000b      	movs	r3, r1
 8001456:	3308      	adds	r3, #8
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	3304      	adds	r3, #4
 800145e:	8819      	ldrh	r1, [r3, #0]
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <interfaceInteraction+0xc8>)
 8001462:	0043      	lsls	r3, r0, #1
 8001464:	18d3      	adds	r3, r2, r3
 8001466:	3304      	adds	r3, #4
 8001468:	1c0a      	adds	r2, r1, #0
 800146a:	801a      	strh	r2, [r3, #0]
			}
		}
	} else { // else = if not script
		encoderReaction();
	}
}
 800146c:	e02f      	b.n	80014ce <interfaceInteraction+0xc2>
			timeCnt = 0;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <interfaceInteraction+0xcc>)
 8001470:	2200      	movs	r2, #0
 8001472:	801a      	strh	r2, [r3, #0]
			scriptCounter++;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <interfaceInteraction+0xd0>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <interfaceInteraction+0xd0>)
 800147e:	701a      	strb	r2, [r3, #0]
			if ((devInfo.workData.scriptAmplitude[scriptCounter] == 0)
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <interfaceInteraction+0xd0>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <interfaceInteraction+0xc8>)
 8001486:	3308      	adds	r3, #8
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	18d3      	adds	r3, r2, r3
 800148c:	3304      	adds	r3, #4
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <interfaceInteraction+0x9c>
					|| (devInfo.workData.time[scriptCounter] == 0)) {
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <interfaceInteraction+0xd0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <interfaceInteraction+0xc8>)
 800149a:	3310      	adds	r3, #16
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	3308      	adds	r3, #8
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d112      	bne.n	80014ce <interfaceInteraction+0xc2>
				devInfo.controlByte &= ~runScript;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <interfaceInteraction+0xc8>)
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	5c9b      	ldrb	r3, [r3, r2]
 80014ae:	227f      	movs	r2, #127	; 0x7f
 80014b0:	4013      	ands	r3, r2
 80014b2:	b2d9      	uxtb	r1, r3
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <interfaceInteraction+0xc8>)
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	5499      	strb	r1, [r3, r2]
				devInfo.workData.amplitude[0] = oldAmplitude[0];
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <interfaceInteraction+0xd4>)
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <interfaceInteraction+0xc8>)
 80014c0:	809a      	strh	r2, [r3, #4]
				scriptCounter = 0;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <interfaceInteraction+0xd0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
}
 80014c8:	e001      	b.n	80014ce <interfaceInteraction+0xc2>
		encoderReaction();
 80014ca:	f7ff ff35 	bl	8001338 <encoderReaction>
}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000168 	.word	0x20000168
 80014d8:	2000008a 	.word	0x2000008a
 80014dc:	20000098 	.word	0x20000098
 80014e0:	2000008c 	.word	0x2000008c

080014e4 <showCurrentState>:

void showCurrentState(uint8_t st) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	701a      	strb	r2, [r3, #0]
	switch(st) {
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d037      	beq.n	8001568 <showCurrentState+0x84>
 80014f8:	dc47      	bgt.n	800158a <showCurrentState+0xa6>
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d025      	beq.n	800154a <showCurrentState+0x66>
 80014fe:	dc44      	bgt.n	800158a <showCurrentState+0xa6>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <showCurrentState+0x26>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d00f      	beq.n	8001528 <showCurrentState+0x44>
 8001508:	e03f      	b.n	800158a <showCurrentState+0xa6>
	case 0:
		if(devInfo.flashCounter > 100) {
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <showCurrentState+0xe0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d94a      	bls.n	80015a8 <showCurrentState+0xc4>
			devInfo.flashCounter = 0;
 8001512:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <showCurrentState+0xe0>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
			GPIOC->ODR ^= GPIO_ODR_8;
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <showCurrentState+0xe4>)
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <showCurrentState+0xe4>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	0049      	lsls	r1, r1, #1
 8001522:	404a      	eors	r2, r1
 8001524:	615a      	str	r2, [r3, #20]
		}
		break;
 8001526:	e03f      	b.n	80015a8 <showCurrentState+0xc4>
	case 1:
		if(devInfo.flashCounter > 500) {
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <showCurrentState+0xe0>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	23fa      	movs	r3, #250	; 0xfa
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	429a      	cmp	r2, r3
 8001532:	d93b      	bls.n	80015ac <showCurrentState+0xc8>
			devInfo.flashCounter = 0;
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <showCurrentState+0xe0>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
			GPIOC->ODR ^= GPIO_ODR_8;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <showCurrentState+0xe4>)
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <showCurrentState+0xe4>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0049      	lsls	r1, r1, #1
 8001544:	404a      	eors	r2, r1
 8001546:	615a      	str	r2, [r3, #20]
		}
		break;
 8001548:	e030      	b.n	80015ac <showCurrentState+0xc8>
	case 2:
		if(devInfo.flashCounter > 200) {
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <showCurrentState+0xe0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2bc8      	cmp	r3, #200	; 0xc8
 8001550:	d92e      	bls.n	80015b0 <showCurrentState+0xcc>
			devInfo.flashCounter = 0;
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <showCurrentState+0xe0>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
			GPIOC->ODR ^= GPIO_ODR_9;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <showCurrentState+0xe4>)
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <showCurrentState+0xe4>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	0089      	lsls	r1, r1, #2
 8001562:	404a      	eors	r2, r1
 8001564:	615a      	str	r2, [r3, #20]
		}
		break;
 8001566:	e023      	b.n	80015b0 <showCurrentState+0xcc>
	case 3:
		if(devInfo.flashCounter > 500) {
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <showCurrentState+0xe0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	23fa      	movs	r3, #250	; 0xfa
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	429a      	cmp	r2, r3
 8001572:	d91f      	bls.n	80015b4 <showCurrentState+0xd0>
			devInfo.flashCounter = 0;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <showCurrentState+0xe0>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
			GPIOC->ODR ^= GPIO_ODR_9;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <showCurrentState+0xe4>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <showCurrentState+0xe4>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0089      	lsls	r1, r1, #2
 8001584:	404a      	eors	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
		}
		break;
 8001588:	e014      	b.n	80015b4 <showCurrentState+0xd0>
	default:
		if(devInfo.flashCounter > 50) {
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <showCurrentState+0xe0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b32      	cmp	r3, #50	; 0x32
 8001590:	d912      	bls.n	80015b8 <showCurrentState+0xd4>
			devInfo.flashCounter = 0;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <showCurrentState+0xe0>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
			GPIOC->ODR ^= (GPIO_ODR_8 + GPIO_ODR_9);
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <showCurrentState+0xe4>)
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <showCurrentState+0xe4>)
 800159e:	21c0      	movs	r1, #192	; 0xc0
 80015a0:	0089      	lsls	r1, r1, #2
 80015a2:	404a      	eors	r2, r1
 80015a4:	615a      	str	r2, [r3, #20]
		}
		break;
 80015a6:	e007      	b.n	80015b8 <showCurrentState+0xd4>
		break;
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	e006      	b.n	80015ba <showCurrentState+0xd6>
		break;
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	e004      	b.n	80015ba <showCurrentState+0xd6>
		break;
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	e002      	b.n	80015ba <showCurrentState+0xd6>
		break;
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	e000      	b.n	80015ba <showCurrentState+0xd6>
		break;
 80015b8:	46c0      	nop			; (mov r8, r8)
	}
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000168 	.word	0x20000168
 80015c8:	48000800 	.word	0x48000800

080015cc <llistAppend>:
	// return fail
	return 0;
}

/* inserts at last position*/
uint8_t llistAppend(node_t** head, NODE_DATA_TYPE* newPacket) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	// allocate new linked-list member
	node_t* new  = (node_t*)malloc(sizeof(node_t));
 80015d6:	2010      	movs	r0, #16
 80015d8:	f000 fa3e 	bl	8001a58 <malloc>
 80015dc:	0003      	movs	r3, r0
 80015de:	60bb      	str	r3, [r7, #8]
	if (new != NULL) {
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d020      	beq.n	8001628 <llistAppend+0x5c>
		// used in step 5
		node_t* last = *head;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
		// put new data in new member
		memcpy(&(new->data), newPacket, sizeof(NODE_DATA_TYPE));
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	6839      	ldr	r1, [r7, #0]
 80015f0:	220c      	movs	r2, #12
 80015f2:	0018      	movs	r0, r3
 80015f4:	f000 fa3a 	bl	8001a6c <memcpy>

		// make this new node LAST in list: next == NULL
		new->next = NULL;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]

		// if list is empty, than make new node as head
		if (*head == NULL) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <llistAppend+0x4a>
			*head = new;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	601a      	str	r2, [r3, #0]
			// return success
			return 1;
 800160c:	2301      	movs	r3, #1
 800160e:	e00c      	b.n	800162a <llistAppend+0x5e>
		}

		// else traverse till the last node
		while(last->next != NULL) {
			last = last->next;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60fb      	str	r3, [r7, #12]
		while(last->next != NULL) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f8      	bne.n	8001610 <llistAppend+0x44>
		}

		// change the next of last node
		last->next = (void*)new;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	60da      	str	r2, [r3, #12]

		// return success
		return 1;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <llistAppend+0x5e>
	}
	// return fail
	return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <TIM14_IRQHandler>:

volatile uint8_t msEvent = 0;
device devInfo = {0};

uint16_t pwmBuffer[CHANNELS];
void TIM14_IRQHandler(void) {
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
	static uint16_t msCounter, sineCounter, halfSineFlag;
	uint16_t temp[CHANNELS];

	TIM14->SR = 0;
 800163a:	4b56      	ldr	r3, [pc, #344]	; (8001794 <TIM14_IRQHandler+0x160>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
	// Bhaskara sine approximation
	for (uint8_t i = 0; i < CHANNELS; i++) {
 8001640:	230f      	movs	r3, #15
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e077      	b.n	800173a <TIM14_IRQHandler+0x106>
		temp[i] = (uint16_t)lroundf(sinTable[(sineCounter + devInfo.workData.phase[i]) % (STEPS/2)]
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <TIM14_IRQHandler+0x164>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	0019      	movs	r1, r3
 8001650:	250f      	movs	r5, #15
 8001652:	197b      	adds	r3, r7, r5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4a51      	ldr	r2, [pc, #324]	; (800179c <TIM14_IRQHandler+0x168>)
 8001658:	3304      	adds	r3, #4
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	18d3      	adds	r3, r2, r3
 800165e:	3304      	adds	r3, #4
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	18cb      	adds	r3, r1, r3
 8001664:	2132      	movs	r1, #50	; 0x32
 8001666:	0018      	movs	r0, r3
 8001668:	f7fe febe 	bl	80003e8 <__aeabi_idivmod>
 800166c:	000b      	movs	r3, r1
 800166e:	001a      	movs	r2, r3
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <TIM14_IRQHandler+0x16c>)
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	58d4      	ldr	r4, [r2, r3]
											 *devInfo.workData.amplitude[i]);
 8001676:	197b      	adds	r3, r7, r5
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4a48      	ldr	r2, [pc, #288]	; (800179c <TIM14_IRQHandler+0x168>)
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	18d3      	adds	r3, r2, r3
 8001680:	3304      	adds	r3, #4
 8001682:	881b      	ldrh	r3, [r3, #0]
		temp[i] = (uint16_t)lroundf(sinTable[(sineCounter + devInfo.workData.phase[i]) % (STEPS/2)]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fac1 	bl	8000c0c <__aeabi_i2f>
 800168a:	1c03      	adds	r3, r0, #0
 800168c:	1c19      	adds	r1, r3, #0
 800168e:	1c20      	adds	r0, r4, #0
 8001690:	f7fe ffc8 	bl	8000624 <__aeabi_fmul>
 8001694:	1c03      	adds	r3, r0, #0
 8001696:	1c18      	adds	r0, r3, #0
 8001698:	f000 faae 	bl	8001bf8 <lroundf>
 800169c:	0001      	movs	r1, r0
 800169e:	197b      	adds	r3, r7, r5
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	b289      	uxth	r1, r1
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	0052      	lsls	r2, r2, #1
 80016a8:	52d1      	strh	r1, [r2, r3]

		if (devInfo.controlByte & (halfSine1 << i)) {
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <TIM14_IRQHandler+0x168>)
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	5c9b      	ldrb	r3, [r3, r2]
 80016b0:	001a      	movs	r2, r3
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	411a      	asrs	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	2201      	movs	r2, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	d02a      	beq.n	8001716 <TIM14_IRQHandler+0xe2>
			if (sineCounter == devInfo.workData.phase[i]) {
 80016c0:	197b      	adds	r3, r7, r5
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4a35      	ldr	r2, [pc, #212]	; (800179c <TIM14_IRQHandler+0x168>)
 80016c6:	3304      	adds	r3, #4
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	18d3      	adds	r3, r2, r3
 80016cc:	3304      	adds	r3, #4
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <TIM14_IRQHandler+0x164>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d10d      	bne.n	80016f4 <TIM14_IRQHandler+0xc0>
				halfSineFlag ^= (1 << i);
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <TIM14_IRQHandler+0x170>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4053      	eors	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <TIM14_IRQHandler+0x170>)
 80016f2:	801a      	strh	r2, [r3, #0]
			}
			if (halfSineFlag & (1 << i)) {
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <TIM14_IRQHandler+0x170>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	210f      	movs	r1, #15
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	411a      	asrs	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d005      	beq.n	8001716 <TIM14_IRQHandler+0xe2>
				temp[i] = 0;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	2100      	movs	r1, #0
 8001714:	52d1      	strh	r1, [r2, r3]
			}
		}
		pwmBuffer[i] = temp[i]/PWM_DIV;
 8001716:	200f      	movs	r0, #15
 8001718:	183b      	adds	r3, r7, r0
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	0052      	lsls	r2, r2, #1
 8001720:	5ad3      	ldrh	r3, [r2, r3]
 8001722:	183a      	adds	r2, r7, r0
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	b299      	uxth	r1, r3
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <TIM14_IRQHandler+0x174>)
 800172c:	0052      	lsls	r2, r2, #1
 800172e:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < CHANNELS; i++) {
 8001730:	183b      	adds	r3, r7, r0
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	183b      	adds	r3, r7, r0
 8001736:	3201      	adds	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	230f      	movs	r3, #15
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d800      	bhi.n	8001746 <TIM14_IRQHandler+0x112>
 8001744:	e781      	b.n	800164a <TIM14_IRQHandler+0x16>
	}
	sineCounter = (sineCounter+1) % (STEPS/2);
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <TIM14_IRQHandler+0x164>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	2132      	movs	r1, #50	; 0x32
 800174e:	0018      	movs	r0, r3
 8001750:	f7fe fe4a 	bl	80003e8 <__aeabi_idivmod>
 8001754:	000b      	movs	r3, r1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <TIM14_IRQHandler+0x164>)
 800175a:	801a      	strh	r2, [r3, #0]

	// used for I
	DAC1->DHR12R1 = temp[1]; // if halfSine
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	885a      	ldrh	r2, [r3, #2]
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <TIM14_IRQHandler+0x178>)
 8001762:	609a      	str	r2, [r3, #8]
	DAC1->SWTRIGR = DAC_SWTRIGR_SWTRIG1;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <TIM14_IRQHandler+0x178>)
 8001766:	2201      	movs	r2, #1
 8001768:	605a      	str	r2, [r3, #4]

	if (++msCounter >= MS_TRIG) {
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <TIM14_IRQHandler+0x17c>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <TIM14_IRQHandler+0x17c>)
 8001774:	801a      	strh	r2, [r3, #0]
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <TIM14_IRQHandler+0x17c>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d905      	bls.n	800178a <TIM14_IRQHandler+0x156>
		msCounter = 0;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <TIM14_IRQHandler+0x17c>)
 8001780:	2200      	movs	r2, #0
 8001782:	801a      	strh	r2, [r3, #0]
		msEvent = 1;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <TIM14_IRQHandler+0x180>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
	}
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b004      	add	sp, #16
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40002000 	.word	0x40002000
 8001798:	200001b4 	.word	0x200001b4
 800179c:	20000168 	.word	0x20000168
 80017a0:	2000009c 	.word	0x2000009c
 80017a4:	200001b6 	.word	0x200001b6
 80017a8:	200001ac 	.word	0x200001ac
 80017ac:	40007400 	.word	0x40007400
 80017b0:	200001b8 	.word	0x200001b8
 80017b4:	20000164 	.word	0x20000164

080017b8 <main>:

uint8_t dummy[8] = {0};
int main(void) {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
	static uint16_t hzCnt = 0;

	for(uint8_t i = 0; i < CHANNELS; i++) {
 80017be:	230f      	movs	r3, #15
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e00e      	b.n	80017e6 <main+0x2e>
		devInfo.workData.amplitude[i] = AMPLITUDE;
 80017c8:	210f      	movs	r1, #15
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4a5b      	ldr	r2, [pc, #364]	; (800193c <main+0x184>)
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	18d3      	adds	r3, r2, r3
 80017d4:	3304      	adds	r3, #4
 80017d6:	22fa      	movs	r2, #250	; 0xfa
 80017d8:	00d2      	lsls	r2, r2, #3
 80017da:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < CHANNELS; i++) {
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	3201      	adds	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	230f      	movs	r3, #15
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d9eb      	bls.n	80017c8 <main+0x10>
	}
	devInfo.workData.phase[1] = 50;
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <main+0x184>)
 80017f2:	2232      	movs	r2, #50	; 0x32
 80017f4:	81da      	strh	r2, [r3, #14]
	devInfo.workData.time[0] = SCRIPT_TIME;
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <main+0x184>)
 80017f8:	4a51      	ldr	r2, [pc, #324]	; (8001940 <main+0x188>)
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
	devInfo.workData.scriptAmplitude[0] = SCRIPT_AMPLITUDE;
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <main+0x184>)
 80017fe:	22fa      	movs	r2, #250	; 0xfa
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	829a      	strh	r2, [r3, #20]

	for (uint32_t i = 0; i < (STEPS/2); i++) {
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	e03e      	b.n	8001888 <main+0xd0>
		float angle = (PI/(STEPS/2))*i;
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f7ff fa4c 	bl	8000ca8 <__aeabi_ui2f>
 8001810:	1c03      	adds	r3, r0, #0
 8001812:	494c      	ldr	r1, [pc, #304]	; (8001944 <main+0x18c>)
 8001814:	1c18      	adds	r0, r3, #0
 8001816:	f7fe ff05 	bl	8000624 <__aeabi_fmul>
 800181a:	1c03      	adds	r3, r0, #0
 800181c:	603b      	str	r3, [r7, #0]
		sinTable[i] = BH_SINE(angle);
 800181e:	2183      	movs	r1, #131	; 0x83
 8001820:	05c9      	lsls	r1, r1, #23
 8001822:	6838      	ldr	r0, [r7, #0]
 8001824:	f7fe fefe 	bl	8000624 <__aeabi_fmul>
 8001828:	1c03      	adds	r3, r0, #0
 800182a:	1c1c      	adds	r4, r3, #0
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	4846      	ldr	r0, [pc, #280]	; (8001948 <main+0x190>)
 8001830:	f7ff f81e 	bl	8000870 <__aeabi_fsub>
 8001834:	1c03      	adds	r3, r0, #0
 8001836:	1c19      	adds	r1, r3, #0
 8001838:	1c20      	adds	r0, r4, #0
 800183a:	f7fe fef3 	bl	8000624 <__aeabi_fmul>
 800183e:	1c03      	adds	r3, r0, #0
 8001840:	1c1c      	adds	r4, r3, #0
 8001842:	2181      	movs	r1, #129	; 0x81
 8001844:	05c9      	lsls	r1, r1, #23
 8001846:	6838      	ldr	r0, [r7, #0]
 8001848:	f7fe feec 	bl	8000624 <__aeabi_fmul>
 800184c:	1c03      	adds	r3, r0, #0
 800184e:	1c1d      	adds	r5, r3, #0
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	483d      	ldr	r0, [pc, #244]	; (8001948 <main+0x190>)
 8001854:	f7ff f80c 	bl	8000870 <__aeabi_fsub>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	1c19      	adds	r1, r3, #0
 800185c:	1c28      	adds	r0, r5, #0
 800185e:	f7fe fee1 	bl	8000624 <__aeabi_fmul>
 8001862:	1c03      	adds	r3, r0, #0
 8001864:	1c19      	adds	r1, r3, #0
 8001866:	4839      	ldr	r0, [pc, #228]	; (800194c <main+0x194>)
 8001868:	f7ff f802 	bl	8000870 <__aeabi_fsub>
 800186c:	1c03      	adds	r3, r0, #0
 800186e:	1c19      	adds	r1, r3, #0
 8001870:	1c20      	adds	r0, r4, #0
 8001872:	f7fe fdbf 	bl	80003f4 <__aeabi_fdiv>
 8001876:	1c03      	adds	r3, r0, #0
 8001878:	1c19      	adds	r1, r3, #0
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <main+0x198>)
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	50d1      	str	r1, [r2, r3]
	for (uint32_t i = 0; i < (STEPS/2); i++) {
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b31      	cmp	r3, #49	; 0x31
 800188c:	d9bd      	bls.n	800180a <main+0x52>
	}

	// check phase borders
	for (uint32_t i = 0; i < CHANNELS; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	e020      	b.n	80018d6 <main+0x11e>
		if (devInfo.workData.phase[i] >= (STEPS/2)) {
 8001894:	4a29      	ldr	r2, [pc, #164]	; (800193c <main+0x184>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3304      	adds	r3, #4
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	3304      	adds	r3, #4
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	2b31      	cmp	r3, #49	; 0x31
 80018a4:	d914      	bls.n	80018d0 <main+0x118>
			devInfo.workData.phase[i] %= (STEPS/2);
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <main+0x184>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	18d3      	adds	r3, r2, r3
 80018b0:	3304      	adds	r3, #4
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	2132      	movs	r1, #50	; 0x32
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fcac 	bl	8000214 <__aeabi_uidivmod>
 80018bc:	000b      	movs	r3, r1
 80018be:	b299      	uxth	r1, r3
 80018c0:	4a1e      	ldr	r2, [pc, #120]	; (800193c <main+0x184>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3304      	adds	r3, #4
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	18d3      	adds	r3, r2, r3
 80018ca:	3304      	adds	r3, #4
 80018cc:	1c0a      	adds	r2, r1, #0
 80018ce:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < CHANNELS; i++) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d9db      	bls.n	8001894 <main+0xdc>
		if (devInfo.workData.phase[i] < 0) {
			devInfo.workData.phase[i] = 0;
		}
	}

	hwInit();
 80018dc:	f7ff fada 	bl	8000e94 <hwInit>

	/* Loop forever */
	while(1) {
		if(msEvent) {
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <main+0x19c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0fa      	beq.n	80018e0 <main+0x128>
			msEvent = 0;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <main+0x19c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]

			interfaceInteraction();
 80018f0:	f7ff fd8c 	bl	800140c <interfaceInteraction>
			pollKeys();
 80018f4:	f7ff fc66 	bl	80011c4 <pollKeys>

//			analyzePacket();

			devInfo.flashCounter++;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <main+0x184>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <main+0x184>)
 8001900:	601a      	str	r2, [r3, #0]
			showCurrentState(devInfo.currChannel);
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <main+0x184>)
 8001904:	2241      	movs	r2, #65	; 0x41
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fdeb 	bl	80014e4 <showCurrentState>

			if (++hzCnt >= SECOND) {
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <main+0x1a0>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <main+0x1a0>)
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <main+0x1a0>)
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	23fa      	movs	r3, #250	; 0xfa
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	429a      	cmp	r2, r3
 8001924:	d3dc      	bcc.n	80018e0 <main+0x128>
				hzCnt = 0;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <main+0x1a0>)
 8001928:	2200      	movs	r2, #0
 800192a:	801a      	strh	r2, [r3, #0]
				GPIOC->ODR ^= GPIO_ODR_9;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <main+0x1a4>)
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <main+0x1a4>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0089      	lsls	r1, r1, #2
 8001936:	404a      	eors	r2, r1
 8001938:	615a      	str	r2, [r3, #20]
		if(msEvent) {
 800193a:	e7d1      	b.n	80018e0 <main+0x128>
 800193c:	20000168 	.word	0x20000168
 8001940:	000005dc 	.word	0x000005dc
 8001944:	3d80ad04 	.word	0x3d80ad04
 8001948:	40490e56 	.word	0x40490e56
 800194c:	42456165 	.word	0x42456165
 8001950:	2000009c 	.word	0x2000009c
 8001954:	20000164 	.word	0x20000164
 8001958:	200001ba 	.word	0x200001ba
 800195c:	48000800 	.word	0x48000800

08001960 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler>:
uint8_t rxBuffer[DMA_R_SIZE];
char txBuffer[DMA_T_SIZE] = {'\0'};

static node_t* qOfPackets = NULL;

void DMA1_CH2_3_DMA2_CH1_2_IRQHandler(void) {
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	af00      	add	r7, sp, #0
	static packet_t localCopy;
	if (DMA1->ISR & DMA_ISR_TCIF3) { // rx buffer full
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x48>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d00e      	beq.n	800198e <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x2e>
		memcpy(&localCopy, rxBuffer, sizeof(packet_t));
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x4c>)
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x50>)
 8001974:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001976:	c313      	stmia	r3!, {r0, r1, r4}
		DMA1->IFCR = (0xf << 8); // clear all dma_ch3 interrupts
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x48>)
 800197a:	22f0      	movs	r2, #240	; 0xf0
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	605a      	str	r2, [r3, #4]
		llistAppend(&qOfPackets, &localCopy);
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x4c>)
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x54>)
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f7ff fe20 	bl	80015cc <llistAppend>
	} else { // tx complete
		DMA1->IFCR = (0xf << 4); // clear all dma_ch2 interrupts
		DMA1_Channel2->CCR &= ~DMA_CCR_EN; // stop channel to restart it later
	}
}
 800198c:	e008      	b.n	80019a0 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x40>
		DMA1->IFCR = (0xf << 4); // clear all dma_ch2 interrupts
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x48>)
 8001990:	22f0      	movs	r2, #240	; 0xf0
 8001992:	605a      	str	r2, [r3, #4]
		DMA1_Channel2->CCR &= ~DMA_CCR_EN; // stop channel to restart it later
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x58>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <DMA1_CH2_3_DMA2_CH1_2_IRQHandler+0x58>)
 800199a:	2101      	movs	r1, #1
 800199c:	438a      	bics	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdb0      	pop	{r4, r5, r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40020000 	.word	0x40020000
 80019ac:	200001cc 	.word	0x200001cc
 80019b0:	200001bc 	.word	0x200001bc
 80019b4:	200001c8 	.word	0x200001c8
 80019b8:	4002001c 	.word	0x4002001c

080019bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c0:	f7ff f9d2 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	; (80019fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	; (8001a08 <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ea:	f000 f811 	bl	8001a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fee3 	bl	80017b8 <main>

080019f2 <LoopForever>:

LoopForever:
    b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   r0, =_estack
 80019f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a00:	08001d5c 	.word	0x08001d5c
  ldr r2, =_sbss
 8001a04:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a08:	200001ec 	.word	0x200001ec

08001a0c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_COMP_IRQHandler>
	...

08001a10 <__libc_init_array>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	2600      	movs	r6, #0
 8001a14:	4d0c      	ldr	r5, [pc, #48]	; (8001a48 <__libc_init_array+0x38>)
 8001a16:	4c0d      	ldr	r4, [pc, #52]	; (8001a4c <__libc_init_array+0x3c>)
 8001a18:	1b64      	subs	r4, r4, r5
 8001a1a:	10a4      	asrs	r4, r4, #2
 8001a1c:	42a6      	cmp	r6, r4
 8001a1e:	d109      	bne.n	8001a34 <__libc_init_array+0x24>
 8001a20:	2600      	movs	r6, #0
 8001a22:	f000 f923 	bl	8001c6c <_init>
 8001a26:	4d0a      	ldr	r5, [pc, #40]	; (8001a50 <__libc_init_array+0x40>)
 8001a28:	4c0a      	ldr	r4, [pc, #40]	; (8001a54 <__libc_init_array+0x44>)
 8001a2a:	1b64      	subs	r4, r4, r5
 8001a2c:	10a4      	asrs	r4, r4, #2
 8001a2e:	42a6      	cmp	r6, r4
 8001a30:	d105      	bne.n	8001a3e <__libc_init_array+0x2e>
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	00b3      	lsls	r3, r6, #2
 8001a36:	58eb      	ldr	r3, [r5, r3]
 8001a38:	4798      	blx	r3
 8001a3a:	3601      	adds	r6, #1
 8001a3c:	e7ee      	b.n	8001a1c <__libc_init_array+0xc>
 8001a3e:	00b3      	lsls	r3, r6, #2
 8001a40:	58eb      	ldr	r3, [r5, r3]
 8001a42:	4798      	blx	r3
 8001a44:	3601      	adds	r6, #1
 8001a46:	e7f2      	b.n	8001a2e <__libc_init_array+0x1e>
 8001a48:	08001d54 	.word	0x08001d54
 8001a4c:	08001d54 	.word	0x08001d54
 8001a50:	08001d54 	.word	0x08001d54
 8001a54:	08001d58 	.word	0x08001d58

08001a58 <malloc>:
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <malloc+0x10>)
 8001a5c:	0001      	movs	r1, r0
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f000 f830 	bl	8001ac4 <_malloc_r>
 8001a64:	bd10      	pop	{r4, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	20000008 	.word	0x20000008

08001a6c <memcpy>:
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d100      	bne.n	8001a76 <memcpy+0xa>
 8001a74:	bd10      	pop	{r4, pc}
 8001a76:	5ccc      	ldrb	r4, [r1, r3]
 8001a78:	54c4      	strb	r4, [r0, r3]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	e7f8      	b.n	8001a70 <memcpy+0x4>
	...

08001a80 <sbrk_aligned>:
 8001a80:	b570      	push	{r4, r5, r6, lr}
 8001a82:	4e0f      	ldr	r6, [pc, #60]	; (8001ac0 <sbrk_aligned+0x40>)
 8001a84:	000d      	movs	r5, r1
 8001a86:	6831      	ldr	r1, [r6, #0]
 8001a88:	0004      	movs	r4, r0
 8001a8a:	2900      	cmp	r1, #0
 8001a8c:	d102      	bne.n	8001a94 <sbrk_aligned+0x14>
 8001a8e:	f000 f88f 	bl	8001bb0 <_sbrk_r>
 8001a92:	6030      	str	r0, [r6, #0]
 8001a94:	0029      	movs	r1, r5
 8001a96:	0020      	movs	r0, r4
 8001a98:	f000 f88a 	bl	8001bb0 <_sbrk_r>
 8001a9c:	1c43      	adds	r3, r0, #1
 8001a9e:	d00a      	beq.n	8001ab6 <sbrk_aligned+0x36>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	1cc5      	adds	r5, r0, #3
 8001aa4:	439d      	bics	r5, r3
 8001aa6:	42a8      	cmp	r0, r5
 8001aa8:	d007      	beq.n	8001aba <sbrk_aligned+0x3a>
 8001aaa:	1a29      	subs	r1, r5, r0
 8001aac:	0020      	movs	r0, r4
 8001aae:	f000 f87f 	bl	8001bb0 <_sbrk_r>
 8001ab2:	1c43      	adds	r3, r0, #1
 8001ab4:	d101      	bne.n	8001aba <sbrk_aligned+0x3a>
 8001ab6:	2501      	movs	r5, #1
 8001ab8:	426d      	negs	r5, r5
 8001aba:	0028      	movs	r0, r5
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	200001dc 	.word	0x200001dc

08001ac4 <_malloc_r>:
 8001ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	1ccb      	adds	r3, r1, #3
 8001aca:	4393      	bics	r3, r2
 8001acc:	3308      	adds	r3, #8
 8001ace:	0006      	movs	r6, r0
 8001ad0:	001f      	movs	r7, r3
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d232      	bcs.n	8001b3c <_malloc_r+0x78>
 8001ad6:	270c      	movs	r7, #12
 8001ad8:	42b9      	cmp	r1, r7
 8001ada:	d831      	bhi.n	8001b40 <_malloc_r+0x7c>
 8001adc:	0030      	movs	r0, r6
 8001ade:	f000 f879 	bl	8001bd4 <__malloc_lock>
 8001ae2:	4d32      	ldr	r5, [pc, #200]	; (8001bac <_malloc_r+0xe8>)
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	001c      	movs	r4, r3
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d12e      	bne.n	8001b4a <_malloc_r+0x86>
 8001aec:	0039      	movs	r1, r7
 8001aee:	0030      	movs	r0, r6
 8001af0:	f7ff ffc6 	bl	8001a80 <sbrk_aligned>
 8001af4:	0004      	movs	r4, r0
 8001af6:	1c43      	adds	r3, r0, #1
 8001af8:	d11e      	bne.n	8001b38 <_malloc_r+0x74>
 8001afa:	682c      	ldr	r4, [r5, #0]
 8001afc:	0025      	movs	r5, r4
 8001afe:	2d00      	cmp	r5, #0
 8001b00:	d14a      	bne.n	8001b98 <_malloc_r+0xd4>
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	0029      	movs	r1, r5
 8001b06:	18e3      	adds	r3, r4, r3
 8001b08:	0030      	movs	r0, r6
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	f000 f850 	bl	8001bb0 <_sbrk_r>
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	4283      	cmp	r3, r0
 8001b14:	d143      	bne.n	8001b9e <_malloc_r+0xda>
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	3703      	adds	r7, #3
 8001b1a:	1aff      	subs	r7, r7, r3
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	439f      	bics	r7, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	2f0c      	cmp	r7, #12
 8001b24:	d200      	bcs.n	8001b28 <_malloc_r+0x64>
 8001b26:	270c      	movs	r7, #12
 8001b28:	0039      	movs	r1, r7
 8001b2a:	0030      	movs	r0, r6
 8001b2c:	f7ff ffa8 	bl	8001a80 <sbrk_aligned>
 8001b30:	1c43      	adds	r3, r0, #1
 8001b32:	d034      	beq.n	8001b9e <_malloc_r+0xda>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	19df      	adds	r7, r3, r7
 8001b38:	6027      	str	r7, [r4, #0]
 8001b3a:	e013      	b.n	8001b64 <_malloc_r+0xa0>
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dacb      	bge.n	8001ad8 <_malloc_r+0x14>
 8001b40:	230c      	movs	r3, #12
 8001b42:	2500      	movs	r5, #0
 8001b44:	6033      	str	r3, [r6, #0]
 8001b46:	0028      	movs	r0, r5
 8001b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	1bd1      	subs	r1, r2, r7
 8001b4e:	d420      	bmi.n	8001b92 <_malloc_r+0xce>
 8001b50:	290b      	cmp	r1, #11
 8001b52:	d917      	bls.n	8001b84 <_malloc_r+0xc0>
 8001b54:	19e2      	adds	r2, r4, r7
 8001b56:	6027      	str	r7, [r4, #0]
 8001b58:	42a3      	cmp	r3, r4
 8001b5a:	d111      	bne.n	8001b80 <_malloc_r+0xbc>
 8001b5c:	602a      	str	r2, [r5, #0]
 8001b5e:	6863      	ldr	r3, [r4, #4]
 8001b60:	6011      	str	r1, [r2, #0]
 8001b62:	6053      	str	r3, [r2, #4]
 8001b64:	0030      	movs	r0, r6
 8001b66:	0025      	movs	r5, r4
 8001b68:	f000 f83c 	bl	8001be4 <__malloc_unlock>
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	350b      	adds	r5, #11
 8001b70:	1d23      	adds	r3, r4, #4
 8001b72:	4395      	bics	r5, r2
 8001b74:	1aea      	subs	r2, r5, r3
 8001b76:	429d      	cmp	r5, r3
 8001b78:	d0e5      	beq.n	8001b46 <_malloc_r+0x82>
 8001b7a:	1b5b      	subs	r3, r3, r5
 8001b7c:	50a3      	str	r3, [r4, r2]
 8001b7e:	e7e2      	b.n	8001b46 <_malloc_r+0x82>
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	e7ec      	b.n	8001b5e <_malloc_r+0x9a>
 8001b84:	6862      	ldr	r2, [r4, #4]
 8001b86:	42a3      	cmp	r3, r4
 8001b88:	d101      	bne.n	8001b8e <_malloc_r+0xca>
 8001b8a:	602a      	str	r2, [r5, #0]
 8001b8c:	e7ea      	b.n	8001b64 <_malloc_r+0xa0>
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	e7e8      	b.n	8001b64 <_malloc_r+0xa0>
 8001b92:	0023      	movs	r3, r4
 8001b94:	6864      	ldr	r4, [r4, #4]
 8001b96:	e7a7      	b.n	8001ae8 <_malloc_r+0x24>
 8001b98:	002c      	movs	r4, r5
 8001b9a:	686d      	ldr	r5, [r5, #4]
 8001b9c:	e7af      	b.n	8001afe <_malloc_r+0x3a>
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	0030      	movs	r0, r6
 8001ba2:	6033      	str	r3, [r6, #0]
 8001ba4:	f000 f81e 	bl	8001be4 <__malloc_unlock>
 8001ba8:	e7cd      	b.n	8001b46 <_malloc_r+0x82>
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	200001d8 	.word	0x200001d8

08001bb0 <_sbrk_r>:
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	b570      	push	{r4, r5, r6, lr}
 8001bb4:	4d06      	ldr	r5, [pc, #24]	; (8001bd0 <_sbrk_r+0x20>)
 8001bb6:	0004      	movs	r4, r0
 8001bb8:	0008      	movs	r0, r1
 8001bba:	602b      	str	r3, [r5, #0]
 8001bbc:	f000 f846 	bl	8001c4c <_sbrk>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	d103      	bne.n	8001bcc <_sbrk_r+0x1c>
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d000      	beq.n	8001bcc <_sbrk_r+0x1c>
 8001bca:	6023      	str	r3, [r4, #0]
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	200001e0 	.word	0x200001e0

08001bd4 <__malloc_lock>:
 8001bd4:	b510      	push	{r4, lr}
 8001bd6:	4802      	ldr	r0, [pc, #8]	; (8001be0 <__malloc_lock+0xc>)
 8001bd8:	f000 f80c 	bl	8001bf4 <__retarget_lock_acquire_recursive>
 8001bdc:	bd10      	pop	{r4, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	200001e4 	.word	0x200001e4

08001be4 <__malloc_unlock>:
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <__malloc_unlock+0xc>)
 8001be8:	f000 f805 	bl	8001bf6 <__retarget_lock_release_recursive>
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	200001e4 	.word	0x200001e4

08001bf4 <__retarget_lock_acquire_recursive>:
 8001bf4:	4770      	bx	lr

08001bf6 <__retarget_lock_release_recursive>:
 8001bf6:	4770      	bx	lr

08001bf8 <lroundf>:
 8001bf8:	0dc1      	lsrs	r1, r0, #23
 8001bfa:	b2c9      	uxtb	r1, r1
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	b510      	push	{r4, lr}
 8001c00:	2401      	movs	r4, #1
 8001c02:	1c03      	adds	r3, r0, #0
 8001c04:	3a7f      	subs	r2, #127	; 0x7f
 8001c06:	17c0      	asrs	r0, r0, #31
 8001c08:	4320      	orrs	r0, r4
 8001c0a:	2a1e      	cmp	r2, #30
 8001c0c:	dc18      	bgt.n	8001c40 <lroundf+0x48>
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	da02      	bge.n	8001c18 <lroundf+0x20>
 8001c12:	1c53      	adds	r3, r2, #1
 8001c14:	d118      	bne.n	8001c48 <lroundf+0x50>
 8001c16:	bd10      	pop	{r4, pc}
 8001c18:	2480      	movs	r4, #128	; 0x80
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	0424      	lsls	r4, r4, #16
 8001c20:	431c      	orrs	r4, r3
 8001c22:	2a16      	cmp	r2, #22
 8001c24:	dd04      	ble.n	8001c30 <lroundf+0x38>
 8001c26:	0023      	movs	r3, r4
 8001c28:	3996      	subs	r1, #150	; 0x96
 8001c2a:	408b      	lsls	r3, r1
 8001c2c:	4358      	muls	r0, r3
 8001c2e:	e7f2      	b.n	8001c16 <lroundf+0x1e>
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	03db      	lsls	r3, r3, #15
 8001c34:	4113      	asrs	r3, r2
 8001c36:	2117      	movs	r1, #23
 8001c38:	191b      	adds	r3, r3, r4
 8001c3a:	1a8a      	subs	r2, r1, r2
 8001c3c:	40d3      	lsrs	r3, r2
 8001c3e:	e7f5      	b.n	8001c2c <lroundf+0x34>
 8001c40:	1c18      	adds	r0, r3, #0
 8001c42:	f7fe ffc3 	bl	8000bcc <__aeabi_f2iz>
 8001c46:	e7e6      	b.n	8001c16 <lroundf+0x1e>
 8001c48:	2000      	movs	r0, #0
 8001c4a:	e7e4      	b.n	8001c16 <lroundf+0x1e>

08001c4c <_sbrk>:
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <_sbrk+0x18>)
 8001c4e:	0003      	movs	r3, r0
 8001c50:	6811      	ldr	r1, [r2, #0]
 8001c52:	2900      	cmp	r1, #0
 8001c54:	d101      	bne.n	8001c5a <_sbrk+0xe>
 8001c56:	4904      	ldr	r1, [pc, #16]	; (8001c68 <_sbrk+0x1c>)
 8001c58:	6011      	str	r1, [r2, #0]
 8001c5a:	6810      	ldr	r0, [r2, #0]
 8001c5c:	18c3      	adds	r3, r0, r3
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4770      	bx	lr
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	200001e8 	.word	0x200001e8
 8001c68:	200001f0 	.word	0x200001f0

08001c6c <_init>:
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c72:	bc08      	pop	{r3}
 8001c74:	469e      	mov	lr, r3
 8001c76:	4770      	bx	lr

08001c78 <_fini>:
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7e:	bc08      	pop	{r3}
 8001c80:	469e      	mov	lr, r3
 8001c82:	4770      	bx	lr
