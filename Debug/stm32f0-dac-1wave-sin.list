
stm32f0-dac-1wave-sin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080005c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005c4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000078d  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002d5  00000000  00000000  000207b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00020a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00020b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a218  00000000  00000000  00020b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000af8  00000000  00000000  0002ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003693b  00000000  00000000  0002b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000621d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  00062224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000590 	.word	0x08000590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000590 	.word	0x08000590

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000242:	4b31      	ldr	r3, [pc, #196]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	220c      	movs	r2, #12
 8000248:	4013      	ands	r3, r2
 800024a:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2b08      	cmp	r3, #8
 8000250:	d011      	beq.n	8000276 <SystemCoreClockUpdate+0x4a>
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	2b08      	cmp	r3, #8
 8000256:	d841      	bhi.n	80002dc <SystemCoreClockUpdate+0xb0>
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <SystemCoreClockUpdate+0x3a>
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d004      	beq.n	800026e <SystemCoreClockUpdate+0x42>
 8000264:	e03a      	b.n	80002dc <SystemCoreClockUpdate+0xb0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000266:	4b29      	ldr	r3, [pc, #164]	; (800030c <SystemCoreClockUpdate+0xe0>)
 8000268:	4a29      	ldr	r2, [pc, #164]	; (8000310 <SystemCoreClockUpdate+0xe4>)
 800026a:	601a      	str	r2, [r3, #0]
      break;
 800026c:	e03a      	b.n	80002e4 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800026e:	4b27      	ldr	r3, [pc, #156]	; (800030c <SystemCoreClockUpdate+0xe0>)
 8000270:	4a27      	ldr	r2, [pc, #156]	; (8000310 <SystemCoreClockUpdate+0xe4>)
 8000272:	601a      	str	r2, [r3, #0]
      break;
 8000274:	e036      	b.n	80002e4 <SystemCoreClockUpdate+0xb8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000276:	4b24      	ldr	r3, [pc, #144]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 8000278:	685a      	ldr	r2, [r3, #4]
 800027a:	23f0      	movs	r3, #240	; 0xf0
 800027c:	039b      	lsls	r3, r3, #14
 800027e:	4013      	ands	r3, r2
 8000280:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	025b      	lsls	r3, r3, #9
 800028a:	4013      	ands	r3, r2
 800028c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	0c9b      	lsrs	r3, r3, #18
 8000292:	3302      	adds	r3, #2
 8000294:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 8000298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800029a:	220f      	movs	r2, #15
 800029c:	4013      	ands	r3, r2
 800029e:	3301      	adds	r3, #1
 80002a0:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d10a      	bne.n	80002c2 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80002ac:	6839      	ldr	r1, [r7, #0]
 80002ae:	4818      	ldr	r0, [pc, #96]	; (8000310 <SystemCoreClockUpdate+0xe4>)
 80002b0:	f7ff ff2a 	bl	8000108 <__udivsi3>
 80002b4:	0003      	movs	r3, r0
 80002b6:	001a      	movs	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	435a      	muls	r2, r3
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002be:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 80002c0:	e010      	b.n	80002e4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80002c2:	68b9      	ldr	r1, [r7, #8]
 80002c4:	000a      	movs	r2, r1
 80002c6:	0152      	lsls	r2, r2, #5
 80002c8:	1a52      	subs	r2, r2, r1
 80002ca:	0193      	lsls	r3, r2, #6
 80002cc:	1a9b      	subs	r3, r3, r2
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	185b      	adds	r3, r3, r1
 80002d2:	021b      	lsls	r3, r3, #8
 80002d4:	001a      	movs	r2, r3
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002d8:	601a      	str	r2, [r3, #0]
      break;
 80002da:	e003      	b.n	80002e4 <SystemCoreClockUpdate+0xb8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002de:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <SystemCoreClockUpdate+0xe4>)
 80002e0:	601a      	str	r2, [r3, #0]
      break;
 80002e2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <SystemCoreClockUpdate+0xdc>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	091b      	lsrs	r3, r3, #4
 80002ea:	220f      	movs	r2, #15
 80002ec:	4013      	ands	r3, r2
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <SystemCoreClockUpdate+0xe8>)
 80002f0:	5cd3      	ldrb	r3, [r2, r3]
 80002f2:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	40da      	lsrs	r2, r3
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <SystemCoreClockUpdate+0xe0>)
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b004      	add	sp, #16
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	20000000 	.word	0x20000000
 8000310:	007a1200 	.word	0x007a1200
 8000314:	080005a8 	.word	0x080005a8

08000318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	0002      	movs	r2, r0
 8000320:	6039      	str	r1, [r7, #0]
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000326:	1dfb      	adds	r3, r7, #7
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b7f      	cmp	r3, #127	; 0x7f
 800032c:	d828      	bhi.n	8000380 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032e:	4a2f      	ldr	r2, [pc, #188]	; (80003ec <__NVIC_SetPriority+0xd4>)
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b25b      	sxtb	r3, r3
 8000336:	089b      	lsrs	r3, r3, #2
 8000338:	33c0      	adds	r3, #192	; 0xc0
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	589b      	ldr	r3, [r3, r2]
 800033e:	1dfa      	adds	r2, r7, #7
 8000340:	7812      	ldrb	r2, [r2, #0]
 8000342:	0011      	movs	r1, r2
 8000344:	2203      	movs	r2, #3
 8000346:	400a      	ands	r2, r1
 8000348:	00d2      	lsls	r2, r2, #3
 800034a:	21ff      	movs	r1, #255	; 0xff
 800034c:	4091      	lsls	r1, r2
 800034e:	000a      	movs	r2, r1
 8000350:	43d2      	mvns	r2, r2
 8000352:	401a      	ands	r2, r3
 8000354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	019b      	lsls	r3, r3, #6
 800035a:	22ff      	movs	r2, #255	; 0xff
 800035c:	401a      	ands	r2, r3
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	0018      	movs	r0, r3
 8000364:	2303      	movs	r3, #3
 8000366:	4003      	ands	r3, r0
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800036c:	481f      	ldr	r0, [pc, #124]	; (80003ec <__NVIC_SetPriority+0xd4>)
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b25b      	sxtb	r3, r3
 8000374:	089b      	lsrs	r3, r3, #2
 8000376:	430a      	orrs	r2, r1
 8000378:	33c0      	adds	r3, #192	; 0xc0
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800037e:	e031      	b.n	80003e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000380:	4a1b      	ldr	r2, [pc, #108]	; (80003f0 <__NVIC_SetPriority+0xd8>)
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	0019      	movs	r1, r3
 8000388:	230f      	movs	r3, #15
 800038a:	400b      	ands	r3, r1
 800038c:	3b08      	subs	r3, #8
 800038e:	089b      	lsrs	r3, r3, #2
 8000390:	3306      	adds	r3, #6
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	18d3      	adds	r3, r2, r3
 8000396:	3304      	adds	r3, #4
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	1dfa      	adds	r2, r7, #7
 800039c:	7812      	ldrb	r2, [r2, #0]
 800039e:	0011      	movs	r1, r2
 80003a0:	2203      	movs	r2, #3
 80003a2:	400a      	ands	r2, r1
 80003a4:	00d2      	lsls	r2, r2, #3
 80003a6:	21ff      	movs	r1, #255	; 0xff
 80003a8:	4091      	lsls	r1, r2
 80003aa:	000a      	movs	r2, r1
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	401a      	ands	r2, r3
 80003b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	019b      	lsls	r3, r3, #6
 80003b6:	22ff      	movs	r2, #255	; 0xff
 80003b8:	401a      	ands	r2, r3
 80003ba:	1dfb      	adds	r3, r7, #7
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	0018      	movs	r0, r3
 80003c0:	2303      	movs	r3, #3
 80003c2:	4003      	ands	r3, r0
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c8:	4809      	ldr	r0, [pc, #36]	; (80003f0 <__NVIC_SetPriority+0xd8>)
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	001c      	movs	r4, r3
 80003d0:	230f      	movs	r3, #15
 80003d2:	4023      	ands	r3, r4
 80003d4:	3b08      	subs	r3, #8
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	3306      	adds	r3, #6
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	18c3      	adds	r3, r0, r3
 80003e0:	3304      	adds	r3, #4
 80003e2:	601a      	str	r2, [r3, #0]
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b003      	add	sp, #12
 80003ea:	bd90      	pop	{r4, r7, pc}
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	045b      	lsls	r3, r3, #17
 8000404:	429a      	cmp	r2, r3
 8000406:	d301      	bcc.n	800040c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000408:	2301      	movs	r3, #1
 800040a:	e010      	b.n	800042e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <SysTick_Config+0x44>)
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	3a01      	subs	r2, #1
 8000412:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000414:	2301      	movs	r3, #1
 8000416:	425b      	negs	r3, r3
 8000418:	2103      	movs	r1, #3
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff7c 	bl	8000318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x44>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x44>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	0018      	movs	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	e000e010 	.word	0xe000e010

0800043c <main>:
#include "main.h"

void RCC_init(void);
void GPIO_init(void);

int main(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	RCC_init();
 8000440:	f000 f804 	bl	800044c <RCC_init>
	GPIO_init();
 8000444:	f000 f850 	bl	80004e8 <GPIO_init>
	/* Loop forever */
	while(1) {
 8000448:	e7fe      	b.n	8000448 <main+0xc>
	...

0800044c <RCC_init>:

	}
}

// RCC input = HSI, 8Mhz -> PLL -> 48Mhz
void RCC_init(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	// HSI(8MHz) on
	RCC->CR |= RCC_CR_HSION;
 8000450:	4b22      	ldr	r3, [pc, #136]	; (80004dc <RCC_init+0x90>)
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <RCC_init+0x90>)
 8000456:	2101      	movs	r1, #1
 8000458:	430a      	orrs	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
	// Set HSI as PLL src
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2;
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <RCC_init+0x90>)
 800045e:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <RCC_init+0x90>)
 8000460:	6852      	ldr	r2, [r2, #4]
 8000462:	605a      	str	r2, [r3, #4]
	// Set PLLMul to x12
	RCC->CFGR |= RCC_CFGR_PLLMUL12;
 8000464:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <RCC_init+0x90>)
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <RCC_init+0x90>)
 800046a:	21a0      	movs	r1, #160	; 0xa0
 800046c:	0389      	lsls	r1, r1, #14
 800046e:	430a      	orrs	r2, r1
 8000470:	605a      	str	r2, [r3, #4]
	// PLL turn on
	RCC->CR |= RCC_CR_PLLON;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <RCC_init+0x90>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <RCC_init+0x90>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0449      	lsls	r1, r1, #17
 800047c:	430a      	orrs	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
	// System clock mux
	RCC->CFGR |= RCC_CFGR_SWS_PLL;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <RCC_init+0x90>)
 8000482:	685a      	ldr	r2, [r3, #4]
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <RCC_init+0x90>)
 8000486:	2108      	movs	r1, #8
 8000488:	430a      	orrs	r2, r1
 800048a:	605a      	str	r2, [r3, #4]
	// AHB div to 1
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800048c:	4a13      	ldr	r2, [pc, #76]	; (80004dc <RCC_init+0x90>)
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <RCC_init+0x90>)
 8000490:	6852      	ldr	r2, [r2, #4]
 8000492:	605a      	str	r2, [r3, #4]
	// APB div to 1
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8000494:	4a11      	ldr	r2, [pc, #68]	; (80004dc <RCC_init+0x90>)
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <RCC_init+0x90>)
 8000498:	6852      	ldr	r2, [r2, #4]
 800049a:	605a      	str	r2, [r3, #4]
	// check HSI as system clock flag ready
	while(((RCC->CFGR & RCC_CFGR_SWS_0) && (RCC->CFGR & RCC_CFGR_SWS_1)) != RCC_CFGR_SWS_HSI);
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <RCC_init+0x90>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	2204      	movs	r2, #4
 80004a4:	4013      	ands	r3, r2
 80004a6:	d006      	beq.n	80004b6 <RCC_init+0x6a>
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <RCC_init+0x90>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2208      	movs	r2, #8
 80004ae:	4013      	ands	r3, r2
 80004b0:	d001      	beq.n	80004b6 <RCC_init+0x6a>
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <RCC_init+0x6c>
 80004b6:	2300      	movs	r3, #0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f0      	bne.n	800049e <RCC_init+0x52>
	// set system variable SystemCoreClock to current clock value
	SystemCoreClockUpdate();
 80004bc:	f7ff feb6 	bl	800022c <SystemCoreClockUpdate>
	// set systick timer to 1 us delay
	SysTick_Config(SystemCoreClock/1000000);
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <RCC_init+0x94>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4907      	ldr	r1, [pc, #28]	; (80004e4 <RCC_init+0x98>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f7ff fe1e 	bl	8000108 <__udivsi3>
 80004cc:	0003      	movs	r3, r0
 80004ce:	0018      	movs	r0, r3
 80004d0:	f7ff ff90 	bl	80003f4 <SysTick_Config>
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000
 80004e0:	20000000 	.word	0x20000000
 80004e4:	000f4240 	.word	0x000f4240

080004e8 <GPIO_init>:
void GPIO_init(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	f7ff fe92 	bl	8000220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f000 f811 	bl	8000548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff ff89 	bl	800043c <main>

0800052a <LoopForever>:

LoopForever:
    b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000538:	080005c0 	.word	0x080005c0
  ldr r2, =_sbss
 800053c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000540:	20000020 	.word	0x20000020

08000544 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC_COMP_IRQHandler>
	...

08000548 <__libc_init_array>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2600      	movs	r6, #0
 800054c:	4d0c      	ldr	r5, [pc, #48]	; (8000580 <__libc_init_array+0x38>)
 800054e:	4c0d      	ldr	r4, [pc, #52]	; (8000584 <__libc_init_array+0x3c>)
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	10a4      	asrs	r4, r4, #2
 8000554:	42a6      	cmp	r6, r4
 8000556:	d109      	bne.n	800056c <__libc_init_array+0x24>
 8000558:	2600      	movs	r6, #0
 800055a:	f000 f819 	bl	8000590 <_init>
 800055e:	4d0a      	ldr	r5, [pc, #40]	; (8000588 <__libc_init_array+0x40>)
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <__libc_init_array+0x44>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	42a6      	cmp	r6, r4
 8000568:	d105      	bne.n	8000576 <__libc_init_array+0x2e>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	00b3      	lsls	r3, r6, #2
 800056e:	58eb      	ldr	r3, [r5, r3]
 8000570:	4798      	blx	r3
 8000572:	3601      	adds	r6, #1
 8000574:	e7ee      	b.n	8000554 <__libc_init_array+0xc>
 8000576:	00b3      	lsls	r3, r6, #2
 8000578:	58eb      	ldr	r3, [r5, r3]
 800057a:	4798      	blx	r3
 800057c:	3601      	adds	r6, #1
 800057e:	e7f2      	b.n	8000566 <__libc_init_array+0x1e>
 8000580:	080005b8 	.word	0x080005b8
 8000584:	080005b8 	.word	0x080005b8
 8000588:	080005b8 	.word	0x080005b8
 800058c:	080005bc 	.word	0x080005bc

08000590 <_init>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr

0800059c <_fini>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr
